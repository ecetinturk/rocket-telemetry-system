
a.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093cc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000510  080094e0  080094e0  000194e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099f0  080099f0  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  080099f0  080099f0  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080099f0  080099f0  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099f0  080099f0  000199f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080099f4  080099f4  000199f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080099f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000584  200001e0  08009bd4  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000764  08009bd4  00020764  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000db13  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002764  00000000  00000000  0002dd18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc0  00000000  00000000  00030480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cd0  00000000  00000000  00031240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019426  00000000  00000000  00031f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000109c7  00000000  00000000  0004b336  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000891dc  00000000  00000000  0005bcfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e4ed9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ad4  00000000  00000000  000e4f2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	080094c4 	.word	0x080094c4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	080094c4 	.word	0x080094c4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_f2iz>:
 8000fe4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fe8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fec:	d30f      	bcc.n	800100e <__aeabi_f2iz+0x2a>
 8000fee:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000ff2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ff6:	d90d      	bls.n	8001014 <__aeabi_f2iz+0x30>
 8000ff8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ffc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001000:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001004:	fa23 f002 	lsr.w	r0, r3, r2
 8001008:	bf18      	it	ne
 800100a:	4240      	negne	r0, r0
 800100c:	4770      	bx	lr
 800100e:	f04f 0000 	mov.w	r0, #0
 8001012:	4770      	bx	lr
 8001014:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001018:	d101      	bne.n	800101e <__aeabi_f2iz+0x3a>
 800101a:	0242      	lsls	r2, r0, #9
 800101c:	d105      	bne.n	800102a <__aeabi_f2iz+0x46>
 800101e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001022:	bf08      	it	eq
 8001024:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001028:	4770      	bx	lr
 800102a:	f04f 0000 	mov.w	r0, #0
 800102e:	4770      	bx	lr

08001030 <SX1278_hw_init>:

//////////////////////////////////
// logic
//////////////////////////////////

__weak void SX1278_hw_init(SX1278_hw_t * hw) {
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8001038:	2101      	movs	r1, #1
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f000 f80d 	bl	800105a <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6858      	ldr	r0, [r3, #4]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	b29b      	uxth	r3, r3
 800104a:	2201      	movs	r2, #1
 800104c:	4619      	mov	r1, r3
 800104e:	f002 fc40 	bl	80038d2 <HAL_GPIO_WritePin>
}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t * hw, int value) {
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
 8001062:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6958      	ldr	r0, [r3, #20]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	691b      	ldr	r3, [r3, #16]
 800106c:	b299      	uxth	r1, r3
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	2b01      	cmp	r3, #1
 8001072:	bf0c      	ite	eq
 8001074:	2301      	moveq	r3, #1
 8001076:	2300      	movne	r3, #0
 8001078:	b2db      	uxtb	r3, r3
 800107a:	461a      	mov	r2, r3
 800107c:	f002 fc29 	bl	80038d2 <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8001080:	bf00      	nop
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t * hw) {
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8001090:	2101      	movs	r1, #1
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f7ff ffe1 	bl	800105a <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6858      	ldr	r0, [r3, #4]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	b29b      	uxth	r3, r3
 80010a2:	2200      	movs	r2, #0
 80010a4:	4619      	mov	r1, r3
 80010a6:	f002 fc14 	bl	80038d2 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f000 f856 	bl	800115c <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6858      	ldr	r0, [r3, #4]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	b29b      	uxth	r3, r3
 80010ba:	2201      	movs	r2, #1
 80010bc:	4619      	mov	r1, r3
 80010be:	f002 fc08 	bl	80038d2 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 80010c2:	2064      	movs	r0, #100	; 0x64
 80010c4:	f000 f84a 	bl	800115c <SX1278_hw_DelayMs>
}
 80010c8:	bf00      	nop
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t * hw, uint8_t cmd) {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	460b      	mov	r3, r1
 80010da:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 80010dc:	2100      	movs	r1, #0
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f7ff ffbb 	bl	800105a <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6998      	ldr	r0, [r3, #24]
 80010e8:	1cf9      	adds	r1, r7, #3
 80010ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ee:	2201      	movs	r2, #1
 80010f0:	f004 f88c 	bl	800520c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 80010f4:	bf00      	nop
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	699b      	ldr	r3, [r3, #24]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f004 fb64 	bl	80057c8 <HAL_SPI_GetState>
 8001100:	4603      	mov	r3, r0
 8001102:	2b01      	cmp	r3, #1
 8001104:	d1f7      	bne.n	80010f6 <SX1278_hw_SPICommand+0x26>
		;
}
 8001106:	bf00      	nop
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t * hw) {
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af02      	add	r7, sp, #8
 8001116:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 8001118:	2300      	movs	r3, #0
 800111a:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 800111c:	2300      	movs	r3, #0
 800111e:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 8001120:	2100      	movs	r1, #0
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f7ff ff99 	bl	800105a <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6998      	ldr	r0, [r3, #24]
 800112c:	f107 020e 	add.w	r2, r7, #14
 8001130:	f107 010f 	add.w	r1, r7, #15
 8001134:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001138:	9300      	str	r3, [sp, #0]
 800113a:	2301      	movs	r3, #1
 800113c:	f004 f9a2 	bl	8005484 <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8001140:	bf00      	nop
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	699b      	ldr	r3, [r3, #24]
 8001146:	4618      	mov	r0, r3
 8001148:	f004 fb3e 	bl	80057c8 <HAL_SPI_GetState>
 800114c:	4603      	mov	r3, r0
 800114e:	2b01      	cmp	r3, #1
 8001150:	d1f7      	bne.n	8001142 <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 8001152:	7bbb      	ldrb	r3, [r7, #14]
}
 8001154:	4618      	mov	r0, r3
 8001156:	3710      	adds	r7, #16
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f002 f837 	bl	80031d8 <HAL_Delay>
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t * hw) {
 8001172:	b580      	push	{r7, lr}
 8001174:	b082      	sub	sp, #8
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	68da      	ldr	r2, [r3, #12]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	b29b      	uxth	r3, r3
 8001184:	4619      	mov	r1, r3
 8001186:	4610      	mov	r0, r2
 8001188:	f002 fb8c 	bl	80038a4 <HAL_GPIO_ReadPin>
 800118c:	4603      	mov	r3, r0
 800118e:	2b01      	cmp	r3, #1
 8001190:	bf0c      	ite	eq
 8001192:	2301      	moveq	r3, #1
 8001194:	2300      	movne	r3, #0
 8001196:	b2db      	uxtb	r3, r3
}
 8001198:	4618      	mov	r0, r3
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <SX1278_SPIRead>:

//////////////////////////////////
// logic
//////////////////////////////////

uint8_t SX1278_SPIRead(SX1278_t * module, uint8_t addr) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	460b      	mov	r3, r1
 80011aa:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	78fa      	ldrb	r2, [r7, #3]
 80011b2:	4611      	mov	r1, r2
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff ff8b 	bl	80010d0 <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff ffa6 	bl	8001110 <SX1278_hw_SPIReadByte>
 80011c4:	4603      	mov	r3, r0
 80011c6:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2101      	movs	r1, #1
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff ff43 	bl	800105a <SX1278_hw_SetNSS>
	return tmp;
 80011d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t * module, uint8_t addr, uint8_t cmd) {
 80011de:	b580      	push	{r7, lr}
 80011e0:	b082      	sub	sp, #8
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
 80011e6:	460b      	mov	r3, r1
 80011e8:	70fb      	strb	r3, [r7, #3]
 80011ea:	4613      	mov	r3, r2
 80011ec:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	2100      	movs	r1, #0
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff ff30 	bl	800105a <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	78fb      	ldrb	r3, [r7, #3]
 8001200:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001204:	b2db      	uxtb	r3, r3
 8001206:	4619      	mov	r1, r3
 8001208:	4610      	mov	r0, r2
 800120a:	f7ff ff61 	bl	80010d0 <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	78ba      	ldrb	r2, [r7, #2]
 8001214:	4611      	mov	r1, r2
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff ff5a 	bl	80010d0 <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2101      	movs	r1, #1
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff ff19 	bl	800105a <SX1278_hw_SetNSS>
}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <SX1278_SPIBurstWrite>:
		SX1278_hw_SetNSS(module->hw, 1);
	}
}

void SX1278_SPIBurstWrite(SX1278_t * module, uint8_t addr, uint8_t* txBuf,
		uint8_t length) {
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	607a      	str	r2, [r7, #4]
 800123a:	461a      	mov	r2, r3
 800123c:	460b      	mov	r3, r1
 800123e:	72fb      	strb	r3, [r7, #11]
 8001240:	4613      	mov	r3, r2
 8001242:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 8001244:	7abb      	ldrb	r3, [r7, #10]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d929      	bls.n	800129e <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2100      	movs	r1, #0
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff ff02 	bl	800105a <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	7afb      	ldrb	r3, [r7, #11]
 800125c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001260:	b2db      	uxtb	r3, r3
 8001262:	4619      	mov	r1, r3
 8001264:	4610      	mov	r0, r2
 8001266:	f7ff ff33 	bl	80010d0 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 800126a:	2300      	movs	r3, #0
 800126c:	75fb      	strb	r3, [r7, #23]
 800126e:	e00b      	b.n	8001288 <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	6818      	ldr	r0, [r3, #0]
 8001274:	7dfb      	ldrb	r3, [r7, #23]
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	4413      	add	r3, r2
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	4619      	mov	r1, r3
 800127e:	f7ff ff27 	bl	80010d0 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8001282:	7dfb      	ldrb	r3, [r7, #23]
 8001284:	3301      	adds	r3, #1
 8001286:	75fb      	strb	r3, [r7, #23]
 8001288:	7dfa      	ldrb	r2, [r7, #23]
 800128a:	7abb      	ldrb	r3, [r7, #10]
 800128c:	429a      	cmp	r2, r3
 800128e:	d3ef      	bcc.n	8001270 <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2101      	movs	r1, #1
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff fedf 	bl	800105a <SX1278_hw_SetNSS>
 800129c:	e000      	b.n	80012a0 <SX1278_SPIBurstWrite+0x70>
		return;
 800129e:	bf00      	nop
	}
}
 80012a0:	3718      	adds	r7, #24
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <SX1278_defaultConfig>:

void SX1278_defaultConfig(SX1278_t * module) {
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b084      	sub	sp, #16
 80012aa:	af02      	add	r7, sp, #8
 80012ac:	6078      	str	r0, [r7, #4]
	SX1278_config(module, module->frequency, module->power, module->LoRa_Rate,
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	7919      	ldrb	r1, [r3, #4]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	795a      	ldrb	r2, [r3, #5]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	7998      	ldrb	r0, [r3, #6]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	79db      	ldrb	r3, [r3, #7]
 80012be:	9300      	str	r3, [sp, #0]
 80012c0:	4603      	mov	r3, r0
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f000 f804 	bl	80012d0 <SX1278_config>
			module->LoRa_BW);
}
 80012c8:	bf00      	nop
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <SX1278_config>:

void SX1278_config(SX1278_t * module, uint8_t frequency, uint8_t power,
		uint8_t LoRa_Rate, uint8_t LoRa_BW) {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	4608      	mov	r0, r1
 80012da:	4611      	mov	r1, r2
 80012dc:	461a      	mov	r2, r3
 80012de:	4603      	mov	r3, r0
 80012e0:	70fb      	strb	r3, [r7, #3]
 80012e2:	460b      	mov	r3, r1
 80012e4:	70bb      	strb	r3, [r7, #2]
 80012e6:	4613      	mov	r3, r2
 80012e8:	707b      	strb	r3, [r7, #1]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f000 f8aa 	bl	8001444 <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 80012f0:	200f      	movs	r0, #15
 80012f2:	f7ff ff33 	bl	800115c <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f000 f8b4 	bl	8001464 <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	SX1278_SPIBurstWrite(module, LR_RegFrMsb,
			(uint8_t*) SX1278_Frequency[frequency], 3); //setting  frequency parameter
 80012fc:	78fa      	ldrb	r2, [r7, #3]
 80012fe:	4613      	mov	r3, r2
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	4413      	add	r3, r2
 8001304:	4a43      	ldr	r2, [pc, #268]	; (8001414 <SX1278_config+0x144>)
 8001306:	441a      	add	r2, r3
	SX1278_SPIBurstWrite(module, LR_RegFrMsb,
 8001308:	2303      	movs	r3, #3
 800130a:	2106      	movs	r1, #6
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f7ff ff8f 	bl	8001230 <SX1278_SPIBurstWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[power]); //Setting output power parameter
 8001312:	78bb      	ldrb	r3, [r7, #2]
 8001314:	4a40      	ldr	r2, [pc, #256]	; (8001418 <SX1278_config+0x148>)
 8001316:	5cd3      	ldrb	r3, [r2, r3]
 8001318:	461a      	mov	r2, r3
 800131a:	2109      	movs	r1, #9
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f7ff ff5e 	bl	80011de <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 8001322:	220b      	movs	r2, #11
 8001324:	210b      	movs	r1, #11
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f7ff ff59 	bl	80011de <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 800132c:	2223      	movs	r2, #35	; 0x23
 800132e:	210c      	movs	r1, #12
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f7ff ff54 	bl	80011de <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[LoRa_Rate] == 6) {	//SFactor=6
 8001336:	787b      	ldrb	r3, [r7, #1]
 8001338:	4a38      	ldr	r2, [pc, #224]	; (800141c <SX1278_config+0x14c>)
 800133a:	5cd3      	ldrb	r3, [r2, r3]
 800133c:	2b06      	cmp	r3, #6
 800133e:	d131      	bne.n	80013a4 <SX1278_config+0xd4>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[LoRa_BW] << 4) + (SX1278_CR << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8001340:	7e3b      	ldrb	r3, [r7, #24]
 8001342:	4a37      	ldr	r2, [pc, #220]	; (8001420 <SX1278_config+0x150>)
 8001344:	5cd3      	ldrb	r3, [r2, r3]
 8001346:	011b      	lsls	r3, r3, #4
 8001348:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800134a:	3303      	adds	r3, #3
 800134c:	b2db      	uxtb	r3, r3
 800134e:	461a      	mov	r2, r3
 8001350:	211d      	movs	r1, #29
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f7ff ff43 	bl	80011de <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[LoRa_Rate] << 4) + (SX1278_CRC << 2)
 8001358:	787b      	ldrb	r3, [r7, #1]
 800135a:	4a30      	ldr	r2, [pc, #192]	; (800141c <SX1278_config+0x14c>)
 800135c:	5cd3      	ldrb	r3, [r2, r3]
 800135e:	011b      	lsls	r3, r3, #4
 8001360:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8001362:	3307      	adds	r3, #7
 8001364:	b2db      	uxtb	r3, r3
 8001366:	461a      	mov	r2, r3
 8001368:	211e      	movs	r1, #30
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f7ff ff37 	bl	80011de <SX1278_SPIWrite>
						+ 0x03));

		tmp = SX1278_SPIRead(module, 0x31);
 8001370:	2131      	movs	r1, #49	; 0x31
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7ff ff14 	bl	80011a0 <SX1278_SPIRead>
 8001378:	4603      	mov	r3, r0
 800137a:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 800137c:	7bfb      	ldrb	r3, [r7, #15]
 800137e:	f023 0307 	bic.w	r3, r3, #7
 8001382:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 8001384:	7bfb      	ldrb	r3, [r7, #15]
 8001386:	f043 0305 	orr.w	r3, r3, #5
 800138a:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 800138c:	7bfb      	ldrb	r3, [r7, #15]
 800138e:	461a      	mov	r2, r3
 8001390:	2131      	movs	r1, #49	; 0x31
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f7ff ff23 	bl	80011de <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 8001398:	220c      	movs	r2, #12
 800139a:	2137      	movs	r1, #55	; 0x37
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f7ff ff1e 	bl	80011de <SX1278_SPIWrite>
 80013a2:	e017      	b.n	80013d4 <SX1278_config+0x104>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[LoRa_BW] << 4) + (SX1278_CR << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 80013a4:	7e3b      	ldrb	r3, [r7, #24]
 80013a6:	4a1e      	ldr	r2, [pc, #120]	; (8001420 <SX1278_config+0x150>)
 80013a8:	5cd3      	ldrb	r3, [r2, r3]
 80013aa:	011b      	lsls	r3, r3, #4
 80013ac:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80013ae:	3302      	adds	r3, #2
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	461a      	mov	r2, r3
 80013b4:	211d      	movs	r1, #29
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f7ff ff11 	bl	80011de <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[LoRa_Rate] << 4) + (SX1278_CRC << 2)
 80013bc:	787b      	ldrb	r3, [r7, #1]
 80013be:	4a17      	ldr	r2, [pc, #92]	; (800141c <SX1278_config+0x14c>)
 80013c0:	5cd3      	ldrb	r3, [r2, r3]
 80013c2:	011b      	lsls	r3, r3, #4
 80013c4:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80013c6:	3307      	adds	r3, #7
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	461a      	mov	r2, r3
 80013cc:	211e      	movs	r1, #30
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f7ff ff05 	bl	80011de <SX1278_SPIWrite>
						+ 0x03)); //SFactor &  LNA gain set by the internal AGC loop
	}

	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0xFF); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 80013d4:	22ff      	movs	r2, #255	; 0xff
 80013d6:	211f      	movs	r1, #31
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f7ff ff00 	bl	80011de <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 80013de:	2200      	movs	r2, #0
 80013e0:	2120      	movs	r1, #32
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff fefb 	bl	80011de <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 12); //RegPreambleLsb 8+4=12byte Preamble
 80013e8:	220c      	movs	r2, #12
 80013ea:	2121      	movs	r1, #33	; 0x21
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f7ff fef6 	bl	80011de <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 80013f2:	2201      	movs	r2, #1
 80013f4:	2141      	movs	r1, #65	; 0x41
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f7ff fef1 	bl	80011de <SX1278_SPIWrite>
	module->readBytes = 0;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2200      	movs	r2, #0
 8001400:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
	SX1278_standby(module); //Entry standby mode
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f000 f80d 	bl	8001424 <SX1278_standby>
}
 800140a:	bf00      	nop
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	080095a0 	.word	0x080095a0
 8001418:	080095a4 	.word	0x080095a4
 800141c:	080095a8 	.word	0x080095a8
 8001420:	080095b0 	.word	0x080095b0

08001424 <SX1278_standby>:

void SX1278_standby(SX1278_t * module) {
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 800142c:	2209      	movs	r2, #9
 800142e:	2101      	movs	r1, #1
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f7ff fed4 	bl	80011de <SX1278_SPIWrite>
	module->status = STANDBY;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2201      	movs	r2, #1
 800143a:	725a      	strb	r2, [r3, #9]
}
 800143c:	bf00      	nop
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <SX1278_sleep>:

void SX1278_sleep(SX1278_t * module) {
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 800144c:	2208      	movs	r2, #8
 800144e:	2101      	movs	r1, #1
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f7ff fec4 	bl	80011de <SX1278_SPIWrite>
	module->status = SLEEP;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2200      	movs	r2, #0
 800145a:	725a      	strb	r2, [r3, #9]
}
 800145c:	bf00      	nop
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}

08001464 <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t * module) {
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 800146c:	2288      	movs	r2, #136	; 0x88
 800146e:	2101      	movs	r1, #1
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f7ff feb4 	bl	80011de <SX1278_SPIWrite>
}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t * module) {
 800147e:	b580      	push	{r7, lr}
 8001480:	b082      	sub	sp, #8
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 8001486:	22ff      	movs	r2, #255	; 0xff
 8001488:	2112      	movs	r1, #18
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f7ff fea7 	bl	80011de <SX1278_SPIWrite>
}
 8001490:	bf00      	nop
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}

08001498 <SX1278_LoRaEntryTx>:

int SX1278_LoRaEntryTx(SX1278_t * module, uint8_t length, uint32_t timeout) {
 8001498:	b580      	push	{r7, lr}
 800149a:	b086      	sub	sp, #24
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	460b      	mov	r3, r1
 80014a2:	607a      	str	r2, [r7, #4]
 80014a4:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;
	uint8_t temp;

	module->packetLength = length;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	7afa      	ldrb	r2, [r7, #11]
 80014aa:	721a      	strb	r2, [r3, #8]

	SX1278_defaultConfig(module); //setting base parameter
 80014ac:	68f8      	ldr	r0, [r7, #12]
 80014ae:	f7ff fefa 	bl	80012a6 <SX1278_defaultConfig>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 80014b2:	2287      	movs	r2, #135	; 0x87
 80014b4:	214d      	movs	r1, #77	; 0x4d
 80014b6:	68f8      	ldr	r0, [r7, #12]
 80014b8:	f7ff fe91 	bl	80011de <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 80014bc:	2200      	movs	r2, #0
 80014be:	2124      	movs	r1, #36	; 0x24
 80014c0:	68f8      	ldr	r0, [r7, #12]
 80014c2:	f7ff fe8c 	bl	80011de <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 80014c6:	2241      	movs	r2, #65	; 0x41
 80014c8:	2140      	movs	r1, #64	; 0x40
 80014ca:	68f8      	ldr	r0, [r7, #12]
 80014cc:	f7ff fe87 	bl	80011de <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 80014d0:	68f8      	ldr	r0, [r7, #12]
 80014d2:	f7ff ffd4 	bl	800147e <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0xF7); //Open TxDone interrupt
 80014d6:	22f7      	movs	r2, #247	; 0xf7
 80014d8:	2111      	movs	r1, #17
 80014da:	68f8      	ldr	r0, [r7, #12]
 80014dc:	f7ff fe7f 	bl	80011de <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length); //RegPayloadLength 21byte
 80014e0:	7afb      	ldrb	r3, [r7, #11]
 80014e2:	461a      	mov	r2, r3
 80014e4:	2122      	movs	r1, #34	; 0x22
 80014e6:	68f8      	ldr	r0, [r7, #12]
 80014e8:	f7ff fe79 	bl	80011de <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 80014ec:	210e      	movs	r1, #14
 80014ee:	68f8      	ldr	r0, [r7, #12]
 80014f0:	f7ff fe56 	bl	80011a0 <SX1278_SPIRead>
 80014f4:	4603      	mov	r3, r0
 80014f6:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 80014f8:	7dfb      	ldrb	r3, [r7, #23]
 80014fa:	461a      	mov	r2, r3
 80014fc:	210d      	movs	r1, #13
 80014fe:	68f8      	ldr	r0, [r7, #12]
 8001500:	f7ff fe6d 	bl	80011de <SX1278_SPIWrite>

	while (1) {
		temp = SX1278_SPIRead(module, LR_RegPayloadLength);
 8001504:	2122      	movs	r1, #34	; 0x22
 8001506:	68f8      	ldr	r0, [r7, #12]
 8001508:	f7ff fe4a 	bl	80011a0 <SX1278_SPIRead>
 800150c:	4603      	mov	r3, r0
 800150e:	75bb      	strb	r3, [r7, #22]
		if (temp == length) {
 8001510:	7dba      	ldrb	r2, [r7, #22]
 8001512:	7afb      	ldrb	r3, [r7, #11]
 8001514:	429a      	cmp	r2, r3
 8001516:	d104      	bne.n	8001522 <SX1278_LoRaEntryTx+0x8a>
			module->status = TX;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2202      	movs	r2, #2
 800151c:	725a      	strb	r2, [r3, #9]
			return 1;
 800151e:	2301      	movs	r3, #1
 8001520:	e00e      	b.n	8001540 <SX1278_LoRaEntryTx+0xa8>
		}

		if (--timeout == 0) {
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	3b01      	subs	r3, #1
 8001526:	607b      	str	r3, [r7, #4]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d1ea      	bne.n	8001504 <SX1278_LoRaEntryTx+0x6c>
			SX1278_hw_Reset(module->hw);
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff fda8 	bl	8001088 <SX1278_hw_Reset>
			SX1278_defaultConfig(module);
 8001538:	68f8      	ldr	r0, [r7, #12]
 800153a:	f7ff feb4 	bl	80012a6 <SX1278_defaultConfig>
			return 0;
 800153e:	2300      	movs	r3, #0
		}
	}
}
 8001540:	4618      	mov	r0, r3
 8001542:	3718      	adds	r7, #24
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <SX1278_LoRaTxPacket>:

int SX1278_LoRaTxPacket(SX1278_t * module, uint8_t* txBuffer, uint8_t length,
		uint32_t timeout) {
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	60b9      	str	r1, [r7, #8]
 8001552:	603b      	str	r3, [r7, #0]
 8001554:	4613      	mov	r3, r2
 8001556:	71fb      	strb	r3, [r7, #7]
	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 8001558:	79fb      	ldrb	r3, [r7, #7]
 800155a:	68ba      	ldr	r2, [r7, #8]
 800155c:	2100      	movs	r1, #0
 800155e:	68f8      	ldr	r0, [r7, #12]
 8001560:	f7ff fe66 	bl	8001230 <SX1278_SPIBurstWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode
 8001564:	228b      	movs	r2, #139	; 0x8b
 8001566:	2101      	movs	r1, #1
 8001568:	68f8      	ldr	r0, [r7, #12]
 800156a:	f7ff fe38 	bl	80011de <SX1278_SPIWrite>
	while (1) {
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff fdfd 	bl	8001172 <SX1278_hw_GetDIO0>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d00b      	beq.n	8001596 <SX1278_LoRaTxPacket+0x4e>
			SX1278_SPIRead(module, LR_RegIrqFlags);
 800157e:	2112      	movs	r1, #18
 8001580:	68f8      	ldr	r0, [r7, #12]
 8001582:	f7ff fe0d 	bl	80011a0 <SX1278_SPIRead>
			SX1278_clearLoRaIrq(module); //Clear irq
 8001586:	68f8      	ldr	r0, [r7, #12]
 8001588:	f7ff ff79 	bl	800147e <SX1278_clearLoRaIrq>
			SX1278_standby(module); //Entry Standby mode
 800158c:	68f8      	ldr	r0, [r7, #12]
 800158e:	f7ff ff49 	bl	8001424 <SX1278_standby>
			return 1;
 8001592:	2301      	movs	r3, #1
 8001594:	e013      	b.n	80015be <SX1278_LoRaTxPacket+0x76>
		}

		if (--timeout == 0) {
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	3b01      	subs	r3, #1
 800159a:	603b      	str	r3, [r7, #0]
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d109      	bne.n	80015b6 <SX1278_LoRaTxPacket+0x6e>
			SX1278_hw_Reset(module->hw);
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff fd6e 	bl	8001088 <SX1278_hw_Reset>
			SX1278_defaultConfig(module);
 80015ac:	68f8      	ldr	r0, [r7, #12]
 80015ae:	f7ff fe7a 	bl	80012a6 <SX1278_defaultConfig>
			return 0;
 80015b2:	2300      	movs	r3, #0
 80015b4:	e003      	b.n	80015be <SX1278_LoRaTxPacket+0x76>
		}
		SX1278_hw_DelayMs(1);
 80015b6:	2001      	movs	r0, #1
 80015b8:	f7ff fdd0 	bl	800115c <SX1278_hw_DelayMs>
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 80015bc:	e7d7      	b.n	800156e <SX1278_LoRaTxPacket+0x26>
	}
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3710      	adds	r7, #16
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <SX1278_begin>:

void SX1278_begin(SX1278_t * module, uint8_t frequency, uint8_t power,
		uint8_t LoRa_Rate, uint8_t LoRa_BW, uint8_t packetLength) {
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b082      	sub	sp, #8
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
 80015ce:	4608      	mov	r0, r1
 80015d0:	4611      	mov	r1, r2
 80015d2:	461a      	mov	r2, r3
 80015d4:	4603      	mov	r3, r0
 80015d6:	70fb      	strb	r3, [r7, #3]
 80015d8:	460b      	mov	r3, r1
 80015da:	70bb      	strb	r3, [r7, #2]
 80015dc:	4613      	mov	r3, r2
 80015de:	707b      	strb	r3, [r7, #1]
	SX1278_hw_init(module->hw);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff fd23 	bl	8001030 <SX1278_hw_init>
	module->frequency = frequency;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	78fa      	ldrb	r2, [r7, #3]
 80015ee:	711a      	strb	r2, [r3, #4]
	module->power = power;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	78ba      	ldrb	r2, [r7, #2]
 80015f4:	715a      	strb	r2, [r3, #5]
	module->LoRa_Rate = LoRa_Rate;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	787a      	ldrb	r2, [r7, #1]
 80015fa:	719a      	strb	r2, [r3, #6]
	module->LoRa_BW = LoRa_BW;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	7c3a      	ldrb	r2, [r7, #16]
 8001600:	71da      	strb	r2, [r3, #7]
	module->packetLength = packetLength;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	7d3a      	ldrb	r2, [r7, #20]
 8001606:	721a      	strb	r2, [r3, #8]
	SX1278_defaultConfig(module);
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f7ff fe4c 	bl	80012a6 <SX1278_defaultConfig>
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
	...

08001618 <bmpRead8>:
int16_t ac1, ac2, ac3, b1, b2, mb, mc, md;
uint16_t ac4, ac5, ac6;

// I2C handling functions
uint8_t bmpRead8(uint8_t a)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af02      	add	r7, sp, #8
 800161e:	4603      	mov	r3, r0
 8001620:	71fb      	strb	r3, [r7, #7]
  uint8_t r;
  HAL_I2C_Master_Transmit(bmpPort, BMP085_ADDR, &a, 1, HAL_MAX_DELAY);
 8001622:	4b0e      	ldr	r3, [pc, #56]	; (800165c <bmpRead8+0x44>)
 8001624:	6818      	ldr	r0, [r3, #0]
 8001626:	23ee      	movs	r3, #238	; 0xee
 8001628:	b299      	uxth	r1, r3
 800162a:	1dfa      	adds	r2, r7, #7
 800162c:	f04f 33ff 	mov.w	r3, #4294967295
 8001630:	9300      	str	r3, [sp, #0]
 8001632:	2301      	movs	r3, #1
 8001634:	f002 fac2 	bl	8003bbc <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(bmpPort, BMP085_ADDR, &r, 1, HAL_MAX_DELAY);
 8001638:	4b08      	ldr	r3, [pc, #32]	; (800165c <bmpRead8+0x44>)
 800163a:	6818      	ldr	r0, [r3, #0]
 800163c:	23ee      	movs	r3, #238	; 0xee
 800163e:	b299      	uxth	r1, r3
 8001640:	f107 020f 	add.w	r2, r7, #15
 8001644:	f04f 33ff 	mov.w	r3, #4294967295
 8001648:	9300      	str	r3, [sp, #0]
 800164a:	2301      	movs	r3, #1
 800164c:	f002 fbb4 	bl	8003db8 <HAL_I2C_Master_Receive>
  return r;
 8001650:	7bfb      	ldrb	r3, [r7, #15]
}
 8001652:	4618      	mov	r0, r3
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	200001fc 	.word	0x200001fc

08001660 <bmpRead16>:

uint16_t bmpRead16(uint8_t a)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af02      	add	r7, sp, #8
 8001666:	4603      	mov	r3, r0
 8001668:	71fb      	strb	r3, [r7, #7]
  uint8_t retbuf[2];
  uint16_t r;
  HAL_I2C_Master_Transmit(bmpPort, BMP085_ADDR, &a, 1, HAL_MAX_DELAY);
 800166a:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <bmpRead16+0x54>)
 800166c:	6818      	ldr	r0, [r3, #0]
 800166e:	23ee      	movs	r3, #238	; 0xee
 8001670:	b299      	uxth	r1, r3
 8001672:	1dfa      	adds	r2, r7, #7
 8001674:	f04f 33ff 	mov.w	r3, #4294967295
 8001678:	9300      	str	r3, [sp, #0]
 800167a:	2301      	movs	r3, #1
 800167c:	f002 fa9e 	bl	8003bbc <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(bmpPort, BMP085_ADDR, retbuf, 2, HAL_MAX_DELAY);
 8001680:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <bmpRead16+0x54>)
 8001682:	6818      	ldr	r0, [r3, #0]
 8001684:	23ee      	movs	r3, #238	; 0xee
 8001686:	b299      	uxth	r1, r3
 8001688:	f107 020c 	add.w	r2, r7, #12
 800168c:	f04f 33ff 	mov.w	r3, #4294967295
 8001690:	9300      	str	r3, [sp, #0]
 8001692:	2302      	movs	r3, #2
 8001694:	f002 fb90 	bl	8003db8 <HAL_I2C_Master_Receive>
  r = retbuf[1] | (retbuf[0] << 8);
 8001698:	7b7b      	ldrb	r3, [r7, #13]
 800169a:	b21a      	sxth	r2, r3
 800169c:	7b3b      	ldrb	r3, [r7, #12]
 800169e:	021b      	lsls	r3, r3, #8
 80016a0:	b21b      	sxth	r3, r3
 80016a2:	4313      	orrs	r3, r2
 80016a4:	b21b      	sxth	r3, r3
 80016a6:	81fb      	strh	r3, [r7, #14]
  return r;
 80016a8:	89fb      	ldrh	r3, [r7, #14]
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	200001fc 	.word	0x200001fc

080016b8 <bmpWrite8>:

void bmpWrite8(uint8_t a, uint8_t d)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af02      	add	r7, sp, #8
 80016be:	4603      	mov	r3, r0
 80016c0:	460a      	mov	r2, r1
 80016c2:	71fb      	strb	r3, [r7, #7]
 80016c4:	4613      	mov	r3, r2
 80016c6:	71bb      	strb	r3, [r7, #6]
  uint8_t tBuf[2];
  tBuf[0] = a;
 80016c8:	79fb      	ldrb	r3, [r7, #7]
 80016ca:	733b      	strb	r3, [r7, #12]
  tBuf[1] = d;
 80016cc:	79bb      	ldrb	r3, [r7, #6]
 80016ce:	737b      	strb	r3, [r7, #13]
  HAL_I2C_Master_Transmit(bmpPort, BMP085_ADDR, tBuf, 2, HAL_MAX_DELAY);
 80016d0:	4b07      	ldr	r3, [pc, #28]	; (80016f0 <bmpWrite8+0x38>)
 80016d2:	6818      	ldr	r0, [r3, #0]
 80016d4:	23ee      	movs	r3, #238	; 0xee
 80016d6:	b299      	uxth	r1, r3
 80016d8:	f107 020c 	add.w	r2, r7, #12
 80016dc:	f04f 33ff 	mov.w	r3, #4294967295
 80016e0:	9300      	str	r3, [sp, #0]
 80016e2:	2302      	movs	r3, #2
 80016e4:	f002 fa6a 	bl	8003bbc <HAL_I2C_Master_Transmit>
}
 80016e8:	bf00      	nop
 80016ea:	3710      	adds	r7, #16
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	200001fc 	.word	0x200001fc

080016f4 <bmpBegin>:

uint8_t bmpBegin(uint8_t mode, I2C_HandleTypeDef *i2cdev)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	6039      	str	r1, [r7, #0]
 80016fe:	71fb      	strb	r3, [r7, #7]

  bmpPort = i2cdev;
 8001700:	4a2e      	ldr	r2, [pc, #184]	; (80017bc <bmpBegin+0xc8>)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	6013      	str	r3, [r2, #0]

  if (bmpRead8(0xD0) != 0x55)
 8001706:	20d0      	movs	r0, #208	; 0xd0
 8001708:	f7ff ff86 	bl	8001618 <bmpRead8>
 800170c:	4603      	mov	r3, r0
 800170e:	2b55      	cmp	r3, #85	; 0x55
 8001710:	d001      	beq.n	8001716 <bmpBegin+0x22>
    return 0;
 8001712:	2300      	movs	r3, #0
 8001714:	e04d      	b.n	80017b2 <bmpBegin+0xbe>

  /* read calibration data */
  ac1 = bmpRead16(BMP085_CAL_AC1);
 8001716:	20aa      	movs	r0, #170	; 0xaa
 8001718:	f7ff ffa2 	bl	8001660 <bmpRead16>
 800171c:	4603      	mov	r3, r0
 800171e:	b21a      	sxth	r2, r3
 8001720:	4b27      	ldr	r3, [pc, #156]	; (80017c0 <bmpBegin+0xcc>)
 8001722:	801a      	strh	r2, [r3, #0]
  ac2 = bmpRead16(BMP085_CAL_AC2);
 8001724:	20ac      	movs	r0, #172	; 0xac
 8001726:	f7ff ff9b 	bl	8001660 <bmpRead16>
 800172a:	4603      	mov	r3, r0
 800172c:	b21a      	sxth	r2, r3
 800172e:	4b25      	ldr	r3, [pc, #148]	; (80017c4 <bmpBegin+0xd0>)
 8001730:	801a      	strh	r2, [r3, #0]
  ac3 = bmpRead16(BMP085_CAL_AC3);
 8001732:	20ae      	movs	r0, #174	; 0xae
 8001734:	f7ff ff94 	bl	8001660 <bmpRead16>
 8001738:	4603      	mov	r3, r0
 800173a:	b21a      	sxth	r2, r3
 800173c:	4b22      	ldr	r3, [pc, #136]	; (80017c8 <bmpBegin+0xd4>)
 800173e:	801a      	strh	r2, [r3, #0]
  ac4 = bmpRead16(BMP085_CAL_AC4);
 8001740:	20b0      	movs	r0, #176	; 0xb0
 8001742:	f7ff ff8d 	bl	8001660 <bmpRead16>
 8001746:	4603      	mov	r3, r0
 8001748:	461a      	mov	r2, r3
 800174a:	4b20      	ldr	r3, [pc, #128]	; (80017cc <bmpBegin+0xd8>)
 800174c:	801a      	strh	r2, [r3, #0]
  ac5 = bmpRead16(BMP085_CAL_AC5);
 800174e:	20b2      	movs	r0, #178	; 0xb2
 8001750:	f7ff ff86 	bl	8001660 <bmpRead16>
 8001754:	4603      	mov	r3, r0
 8001756:	461a      	mov	r2, r3
 8001758:	4b1d      	ldr	r3, [pc, #116]	; (80017d0 <bmpBegin+0xdc>)
 800175a:	801a      	strh	r2, [r3, #0]
  ac6 = bmpRead16(BMP085_CAL_AC6);
 800175c:	20b4      	movs	r0, #180	; 0xb4
 800175e:	f7ff ff7f 	bl	8001660 <bmpRead16>
 8001762:	4603      	mov	r3, r0
 8001764:	461a      	mov	r2, r3
 8001766:	4b1b      	ldr	r3, [pc, #108]	; (80017d4 <bmpBegin+0xe0>)
 8001768:	801a      	strh	r2, [r3, #0]

  b1 = bmpRead16(BMP085_CAL_B1);
 800176a:	20b6      	movs	r0, #182	; 0xb6
 800176c:	f7ff ff78 	bl	8001660 <bmpRead16>
 8001770:	4603      	mov	r3, r0
 8001772:	b21a      	sxth	r2, r3
 8001774:	4b18      	ldr	r3, [pc, #96]	; (80017d8 <bmpBegin+0xe4>)
 8001776:	801a      	strh	r2, [r3, #0]
  b2 = bmpRead16(BMP085_CAL_B2);
 8001778:	20b8      	movs	r0, #184	; 0xb8
 800177a:	f7ff ff71 	bl	8001660 <bmpRead16>
 800177e:	4603      	mov	r3, r0
 8001780:	b21a      	sxth	r2, r3
 8001782:	4b16      	ldr	r3, [pc, #88]	; (80017dc <bmpBegin+0xe8>)
 8001784:	801a      	strh	r2, [r3, #0]

  mb = bmpRead16(BMP085_CAL_MB);
 8001786:	20ba      	movs	r0, #186	; 0xba
 8001788:	f7ff ff6a 	bl	8001660 <bmpRead16>
 800178c:	4603      	mov	r3, r0
 800178e:	b21a      	sxth	r2, r3
 8001790:	4b13      	ldr	r3, [pc, #76]	; (80017e0 <bmpBegin+0xec>)
 8001792:	801a      	strh	r2, [r3, #0]
  mc = bmpRead16(BMP085_CAL_MC);
 8001794:	20bc      	movs	r0, #188	; 0xbc
 8001796:	f7ff ff63 	bl	8001660 <bmpRead16>
 800179a:	4603      	mov	r3, r0
 800179c:	b21a      	sxth	r2, r3
 800179e:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <bmpBegin+0xf0>)
 80017a0:	801a      	strh	r2, [r3, #0]
  md = bmpRead16(BMP085_CAL_MD);
 80017a2:	20be      	movs	r0, #190	; 0xbe
 80017a4:	f7ff ff5c 	bl	8001660 <bmpRead16>
 80017a8:	4603      	mov	r3, r0
 80017aa:	b21a      	sxth	r2, r3
 80017ac:	4b0e      	ldr	r3, [pc, #56]	; (80017e8 <bmpBegin+0xf4>)
 80017ae:	801a      	strh	r2, [r3, #0]

  return 1;
 80017b0:	2301      	movs	r3, #1
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	200001fc 	.word	0x200001fc
 80017c0:	20000202 	.word	0x20000202
 80017c4:	20000204 	.word	0x20000204
 80017c8:	20000206 	.word	0x20000206
 80017cc:	20000212 	.word	0x20000212
 80017d0:	20000214 	.word	0x20000214
 80017d4:	20000216 	.word	0x20000216
 80017d8:	20000208 	.word	0x20000208
 80017dc:	2000020a 	.word	0x2000020a
 80017e0:	2000020c 	.word	0x2000020c
 80017e4:	2000020e 	.word	0x2000020e
 80017e8:	20000210 	.word	0x20000210

080017ec <computeB5>:

// Sensor read functions
int32_t computeB5(int32_t UT)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  int32_t X1 = (UT - (int32_t)ac6) * ((int32_t)ac5) >> 15;
 80017f4:	4b0f      	ldr	r3, [pc, #60]	; (8001834 <computeB5+0x48>)
 80017f6:	881b      	ldrh	r3, [r3, #0]
 80017f8:	461a      	mov	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	1a9b      	subs	r3, r3, r2
 80017fe:	4a0e      	ldr	r2, [pc, #56]	; (8001838 <computeB5+0x4c>)
 8001800:	8812      	ldrh	r2, [r2, #0]
 8001802:	fb02 f303 	mul.w	r3, r2, r3
 8001806:	13db      	asrs	r3, r3, #15
 8001808:	60fb      	str	r3, [r7, #12]
  int32_t X2 = ((int32_t)mc << 11) / (X1 + (int32_t)md);
 800180a:	4b0c      	ldr	r3, [pc, #48]	; (800183c <computeB5+0x50>)
 800180c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001810:	02da      	lsls	r2, r3, #11
 8001812:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <computeB5+0x54>)
 8001814:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001818:	4619      	mov	r1, r3
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	440b      	add	r3, r1
 800181e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001822:	60bb      	str	r3, [r7, #8]
  return X1 + X2;
 8001824:	68fa      	ldr	r2, [r7, #12]
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	4413      	add	r3, r2
}
 800182a:	4618      	mov	r0, r3
 800182c:	3714      	adds	r7, #20
 800182e:	46bd      	mov	sp, r7
 8001830:	bc80      	pop	{r7}
 8001832:	4770      	bx	lr
 8001834:	20000216 	.word	0x20000216
 8001838:	20000214 	.word	0x20000214
 800183c:	2000020e 	.word	0x2000020e
 8001840:	20000210 	.word	0x20000210

08001844 <readBMPRawTemperature>:

uint16_t readBMPRawTemperature(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  bmpWrite8(BMP085_CONTROL, BMP085_READTEMPCMD);
 8001848:	212e      	movs	r1, #46	; 0x2e
 800184a:	20f4      	movs	r0, #244	; 0xf4
 800184c:	f7ff ff34 	bl	80016b8 <bmpWrite8>
  HAL_Delay(5);
 8001850:	2005      	movs	r0, #5
 8001852:	f001 fcc1 	bl	80031d8 <HAL_Delay>
  return bmpRead16(BMP085_TEMPDATA);
 8001856:	20f6      	movs	r0, #246	; 0xf6
 8001858:	f7ff ff02 	bl	8001660 <bmpRead16>
 800185c:	4603      	mov	r3, r0
}
 800185e:	4618      	mov	r0, r3
 8001860:	bd80      	pop	{r7, pc}
	...

08001864 <readBMPRawPressure>:

uint32_t readBMPRawPressure(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
  uint32_t raw;

  bmpWrite8(BMP085_CONTROL, BMP085_READPRESSURECMD + (oversampling << 6));
 800186a:	4b17      	ldr	r3, [pc, #92]	; (80018c8 <readBMPRawPressure+0x64>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	019b      	lsls	r3, r3, #6
 8001870:	b2db      	uxtb	r3, r3
 8001872:	3334      	adds	r3, #52	; 0x34
 8001874:	b2db      	uxtb	r3, r3
 8001876:	4619      	mov	r1, r3
 8001878:	20f4      	movs	r0, #244	; 0xf4
 800187a:	f7ff ff1d 	bl	80016b8 <bmpWrite8>

  if (oversampling == BMP085_STANDARD)
 800187e:	4b12      	ldr	r3, [pc, #72]	; (80018c8 <readBMPRawPressure+0x64>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	2b01      	cmp	r3, #1
 8001884:	d102      	bne.n	800188c <readBMPRawPressure+0x28>
    HAL_Delay(8);
 8001886:	2008      	movs	r0, #8
 8001888:	f001 fca6 	bl	80031d8 <HAL_Delay>

  raw = bmpRead16(BMP085_PRESSUREDATA);
 800188c:	20f6      	movs	r0, #246	; 0xf6
 800188e:	f7ff fee7 	bl	8001660 <bmpRead16>
 8001892:	4603      	mov	r3, r0
 8001894:	607b      	str	r3, [r7, #4]

  raw <<= 8;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	021b      	lsls	r3, r3, #8
 800189a:	607b      	str	r3, [r7, #4]
  raw |= bmpRead8(BMP085_PRESSUREDATA + 2);
 800189c:	20f8      	movs	r0, #248	; 0xf8
 800189e:	f7ff febb 	bl	8001618 <bmpRead8>
 80018a2:	4603      	mov	r3, r0
 80018a4:	461a      	mov	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	607b      	str	r3, [r7, #4]
  raw >>= (8 - oversampling);
 80018ac:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <readBMPRawPressure+0x64>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	f1c3 0308 	rsb	r3, r3, #8
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	fa22 f303 	lsr.w	r3, r2, r3
 80018ba:	607b      	str	r3, [r7, #4]

  return raw;
 80018bc:	687b      	ldr	r3, [r7, #4]
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	20000200 	.word	0x20000200

080018cc <readBMPTemperature>:

float readBMPTemperature(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
  int32_t UT, B5; // following ds convention
  float temp;

  UT = readBMPRawTemperature();
 80018d2:	f7ff ffb7 	bl	8001844 <readBMPRawTemperature>
 80018d6:	4603      	mov	r3, r0
 80018d8:	60fb      	str	r3, [r7, #12]

  B5 = computeB5(UT);
 80018da:	68f8      	ldr	r0, [r7, #12]
 80018dc:	f7ff ff86 	bl	80017ec <computeB5>
 80018e0:	60b8      	str	r0, [r7, #8]
  temp = (B5 + 8) >> 4;
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	3308      	adds	r3, #8
 80018e6:	111b      	asrs	r3, r3, #4
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff f9d7 	bl	8000c9c <__aeabi_i2f>
 80018ee:	4603      	mov	r3, r0
 80018f0:	607b      	str	r3, [r7, #4]
  temp /= 10;
 80018f2:	4905      	ldr	r1, [pc, #20]	; (8001908 <readBMPTemperature+0x3c>)
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f7ff fad9 	bl	8000eac <__aeabi_fdiv>
 80018fa:	4603      	mov	r3, r0
 80018fc:	607b      	str	r3, [r7, #4]

  return temp;
 80018fe:	687b      	ldr	r3, [r7, #4]
}
 8001900:	4618      	mov	r0, r3
 8001902:	3710      	adds	r7, #16
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	41200000 	.word	0x41200000

0800190c <readBMPPressure>:

float readBMPPressure(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b08c      	sub	sp, #48	; 0x30
 8001910:	af00      	add	r7, sp, #0
  int32_t UT, UP, B3, B5, B6, X1, X2, X3, p;
  uint32_t B4, B7;

  UT = readBMPRawTemperature();
 8001912:	f7ff ff97 	bl	8001844 <readBMPRawTemperature>
 8001916:	4603      	mov	r3, r0
 8001918:	62bb      	str	r3, [r7, #40]	; 0x28
  UP = readBMPRawPressure();
 800191a:	f7ff ffa3 	bl	8001864 <readBMPRawPressure>
 800191e:	4603      	mov	r3, r0
 8001920:	627b      	str	r3, [r7, #36]	; 0x24

  B5 = computeB5(UT);
 8001922:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001924:	f7ff ff62 	bl	80017ec <computeB5>
 8001928:	6238      	str	r0, [r7, #32]

  // do pressure calcs
  B6 = B5 - 4000;
 800192a:	6a3b      	ldr	r3, [r7, #32]
 800192c:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8001930:	61fb      	str	r3, [r7, #28]
  X1 = ((int32_t)b2 * ((B6 * B6) >> 12)) >> 11;
 8001932:	4b4b      	ldr	r3, [pc, #300]	; (8001a60 <readBMPPressure+0x154>)
 8001934:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001938:	461a      	mov	r2, r3
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	fb03 f303 	mul.w	r3, r3, r3
 8001940:	131b      	asrs	r3, r3, #12
 8001942:	fb02 f303 	mul.w	r3, r2, r3
 8001946:	12db      	asrs	r3, r3, #11
 8001948:	61bb      	str	r3, [r7, #24]
  X2 = ((int32_t)ac2 * B6) >> 11;
 800194a:	4b46      	ldr	r3, [pc, #280]	; (8001a64 <readBMPPressure+0x158>)
 800194c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001950:	461a      	mov	r2, r3
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	fb02 f303 	mul.w	r3, r2, r3
 8001958:	12db      	asrs	r3, r3, #11
 800195a:	617b      	str	r3, [r7, #20]
  X3 = X1 + X2;
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	4413      	add	r3, r2
 8001962:	613b      	str	r3, [r7, #16]
  B3 = ((((int32_t)ac1 * 4 + X3) << oversampling) + 2) / 4;
 8001964:	4b40      	ldr	r3, [pc, #256]	; (8001a68 <readBMPPressure+0x15c>)
 8001966:	f9b3 3000 	ldrsh.w	r3, [r3]
 800196a:	009a      	lsls	r2, r3, #2
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	4413      	add	r3, r2
 8001970:	4a3e      	ldr	r2, [pc, #248]	; (8001a6c <readBMPPressure+0x160>)
 8001972:	7812      	ldrb	r2, [r2, #0]
 8001974:	4093      	lsls	r3, r2
 8001976:	3302      	adds	r3, #2
 8001978:	2b00      	cmp	r3, #0
 800197a:	da00      	bge.n	800197e <readBMPPressure+0x72>
 800197c:	3303      	adds	r3, #3
 800197e:	109b      	asrs	r3, r3, #2
 8001980:	60fb      	str	r3, [r7, #12]

  X1 = ((int32_t)ac3 * B6) >> 13;
 8001982:	4b3b      	ldr	r3, [pc, #236]	; (8001a70 <readBMPPressure+0x164>)
 8001984:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001988:	461a      	mov	r2, r3
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	fb02 f303 	mul.w	r3, r2, r3
 8001990:	135b      	asrs	r3, r3, #13
 8001992:	61bb      	str	r3, [r7, #24]
  X2 = ((int32_t)b1 * ((B6 * B6) >> 12)) >> 16;
 8001994:	4b37      	ldr	r3, [pc, #220]	; (8001a74 <readBMPPressure+0x168>)
 8001996:	f9b3 3000 	ldrsh.w	r3, [r3]
 800199a:	461a      	mov	r2, r3
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	fb03 f303 	mul.w	r3, r3, r3
 80019a2:	131b      	asrs	r3, r3, #12
 80019a4:	fb02 f303 	mul.w	r3, r2, r3
 80019a8:	141b      	asrs	r3, r3, #16
 80019aa:	617b      	str	r3, [r7, #20]
  X3 = ((X1 + X2) + 2) >> 2;
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	4413      	add	r3, r2
 80019b2:	3302      	adds	r3, #2
 80019b4:	109b      	asrs	r3, r3, #2
 80019b6:	613b      	str	r3, [r7, #16]
  B4 = ((uint32_t)ac4 * (uint32_t)(X3 + 32768)) >> 15;
 80019b8:	4b2f      	ldr	r3, [pc, #188]	; (8001a78 <readBMPPressure+0x16c>)
 80019ba:	881b      	ldrh	r3, [r3, #0]
 80019bc:	461a      	mov	r2, r3
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80019c4:	fb02 f303 	mul.w	r3, r2, r3
 80019c8:	0bdb      	lsrs	r3, r3, #15
 80019ca:	60bb      	str	r3, [r7, #8]
  B7 = ((uint32_t)UP - B3) * (uint32_t)(50000UL >> oversampling);
 80019cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	4a26      	ldr	r2, [pc, #152]	; (8001a6c <readBMPPressure+0x160>)
 80019d4:	7812      	ldrb	r2, [r2, #0]
 80019d6:	4611      	mov	r1, r2
 80019d8:	f24c 3250 	movw	r2, #50000	; 0xc350
 80019dc:	40ca      	lsrs	r2, r1
 80019de:	fb02 f303 	mul.w	r3, r2, r3
 80019e2:	607b      	str	r3, [r7, #4]

  if (B7 < 0x80000000)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	db06      	blt.n	80019f8 <readBMPPressure+0xec>
  {
    p = (B7 * 2) / B4;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	005a      	lsls	r2, r3, #1
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019f6:	e005      	b.n	8001a04 <readBMPPressure+0xf8>
  }
  else
  {
    p = (B7 / B4) * 2;
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  X1 = (p >> 8) * (p >> 8);
 8001a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a06:	121b      	asrs	r3, r3, #8
 8001a08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a0a:	1212      	asrs	r2, r2, #8
 8001a0c:	fb02 f303 	mul.w	r3, r2, r3
 8001a10:	61bb      	str	r3, [r7, #24]
  X1 = (X1 * 3038) >> 16;
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	f640 32de 	movw	r2, #3038	; 0xbde
 8001a18:	fb02 f303 	mul.w	r3, r2, r3
 8001a1c:	141b      	asrs	r3, r3, #16
 8001a1e:	61bb      	str	r3, [r7, #24]
  X2 = (-7357 * p) >> 16;
 8001a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a22:	4a16      	ldr	r2, [pc, #88]	; (8001a7c <readBMPPressure+0x170>)
 8001a24:	fb02 f303 	mul.w	r3, r2, r3
 8001a28:	141b      	asrs	r3, r3, #16
 8001a2a:	617b      	str	r3, [r7, #20]

  p = p + ((X1 + X2 + (int32_t)3791) >> 4); // Pa
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	4413      	add	r3, r2
 8001a32:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 8001a36:	111b      	asrs	r3, r3, #4
 8001a38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a3a:	4413      	add	r3, r2
 8001a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  p = p / 100; // hPa
 8001a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a40:	4a0f      	ldr	r2, [pc, #60]	; (8001a80 <readBMPPressure+0x174>)
 8001a42:	fb82 1203 	smull	r1, r2, r2, r3
 8001a46:	1152      	asrs	r2, r2, #5
 8001a48:	17db      	asrs	r3, r3, #31
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	62fb      	str	r3, [r7, #44]	; 0x2c

  return p;
 8001a4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001a50:	f7ff f924 	bl	8000c9c <__aeabi_i2f>
 8001a54:	4603      	mov	r3, r0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3730      	adds	r7, #48	; 0x30
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	2000020a 	.word	0x2000020a
 8001a64:	20000204 	.word	0x20000204
 8001a68:	20000202 	.word	0x20000202
 8001a6c:	20000200 	.word	0x20000200
 8001a70:	20000206 	.word	0x20000206
 8001a74:	20000208 	.word	0x20000208
 8001a78:	20000212 	.word	0x20000212
 8001a7c:	ffffe343 	.word	0xffffe343
 8001a80:	51eb851f 	.word	0x51eb851f
 8001a84:	00000000 	.word	0x00000000

08001a88 <readBMPAbsoluteAltitude>:

double readBMPAbsoluteAltitude(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
	float P;
	double Altitude, A1, A2, A3, P0;

	// P0 = readBMPSeaLevelPressure();
	P = readBMPPressure();
 8001a8e:	f7ff ff3d 	bl	800190c <readBMPPressure>
 8001a92:	60f8      	str	r0, [r7, #12]
//
//	Altitude = ( (44330.0) * (1 - A3)    );

//	Altitude = 44330.0*(1-pow(P/P0,1/5.255));

	Altitude = P / pow(1.0 - (ALTITUDE_ESK / 44330.0), 5.255);
 8001a94:	68f8      	ldr	r0, [r7, #12]
 8001a96:	f7fe fcc7 	bl	8000428 <__aeabi_f2d>
 8001a9a:	a309      	add	r3, pc, #36	; (adr r3, 8001ac0 <readBMPAbsoluteAltitude+0x38>)
 8001a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa0:	f7fe fe44 	bl	800072c <__aeabi_ddiv>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	e9c7 2300 	strd	r2, r3, [r7]

	// Altitude = 44330 * (1 - pow(( (P/P0) / BMP180_SEA_LEVEL),1/5.255));

	return Altitude;
 8001aac:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8001ab0:	4610      	mov	r0, r2
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	f3af 8000 	nop.w
 8001ac0:	84ddcb1e 	.word	0x84ddcb1e
 8001ac4:	3fed1f28 	.word	0x3fed1f28

08001ac8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b088      	sub	sp, #32
 8001acc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ace:	f107 0310 	add.w	r3, r7, #16
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	605a      	str	r2, [r3, #4]
 8001ad8:	609a      	str	r2, [r3, #8]
 8001ada:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001adc:	4b3d      	ldr	r3, [pc, #244]	; (8001bd4 <MX_GPIO_Init+0x10c>)
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	4a3c      	ldr	r2, [pc, #240]	; (8001bd4 <MX_GPIO_Init+0x10c>)
 8001ae2:	f043 0310 	orr.w	r3, r3, #16
 8001ae6:	6193      	str	r3, [r2, #24]
 8001ae8:	4b3a      	ldr	r3, [pc, #232]	; (8001bd4 <MX_GPIO_Init+0x10c>)
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	f003 0310 	and.w	r3, r3, #16
 8001af0:	60fb      	str	r3, [r7, #12]
 8001af2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001af4:	4b37      	ldr	r3, [pc, #220]	; (8001bd4 <MX_GPIO_Init+0x10c>)
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	4a36      	ldr	r2, [pc, #216]	; (8001bd4 <MX_GPIO_Init+0x10c>)
 8001afa:	f043 0320 	orr.w	r3, r3, #32
 8001afe:	6193      	str	r3, [r2, #24]
 8001b00:	4b34      	ldr	r3, [pc, #208]	; (8001bd4 <MX_GPIO_Init+0x10c>)
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	f003 0320 	and.w	r3, r3, #32
 8001b08:	60bb      	str	r3, [r7, #8]
 8001b0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0c:	4b31      	ldr	r3, [pc, #196]	; (8001bd4 <MX_GPIO_Init+0x10c>)
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	4a30      	ldr	r2, [pc, #192]	; (8001bd4 <MX_GPIO_Init+0x10c>)
 8001b12:	f043 0304 	orr.w	r3, r3, #4
 8001b16:	6193      	str	r3, [r2, #24]
 8001b18:	4b2e      	ldr	r3, [pc, #184]	; (8001bd4 <MX_GPIO_Init+0x10c>)
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	f003 0304 	and.w	r3, r3, #4
 8001b20:	607b      	str	r3, [r7, #4]
 8001b22:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b24:	4b2b      	ldr	r3, [pc, #172]	; (8001bd4 <MX_GPIO_Init+0x10c>)
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	4a2a      	ldr	r2, [pc, #168]	; (8001bd4 <MX_GPIO_Init+0x10c>)
 8001b2a:	f043 0308 	orr.w	r3, r3, #8
 8001b2e:	6193      	str	r3, [r2, #24]
 8001b30:	4b28      	ldr	r3, [pc, #160]	; (8001bd4 <MX_GPIO_Init+0x10c>)
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	f003 0308 	and.w	r3, r3, #8
 8001b38:	603b      	str	r3, [r7, #0]
 8001b3a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b42:	4825      	ldr	r0, [pc, #148]	; (8001bd8 <MX_GPIO_Init+0x110>)
 8001b44:	f001 fec5 	bl	80038d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 8001b48:	2201      	movs	r2, #1
 8001b4a:	2110      	movs	r1, #16
 8001b4c:	4823      	ldr	r0, [pc, #140]	; (8001bdc <MX_GPIO_Init+0x114>)
 8001b4e:	f001 fec0 	bl	80038d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 8001b52:	2201      	movs	r2, #1
 8001b54:	2102      	movs	r1, #2
 8001b56:	4822      	ldr	r0, [pc, #136]	; (8001be0 <MX_GPIO_Init+0x118>)
 8001b58:	f001 febb 	bl	80038d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001b5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b62:	2301      	movs	r3, #1
 8001b64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b66:	2300      	movs	r3, #0
 8001b68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b6e:	f107 0310 	add.w	r3, r7, #16
 8001b72:	4619      	mov	r1, r3
 8001b74:	4818      	ldr	r0, [pc, #96]	; (8001bd8 <MX_GPIO_Init+0x110>)
 8001b76:	f001 fd11 	bl	800359c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NSS_Pin;
 8001b7a:	2310      	movs	r3, #16
 8001b7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b82:	2300      	movs	r3, #0
 8001b84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b86:	2302      	movs	r3, #2
 8001b88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 8001b8a:	f107 0310 	add.w	r3, r7, #16
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4812      	ldr	r0, [pc, #72]	; (8001bdc <MX_GPIO_Init+0x114>)
 8001b92:	f001 fd03 	bl	800359c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8001b96:	2301      	movs	r3, #1
 8001b98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b9a:	4b12      	ldr	r3, [pc, #72]	; (8001be4 <MX_GPIO_Init+0x11c>)
 8001b9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8001ba2:	f107 0310 	add.w	r3, r7, #16
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	480d      	ldr	r0, [pc, #52]	; (8001be0 <MX_GPIO_Init+0x118>)
 8001baa:	f001 fcf7 	bl	800359c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RESET_Pin;
 8001bae:	2302      	movs	r3, #2
 8001bb0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 8001bbe:	f107 0310 	add.w	r3, r7, #16
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4806      	ldr	r0, [pc, #24]	; (8001be0 <MX_GPIO_Init+0x118>)
 8001bc6:	f001 fce9 	bl	800359c <HAL_GPIO_Init>

}
 8001bca:	bf00      	nop
 8001bcc:	3720      	adds	r7, #32
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	40011000 	.word	0x40011000
 8001bdc:	40010800 	.word	0x40010800
 8001be0:	40010c00 	.word	0x40010c00
 8001be4:	10110000 	.word	0x10110000

08001be8 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001bec:	4b12      	ldr	r3, [pc, #72]	; (8001c38 <MX_I2C1_Init+0x50>)
 8001bee:	4a13      	ldr	r2, [pc, #76]	; (8001c3c <MX_I2C1_Init+0x54>)
 8001bf0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001bf2:	4b11      	ldr	r3, [pc, #68]	; (8001c38 <MX_I2C1_Init+0x50>)
 8001bf4:	4a12      	ldr	r2, [pc, #72]	; (8001c40 <MX_I2C1_Init+0x58>)
 8001bf6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001bf8:	4b0f      	ldr	r3, [pc, #60]	; (8001c38 <MX_I2C1_Init+0x50>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001bfe:	4b0e      	ldr	r3, [pc, #56]	; (8001c38 <MX_I2C1_Init+0x50>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c04:	4b0c      	ldr	r3, [pc, #48]	; (8001c38 <MX_I2C1_Init+0x50>)
 8001c06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c0a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c0c:	4b0a      	ldr	r3, [pc, #40]	; (8001c38 <MX_I2C1_Init+0x50>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001c12:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <MX_I2C1_Init+0x50>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c18:	4b07      	ldr	r3, [pc, #28]	; (8001c38 <MX_I2C1_Init+0x50>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c1e:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <MX_I2C1_Init+0x50>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c24:	4804      	ldr	r0, [pc, #16]	; (8001c38 <MX_I2C1_Init+0x50>)
 8001c26:	f001 fe85 	bl	8003934 <HAL_I2C_Init>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001c30:	f001 f81e 	bl	8002c70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c34:	bf00      	nop
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	20000218 	.word	0x20000218
 8001c3c:	40005400 	.word	0x40005400
 8001c40:	000186a0 	.word	0x000186a0

08001c44 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001c48:	4b12      	ldr	r3, [pc, #72]	; (8001c94 <MX_I2C2_Init+0x50>)
 8001c4a:	4a13      	ldr	r2, [pc, #76]	; (8001c98 <MX_I2C2_Init+0x54>)
 8001c4c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001c4e:	4b11      	ldr	r3, [pc, #68]	; (8001c94 <MX_I2C2_Init+0x50>)
 8001c50:	4a12      	ldr	r2, [pc, #72]	; (8001c9c <MX_I2C2_Init+0x58>)
 8001c52:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c54:	4b0f      	ldr	r3, [pc, #60]	; (8001c94 <MX_I2C2_Init+0x50>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001c5a:	4b0e      	ldr	r3, [pc, #56]	; (8001c94 <MX_I2C2_Init+0x50>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c60:	4b0c      	ldr	r3, [pc, #48]	; (8001c94 <MX_I2C2_Init+0x50>)
 8001c62:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c66:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c68:	4b0a      	ldr	r3, [pc, #40]	; (8001c94 <MX_I2C2_Init+0x50>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001c6e:	4b09      	ldr	r3, [pc, #36]	; (8001c94 <MX_I2C2_Init+0x50>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c74:	4b07      	ldr	r3, [pc, #28]	; (8001c94 <MX_I2C2_Init+0x50>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c7a:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <MX_I2C2_Init+0x50>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001c80:	4804      	ldr	r0, [pc, #16]	; (8001c94 <MX_I2C2_Init+0x50>)
 8001c82:	f001 fe57 	bl	8003934 <HAL_I2C_Init>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001c8c:	f000 fff0 	bl	8002c70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001c90:	bf00      	nop
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	2000026c 	.word	0x2000026c
 8001c98:	40005800 	.word	0x40005800
 8001c9c:	00061a80 	.word	0x00061a80

08001ca0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b08a      	sub	sp, #40	; 0x28
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca8:	f107 0318 	add.w	r3, r7, #24
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	605a      	str	r2, [r3, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
 8001cb4:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a2b      	ldr	r2, [pc, #172]	; (8001d68 <HAL_I2C_MspInit+0xc8>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d124      	bne.n	8001d0a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cc0:	4b2a      	ldr	r3, [pc, #168]	; (8001d6c <HAL_I2C_MspInit+0xcc>)
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	4a29      	ldr	r2, [pc, #164]	; (8001d6c <HAL_I2C_MspInit+0xcc>)
 8001cc6:	f043 0308 	orr.w	r3, r3, #8
 8001cca:	6193      	str	r3, [r2, #24]
 8001ccc:	4b27      	ldr	r3, [pc, #156]	; (8001d6c <HAL_I2C_MspInit+0xcc>)
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	f003 0308 	and.w	r3, r3, #8
 8001cd4:	617b      	str	r3, [r7, #20]
 8001cd6:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001cd8:	23c0      	movs	r3, #192	; 0xc0
 8001cda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cdc:	2312      	movs	r3, #18
 8001cde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ce4:	f107 0318 	add.w	r3, r7, #24
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4821      	ldr	r0, [pc, #132]	; (8001d70 <HAL_I2C_MspInit+0xd0>)
 8001cec:	f001 fc56 	bl	800359c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001cf0:	4b1e      	ldr	r3, [pc, #120]	; (8001d6c <HAL_I2C_MspInit+0xcc>)
 8001cf2:	69db      	ldr	r3, [r3, #28]
 8001cf4:	4a1d      	ldr	r2, [pc, #116]	; (8001d6c <HAL_I2C_MspInit+0xcc>)
 8001cf6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001cfa:	61d3      	str	r3, [r2, #28]
 8001cfc:	4b1b      	ldr	r3, [pc, #108]	; (8001d6c <HAL_I2C_MspInit+0xcc>)
 8001cfe:	69db      	ldr	r3, [r3, #28]
 8001d00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d04:	613b      	str	r3, [r7, #16]
 8001d06:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001d08:	e029      	b.n	8001d5e <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a19      	ldr	r2, [pc, #100]	; (8001d74 <HAL_I2C_MspInit+0xd4>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d124      	bne.n	8001d5e <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d14:	4b15      	ldr	r3, [pc, #84]	; (8001d6c <HAL_I2C_MspInit+0xcc>)
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	4a14      	ldr	r2, [pc, #80]	; (8001d6c <HAL_I2C_MspInit+0xcc>)
 8001d1a:	f043 0308 	orr.w	r3, r3, #8
 8001d1e:	6193      	str	r3, [r2, #24]
 8001d20:	4b12      	ldr	r3, [pc, #72]	; (8001d6c <HAL_I2C_MspInit+0xcc>)
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	f003 0308 	and.w	r3, r3, #8
 8001d28:	60fb      	str	r3, [r7, #12]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001d2c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d32:	2312      	movs	r3, #18
 8001d34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d36:	2303      	movs	r3, #3
 8001d38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d3a:	f107 0318 	add.w	r3, r7, #24
 8001d3e:	4619      	mov	r1, r3
 8001d40:	480b      	ldr	r0, [pc, #44]	; (8001d70 <HAL_I2C_MspInit+0xd0>)
 8001d42:	f001 fc2b 	bl	800359c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d46:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <HAL_I2C_MspInit+0xcc>)
 8001d48:	69db      	ldr	r3, [r3, #28]
 8001d4a:	4a08      	ldr	r2, [pc, #32]	; (8001d6c <HAL_I2C_MspInit+0xcc>)
 8001d4c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d50:	61d3      	str	r3, [r2, #28]
 8001d52:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <HAL_I2C_MspInit+0xcc>)
 8001d54:	69db      	ldr	r3, [r3, #28]
 8001d56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d5a:	60bb      	str	r3, [r7, #8]
 8001d5c:	68bb      	ldr	r3, [r7, #8]
}
 8001d5e:	bf00      	nop
 8001d60:	3728      	adds	r7, #40	; 0x28
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40005400 	.word	0x40005400
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	40010c00 	.word	0x40010c00
 8001d74:	40005800 	.word	0x40005800

08001d78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d7e:	f001 f9c9 	bl	8003114 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d82:	f000 f88f 	bl	8001ea4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d86:	f7ff fe9f 	bl	8001ac8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001d8a:	f000 ff77 	bl	8002c7c <MX_SPI1_Init>
  MX_I2C1_Init();
 8001d8e:	f7ff ff2b 	bl	8001be8 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001d92:	f7ff ff57 	bl	8001c44 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8001d96:	f001 f91b 	bl	8002fd0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  setup_mpu_6050_registers();
 8001d9a:	f000 fd01 	bl	80027a0 <setup_mpu_6050_registers>
  read_mpu_6050_data();
 8001d9e:	f000 fa47 	bl	8002230 <read_mpu_6050_data>
  bmpBegin(BMP085_STANDARD, &hi2c2);
 8001da2:	4935      	ldr	r1, [pc, #212]	; (8001e78 <main+0x100>)
 8001da4:	2001      	movs	r0, #1
 8001da6:	f7ff fca5 	bl	80016f4 <bmpBegin>
  HAL_UART_Receive_IT(&huart2, Rx_tempData, 1);
 8001daa:	2201      	movs	r2, #1
 8001dac:	4933      	ldr	r1, [pc, #204]	; (8001e7c <main+0x104>)
 8001dae:	4834      	ldr	r0, [pc, #208]	; (8001e80 <main+0x108>)
 8001db0:	f003 fe0b 	bl	80059ca <HAL_UART_Receive_IT>

  SX1278_hw.dio0.port = DIO0_GPIO_Port;
 8001db4:	4b33      	ldr	r3, [pc, #204]	; (8001e84 <main+0x10c>)
 8001db6:	4a34      	ldr	r2, [pc, #208]	; (8001e88 <main+0x110>)
 8001db8:	60da      	str	r2, [r3, #12]
  SX1278_hw.dio0.pin = DIO0_Pin;
 8001dba:	4b32      	ldr	r3, [pc, #200]	; (8001e84 <main+0x10c>)
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	609a      	str	r2, [r3, #8]
  SX1278_hw.nss.port = NSS_GPIO_Port;
 8001dc0:	4b30      	ldr	r3, [pc, #192]	; (8001e84 <main+0x10c>)
 8001dc2:	4a32      	ldr	r2, [pc, #200]	; (8001e8c <main+0x114>)
 8001dc4:	615a      	str	r2, [r3, #20]
  SX1278_hw.nss.pin = NSS_Pin;
 8001dc6:	4b2f      	ldr	r3, [pc, #188]	; (8001e84 <main+0x10c>)
 8001dc8:	2210      	movs	r2, #16
 8001dca:	611a      	str	r2, [r3, #16]
  SX1278_hw.reset.port = RESET_GPIO_Port;
 8001dcc:	4b2d      	ldr	r3, [pc, #180]	; (8001e84 <main+0x10c>)
 8001dce:	4a2e      	ldr	r2, [pc, #184]	; (8001e88 <main+0x110>)
 8001dd0:	605a      	str	r2, [r3, #4]
  SX1278_hw.reset.pin = RESET_Pin;
 8001dd2:	4b2c      	ldr	r3, [pc, #176]	; (8001e84 <main+0x10c>)
 8001dd4:	2202      	movs	r2, #2
 8001dd6:	601a      	str	r2, [r3, #0]
  SX1278_hw.spi = &hspi1;
 8001dd8:	4b2a      	ldr	r3, [pc, #168]	; (8001e84 <main+0x10c>)
 8001dda:	4a2d      	ldr	r2, [pc, #180]	; (8001e90 <main+0x118>)
 8001ddc:	619a      	str	r2, [r3, #24]

  SX1278.hw = &SX1278_hw;
 8001dde:	4b2d      	ldr	r3, [pc, #180]	; (8001e94 <main+0x11c>)
 8001de0:	4a28      	ldr	r2, [pc, #160]	; (8001e84 <main+0x10c>)
 8001de2:	601a      	str	r2, [r3, #0]

  SX1278_begin(&SX1278, SX1278_433MHZ, SX1278_POWER_17DBM, SX1278_LORA_SF_8,
 8001de4:	230a      	movs	r3, #10
 8001de6:	9301      	str	r3, [sp, #4]
 8001de8:	2303      	movs	r3, #3
 8001dea:	9300      	str	r3, [sp, #0]
 8001dec:	2302      	movs	r3, #2
 8001dee:	2201      	movs	r2, #1
 8001df0:	2100      	movs	r1, #0
 8001df2:	4828      	ldr	r0, [pc, #160]	; (8001e94 <main+0x11c>)
 8001df4:	f7ff fbe7 	bl	80015c6 <SX1278_begin>
  				SX1278_LORA_BW_20_8KHZ, 10);

  ret = SX1278_LoRaEntryTx(&SX1278, 150, 1500);
 8001df8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001dfc:	2196      	movs	r1, #150	; 0x96
 8001dfe:	4825      	ldr	r0, [pc, #148]	; (8001e94 <main+0x11c>)
 8001e00:	f7ff fb4a 	bl	8001498 <SX1278_LoRaEntryTx>
 8001e04:	4603      	mov	r3, r0
 8001e06:	4a24      	ldr	r2, [pc, #144]	; (8001e98 <main+0x120>)
 8001e08:	6013      	str	r3, [r2, #0]
//		  	  Send_All();
//	  		  HAL_Delay(15000);
//	  	  }
//	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

	HAL_Delay(250);
 8001e0a:	20fa      	movs	r0, #250	; 0xfa
 8001e0c:	f001 f9e4 	bl	80031d8 <HAL_Delay>
	read_mpu_6050_data();
 8001e10:	f000 fa0e 	bl	8002230 <read_mpu_6050_data>
	HAL_Delay(250);
 8001e14:	20fa      	movs	r0, #250	; 0xfa
 8001e16:	f001 f9df 	bl	80031d8 <HAL_Delay>
	Send_TempPresAlt();
 8001e1a:	f000 f9a7 	bl	800216c <Send_TempPresAlt>
	HAL_Delay(1050);
 8001e1e:	f240 401a 	movw	r0, #1050	; 0x41a
 8001e22:	f001 f9d9 	bl	80031d8 <HAL_Delay>
	Send_AccAll();
 8001e26:	f000 f883 	bl	8001f30 <Send_AccAll>
	HAL_Delay(1050);
 8001e2a:	f240 401a 	movw	r0, #1050	; 0x41a
 8001e2e:	f001 f9d3 	bl	80031d8 <HAL_Delay>
	Send_Gyro();
 8001e32:	f000 f905 	bl	8002040 <Send_Gyro>
	HAL_Delay(1050);
 8001e36:	f240 401a 	movw	r0, #1050	; 0x41a
 8001e3a:	f001 f9cd 	bl	80031d8 <HAL_Delay>
	Send_PitchRollYaw();
 8001e3e:	f000 f951 	bl	80020e4 <Send_PitchRollYaw>
	HAL_Delay(1050);
 8001e42:	f240 401a 	movw	r0, #1050	; 0x41a
 8001e46:	f001 f9c7 	bl	80031d8 <HAL_Delay>
	Send_MPUTemp();
 8001e4a:	f000 f8c3 	bl	8001fd4 <Send_MPUTemp>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001e4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e52:	4812      	ldr	r0, [pc, #72]	; (8001e9c <main+0x124>)
 8001e54:	f001 fd55 	bl	8003902 <HAL_GPIO_TogglePin>
	HAL_Delay(850);
 8001e58:	f240 3052 	movw	r0, #850	; 0x352
 8001e5c:	f001 f9bc 	bl	80031d8 <HAL_Delay>

	if (flag == '$')
 8001e60:	4b0f      	ldr	r3, [pc, #60]	; (8001ea0 <main+0x128>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	2b24      	cmp	r3, #36	; 0x24
 8001e66:	d1d0      	bne.n	8001e0a <main+0x92>
	  {
		  GPS_Parse();
 8001e68:	f000 fdb8 	bl	80029dc <GPS_Parse>
		  HAL_Delay(850);
 8001e6c:	f240 3052 	movw	r0, #850	; 0x352
 8001e70:	f001 f9b2 	bl	80031d8 <HAL_Delay>
	HAL_Delay(250);
 8001e74:	e7c9      	b.n	8001e0a <main+0x92>
 8001e76:	bf00      	nop
 8001e78:	2000026c 	.word	0x2000026c
 8001e7c:	200003c0 	.word	0x200003c0
 8001e80:	2000070c 	.word	0x2000070c
 8001e84:	20000584 	.word	0x20000584
 8001e88:	40010c00 	.word	0x40010c00
 8001e8c:	40010800 	.word	0x40010800
 8001e90:	200006b0 	.word	0x200006b0
 8001e94:	200005a0 	.word	0x200005a0
 8001e98:	200002cc 	.word	0x200002cc
 8001e9c:	40011000 	.word	0x40011000
 8001ea0:	20000544 	.word	0x20000544

08001ea4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b090      	sub	sp, #64	; 0x40
 8001ea8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001eaa:	f107 0318 	add.w	r3, r7, #24
 8001eae:	2228      	movs	r2, #40	; 0x28
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f004 f9d8 	bl	8006268 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001eb8:	1d3b      	adds	r3, r7, #4
 8001eba:	2200      	movs	r2, #0
 8001ebc:	601a      	str	r2, [r3, #0]
 8001ebe:	605a      	str	r2, [r3, #4]
 8001ec0:	609a      	str	r2, [r3, #8]
 8001ec2:	60da      	str	r2, [r3, #12]
 8001ec4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001eca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ece:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ed8:	2302      	movs	r3, #2
 8001eda:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001edc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ee0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001ee2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ee8:	f107 0318 	add.w	r3, r7, #24
 8001eec:	4618      	mov	r0, r3
 8001eee:	f002 fcef 	bl	80048d0 <HAL_RCC_OscConfig>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001ef8:	f000 feba 	bl	8002c70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001efc:	230f      	movs	r3, #15
 8001efe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f00:	2302      	movs	r3, #2
 8001f02:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f04:	2300      	movs	r3, #0
 8001f06:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f12:	1d3b      	adds	r3, r7, #4
 8001f14:	2102      	movs	r1, #2
 8001f16:	4618      	mov	r0, r3
 8001f18:	f002 ff5c 	bl	8004dd4 <HAL_RCC_ClockConfig>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001f22:	f000 fea5 	bl	8002c70 <Error_Handler>
  }
}
 8001f26:	bf00      	nop
 8001f28:	3740      	adds	r7, #64	; 0x40
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
	...

08001f30 <Send_AccAll>:

/* USER CODE BEGIN 4 */
void Send_AccAll(void) {
 8001f30:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f34:	b084      	sub	sp, #16
 8001f36:	af04      	add	r7, sp, #16

	message_length = sprintf(buffer, "Ax:%.3f\r\nAy:%.3f\r\nAz:%.3f\r\n", calacc_x, calacc_y, calacc_z);
 8001f38:	4b1e      	ldr	r3, [pc, #120]	; (8001fb4 <Send_AccAll+0x84>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7fe fa73 	bl	8000428 <__aeabi_f2d>
 8001f42:	4680      	mov	r8, r0
 8001f44:	4689      	mov	r9, r1
 8001f46:	4b1c      	ldr	r3, [pc, #112]	; (8001fb8 <Send_AccAll+0x88>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7fe fa6c 	bl	8000428 <__aeabi_f2d>
 8001f50:	4604      	mov	r4, r0
 8001f52:	460d      	mov	r5, r1
 8001f54:	4b19      	ldr	r3, [pc, #100]	; (8001fbc <Send_AccAll+0x8c>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7fe fa65 	bl	8000428 <__aeabi_f2d>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	460b      	mov	r3, r1
 8001f62:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001f66:	e9cd 4500 	strd	r4, r5, [sp]
 8001f6a:	4642      	mov	r2, r8
 8001f6c:	464b      	mov	r3, r9
 8001f6e:	4914      	ldr	r1, [pc, #80]	; (8001fc0 <Send_AccAll+0x90>)
 8001f70:	4814      	ldr	r0, [pc, #80]	; (8001fc4 <Send_AccAll+0x94>)
 8001f72:	f004 fecd 	bl	8006d10 <siprintf>
 8001f76:	4603      	mov	r3, r0
 8001f78:	4a13      	ldr	r2, [pc, #76]	; (8001fc8 <Send_AccAll+0x98>)
 8001f7a:	6013      	str	r3, [r2, #0]
	ret = SX1278_LoRaEntryTx(&SX1278, message_length, 500);
 8001f7c:	4b12      	ldr	r3, [pc, #72]	; (8001fc8 <Send_AccAll+0x98>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001f86:	4619      	mov	r1, r3
 8001f88:	4810      	ldr	r0, [pc, #64]	; (8001fcc <Send_AccAll+0x9c>)
 8001f8a:	f7ff fa85 	bl	8001498 <SX1278_LoRaEntryTx>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	4a0f      	ldr	r2, [pc, #60]	; (8001fd0 <Send_AccAll+0xa0>)
 8001f92:	6013      	str	r3, [r2, #0]
	ret = SX1278_LoRaTxPacket(&SX1278, (uint8_t *) buffer, message_length, 500);
 8001f94:	4b0c      	ldr	r3, [pc, #48]	; (8001fc8 <Send_AccAll+0x98>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001f9e:	4909      	ldr	r1, [pc, #36]	; (8001fc4 <Send_AccAll+0x94>)
 8001fa0:	480a      	ldr	r0, [pc, #40]	; (8001fcc <Send_AccAll+0x9c>)
 8001fa2:	f7ff fad1 	bl	8001548 <SX1278_LoRaTxPacket>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	4a09      	ldr	r2, [pc, #36]	; (8001fd0 <Send_AccAll+0xa0>)
 8001faa:	6013      	str	r3, [r2, #0]
	return;
 8001fac:	bf00      	nop
}
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001fb4:	20000384 	.word	0x20000384
 8001fb8:	20000388 	.word	0x20000388
 8001fbc:	2000038c 	.word	0x2000038c
 8001fc0:	080094e0 	.word	0x080094e0
 8001fc4:	200002d0 	.word	0x200002d0
 8001fc8:	20000368 	.word	0x20000368
 8001fcc:	200005a0 	.word	0x200005a0
 8001fd0:	200002cc 	.word	0x200002cc

08001fd4 <Send_MPUTemp>:

void Send_MPUTemp(void) {
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0

	message_length = sprintf(buffer, "MPUTmp: %.2f\r\n\r\n", caltemperature);
 8001fd8:	4b13      	ldr	r3, [pc, #76]	; (8002028 <Send_MPUTemp+0x54>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7fe fa23 	bl	8000428 <__aeabi_f2d>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	4911      	ldr	r1, [pc, #68]	; (800202c <Send_MPUTemp+0x58>)
 8001fe8:	4811      	ldr	r0, [pc, #68]	; (8002030 <Send_MPUTemp+0x5c>)
 8001fea:	f004 fe91 	bl	8006d10 <siprintf>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	4a10      	ldr	r2, [pc, #64]	; (8002034 <Send_MPUTemp+0x60>)
 8001ff2:	6013      	str	r3, [r2, #0]
	ret = SX1278_LoRaEntryTx(&SX1278, message_length, 500);
 8001ff4:	4b0f      	ldr	r3, [pc, #60]	; (8002034 <Send_MPUTemp+0x60>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001ffe:	4619      	mov	r1, r3
 8002000:	480d      	ldr	r0, [pc, #52]	; (8002038 <Send_MPUTemp+0x64>)
 8002002:	f7ff fa49 	bl	8001498 <SX1278_LoRaEntryTx>
 8002006:	4603      	mov	r3, r0
 8002008:	4a0c      	ldr	r2, [pc, #48]	; (800203c <Send_MPUTemp+0x68>)
 800200a:	6013      	str	r3, [r2, #0]
	ret = SX1278_LoRaTxPacket(&SX1278, (uint8_t *) buffer, message_length, 500);
 800200c:	4b09      	ldr	r3, [pc, #36]	; (8002034 <Send_MPUTemp+0x60>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	b2da      	uxtb	r2, r3
 8002012:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002016:	4906      	ldr	r1, [pc, #24]	; (8002030 <Send_MPUTemp+0x5c>)
 8002018:	4807      	ldr	r0, [pc, #28]	; (8002038 <Send_MPUTemp+0x64>)
 800201a:	f7ff fa95 	bl	8001548 <SX1278_LoRaTxPacket>
 800201e:	4603      	mov	r3, r0
 8002020:	4a06      	ldr	r2, [pc, #24]	; (800203c <Send_MPUTemp+0x68>)
 8002022:	6013      	str	r3, [r2, #0]
	return;
 8002024:	bf00      	nop
}
 8002026:	bd80      	pop	{r7, pc}
 8002028:	20000394 	.word	0x20000394
 800202c:	080094fc 	.word	0x080094fc
 8002030:	200002d0 	.word	0x200002d0
 8002034:	20000368 	.word	0x20000368
 8002038:	200005a0 	.word	0x200005a0
 800203c:	200002cc 	.word	0x200002cc

08002040 <Send_Gyro>:

void Send_Gyro(void) {
 8002040:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002044:	b084      	sub	sp, #16
 8002046:	af04      	add	r7, sp, #16

	message_length = sprintf(buffer, "Gx:%.3f\r\nGy:%.3f\r\nGz:%.3f\r\n", calgyro_x, calgyro_y, calgyro_z);
 8002048:	4b1e      	ldr	r3, [pc, #120]	; (80020c4 <Send_Gyro+0x84>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4618      	mov	r0, r3
 800204e:	f7fe f9eb 	bl	8000428 <__aeabi_f2d>
 8002052:	4680      	mov	r8, r0
 8002054:	4689      	mov	r9, r1
 8002056:	4b1c      	ldr	r3, [pc, #112]	; (80020c8 <Send_Gyro+0x88>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4618      	mov	r0, r3
 800205c:	f7fe f9e4 	bl	8000428 <__aeabi_f2d>
 8002060:	4604      	mov	r4, r0
 8002062:	460d      	mov	r5, r1
 8002064:	4b19      	ldr	r3, [pc, #100]	; (80020cc <Send_Gyro+0x8c>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4618      	mov	r0, r3
 800206a:	f7fe f9dd 	bl	8000428 <__aeabi_f2d>
 800206e:	4602      	mov	r2, r0
 8002070:	460b      	mov	r3, r1
 8002072:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002076:	e9cd 4500 	strd	r4, r5, [sp]
 800207a:	4642      	mov	r2, r8
 800207c:	464b      	mov	r3, r9
 800207e:	4914      	ldr	r1, [pc, #80]	; (80020d0 <Send_Gyro+0x90>)
 8002080:	4814      	ldr	r0, [pc, #80]	; (80020d4 <Send_Gyro+0x94>)
 8002082:	f004 fe45 	bl	8006d10 <siprintf>
 8002086:	4603      	mov	r3, r0
 8002088:	4a13      	ldr	r2, [pc, #76]	; (80020d8 <Send_Gyro+0x98>)
 800208a:	6013      	str	r3, [r2, #0]
	ret = SX1278_LoRaEntryTx(&SX1278, message_length, 450);
 800208c:	4b12      	ldr	r3, [pc, #72]	; (80020d8 <Send_Gyro+0x98>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	b2db      	uxtb	r3, r3
 8002092:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8002096:	4619      	mov	r1, r3
 8002098:	4810      	ldr	r0, [pc, #64]	; (80020dc <Send_Gyro+0x9c>)
 800209a:	f7ff f9fd 	bl	8001498 <SX1278_LoRaEntryTx>
 800209e:	4603      	mov	r3, r0
 80020a0:	4a0f      	ldr	r2, [pc, #60]	; (80020e0 <Send_Gyro+0xa0>)
 80020a2:	6013      	str	r3, [r2, #0]
	ret = SX1278_LoRaTxPacket(&SX1278, (uint8_t *) buffer, message_length, 450);
 80020a4:	4b0c      	ldr	r3, [pc, #48]	; (80020d8 <Send_Gyro+0x98>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	b2da      	uxtb	r2, r3
 80020aa:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 80020ae:	4909      	ldr	r1, [pc, #36]	; (80020d4 <Send_Gyro+0x94>)
 80020b0:	480a      	ldr	r0, [pc, #40]	; (80020dc <Send_Gyro+0x9c>)
 80020b2:	f7ff fa49 	bl	8001548 <SX1278_LoRaTxPacket>
 80020b6:	4603      	mov	r3, r0
 80020b8:	4a09      	ldr	r2, [pc, #36]	; (80020e0 <Send_Gyro+0xa0>)
 80020ba:	6013      	str	r3, [r2, #0]
	return;
 80020bc:	bf00      	nop
}
 80020be:	46bd      	mov	sp, r7
 80020c0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80020c4:	20000398 	.word	0x20000398
 80020c8:	2000039c 	.word	0x2000039c
 80020cc:	200003a0 	.word	0x200003a0
 80020d0:	08009510 	.word	0x08009510
 80020d4:	200002d0 	.word	0x200002d0
 80020d8:	20000368 	.word	0x20000368
 80020dc:	200005a0 	.word	0x200005a0
 80020e0:	200002cc 	.word	0x200002cc

080020e4 <Send_PitchRollYaw>:

void Send_PitchRollYaw(void) {
 80020e4:	b5b0      	push	{r4, r5, r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af04      	add	r7, sp, #16
	message_length = sprintf(buffer, "Pi:%.3f\r\nRo:%.3f\r\nYa:%.3f\r\n", pitch, roll, yaw);
 80020ea:	4b18      	ldr	r3, [pc, #96]	; (800214c <Send_PitchRollYaw+0x68>)
 80020ec:	e9d3 4500 	ldrd	r4, r5, [r3]
 80020f0:	4b17      	ldr	r3, [pc, #92]	; (8002150 <Send_PitchRollYaw+0x6c>)
 80020f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f6:	4917      	ldr	r1, [pc, #92]	; (8002154 <Send_PitchRollYaw+0x70>)
 80020f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80020fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002100:	e9cd 2300 	strd	r2, r3, [sp]
 8002104:	4622      	mov	r2, r4
 8002106:	462b      	mov	r3, r5
 8002108:	4913      	ldr	r1, [pc, #76]	; (8002158 <Send_PitchRollYaw+0x74>)
 800210a:	4814      	ldr	r0, [pc, #80]	; (800215c <Send_PitchRollYaw+0x78>)
 800210c:	f004 fe00 	bl	8006d10 <siprintf>
 8002110:	4603      	mov	r3, r0
 8002112:	4a13      	ldr	r2, [pc, #76]	; (8002160 <Send_PitchRollYaw+0x7c>)
 8002114:	6013      	str	r3, [r2, #0]
	ret = SX1278_LoRaEntryTx(&SX1278, message_length, 550);
 8002116:	4b12      	ldr	r3, [pc, #72]	; (8002160 <Send_PitchRollYaw+0x7c>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	b2db      	uxtb	r3, r3
 800211c:	f240 2226 	movw	r2, #550	; 0x226
 8002120:	4619      	mov	r1, r3
 8002122:	4810      	ldr	r0, [pc, #64]	; (8002164 <Send_PitchRollYaw+0x80>)
 8002124:	f7ff f9b8 	bl	8001498 <SX1278_LoRaEntryTx>
 8002128:	4603      	mov	r3, r0
 800212a:	4a0f      	ldr	r2, [pc, #60]	; (8002168 <Send_PitchRollYaw+0x84>)
 800212c:	6013      	str	r3, [r2, #0]
	ret = SX1278_LoRaTxPacket(&SX1278, (uint8_t *) buffer, message_length, 550);
 800212e:	4b0c      	ldr	r3, [pc, #48]	; (8002160 <Send_PitchRollYaw+0x7c>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	b2da      	uxtb	r2, r3
 8002134:	f240 2326 	movw	r3, #550	; 0x226
 8002138:	4908      	ldr	r1, [pc, #32]	; (800215c <Send_PitchRollYaw+0x78>)
 800213a:	480a      	ldr	r0, [pc, #40]	; (8002164 <Send_PitchRollYaw+0x80>)
 800213c:	f7ff fa04 	bl	8001548 <SX1278_LoRaTxPacket>
 8002140:	4603      	mov	r3, r0
 8002142:	4a09      	ldr	r2, [pc, #36]	; (8002168 <Send_PitchRollYaw+0x84>)
 8002144:	6013      	str	r3, [r2, #0]
	return;
 8002146:	bf00      	nop
}
 8002148:	46bd      	mov	sp, r7
 800214a:	bdb0      	pop	{r4, r5, r7, pc}
 800214c:	200003a8 	.word	0x200003a8
 8002150:	200003b0 	.word	0x200003b0
 8002154:	200003b8 	.word	0x200003b8
 8002158:	0800952c 	.word	0x0800952c
 800215c:	200002d0 	.word	0x200002d0
 8002160:	20000368 	.word	0x20000368
 8002164:	200005a0 	.word	0x200005a0
 8002168:	200002cc 	.word	0x200002cc

0800216c <Send_TempPresAlt>:

void Send_TempPresAlt(void) {
 800216c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800216e:	b083      	sub	sp, #12
 8002170:	af02      	add	r7, sp, #8

	Temperature = readBMPTemperature();
 8002172:	f7ff fbab 	bl	80018cc <readBMPTemperature>
 8002176:	4603      	mov	r3, r0
 8002178:	4a25      	ldr	r2, [pc, #148]	; (8002210 <Send_TempPresAlt+0xa4>)
 800217a:	6013      	str	r3, [r2, #0]
	Pressure = readBMPPressure();
 800217c:	f7ff fbc6 	bl	800190c <readBMPPressure>
 8002180:	4603      	mov	r3, r0
 8002182:	4a24      	ldr	r2, [pc, #144]	; (8002214 <Send_TempPresAlt+0xa8>)
 8002184:	6013      	str	r3, [r2, #0]
	Altitude = readBMPAbsoluteAltitude();
 8002186:	f7ff fc7f 	bl	8001a88 <readBMPAbsoluteAltitude>
 800218a:	4602      	mov	r2, r0
 800218c:	460b      	mov	r3, r1
 800218e:	4610      	mov	r0, r2
 8002190:	4619      	mov	r1, r3
 8002192:	f7fe fc79 	bl	8000a88 <__aeabi_d2f>
 8002196:	4603      	mov	r3, r0
 8002198:	4a1f      	ldr	r2, [pc, #124]	; (8002218 <Send_TempPresAlt+0xac>)
 800219a:	6013      	str	r3, [r2, #0]

	message_length = sprintf(buffer, "Temp: %.2f\r\nPres: %d\r\nAlt: %d\r\n", Temperature, (int)Pressure, (int)Altitude);
 800219c:	4b1c      	ldr	r3, [pc, #112]	; (8002210 <Send_TempPresAlt+0xa4>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7fe f941 	bl	8000428 <__aeabi_f2d>
 80021a6:	4604      	mov	r4, r0
 80021a8:	460d      	mov	r5, r1
 80021aa:	4b1a      	ldr	r3, [pc, #104]	; (8002214 <Send_TempPresAlt+0xa8>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7fe ff18 	bl	8000fe4 <__aeabi_f2iz>
 80021b4:	4606      	mov	r6, r0
 80021b6:	4b18      	ldr	r3, [pc, #96]	; (8002218 <Send_TempPresAlt+0xac>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7fe ff12 	bl	8000fe4 <__aeabi_f2iz>
 80021c0:	4603      	mov	r3, r0
 80021c2:	9301      	str	r3, [sp, #4]
 80021c4:	9600      	str	r6, [sp, #0]
 80021c6:	4622      	mov	r2, r4
 80021c8:	462b      	mov	r3, r5
 80021ca:	4914      	ldr	r1, [pc, #80]	; (800221c <Send_TempPresAlt+0xb0>)
 80021cc:	4814      	ldr	r0, [pc, #80]	; (8002220 <Send_TempPresAlt+0xb4>)
 80021ce:	f004 fd9f 	bl	8006d10 <siprintf>
 80021d2:	4603      	mov	r3, r0
 80021d4:	4a13      	ldr	r2, [pc, #76]	; (8002224 <Send_TempPresAlt+0xb8>)
 80021d6:	6013      	str	r3, [r2, #0]
	ret = SX1278_LoRaEntryTx(&SX1278, message_length, 550);
 80021d8:	4b12      	ldr	r3, [pc, #72]	; (8002224 <Send_TempPresAlt+0xb8>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	f240 2226 	movw	r2, #550	; 0x226
 80021e2:	4619      	mov	r1, r3
 80021e4:	4810      	ldr	r0, [pc, #64]	; (8002228 <Send_TempPresAlt+0xbc>)
 80021e6:	f7ff f957 	bl	8001498 <SX1278_LoRaEntryTx>
 80021ea:	4603      	mov	r3, r0
 80021ec:	4a0f      	ldr	r2, [pc, #60]	; (800222c <Send_TempPresAlt+0xc0>)
 80021ee:	6013      	str	r3, [r2, #0]
	ret = SX1278_LoRaTxPacket(&SX1278, (uint8_t *) buffer, message_length, 550);
 80021f0:	4b0c      	ldr	r3, [pc, #48]	; (8002224 <Send_TempPresAlt+0xb8>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	b2da      	uxtb	r2, r3
 80021f6:	f240 2326 	movw	r3, #550	; 0x226
 80021fa:	4909      	ldr	r1, [pc, #36]	; (8002220 <Send_TempPresAlt+0xb4>)
 80021fc:	480a      	ldr	r0, [pc, #40]	; (8002228 <Send_TempPresAlt+0xbc>)
 80021fe:	f7ff f9a3 	bl	8001548 <SX1278_LoRaTxPacket>
 8002202:	4603      	mov	r3, r0
 8002204:	4a09      	ldr	r2, [pc, #36]	; (800222c <Send_TempPresAlt+0xc0>)
 8002206:	6013      	str	r3, [r2, #0]
	return;
 8002208:	bf00      	nop
}
 800220a:	3704      	adds	r7, #4
 800220c:	46bd      	mov	sp, r7
 800220e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002210:	200002c0 	.word	0x200002c0
 8002214:	200002c4 	.word	0x200002c4
 8002218:	200002c8 	.word	0x200002c8
 800221c:	08009548 	.word	0x08009548
 8002220:	200002d0 	.word	0x200002d0
 8002224:	20000368 	.word	0x20000368
 8002228:	200005a0 	.word	0x200005a0
 800222c:	200002cc 	.word	0x200002cc

08002230 <read_mpu_6050_data>:

void read_mpu_6050_data(void){                                         //Subroutine for reading the raw gyro and accelerometer data
 8002230:	b5b0      	push	{r4, r5, r7, lr}
 8002232:	b088      	sub	sp, #32
 8002234:	af02      	add	r7, sp, #8
uint8_t datam[20];

datam[0]=0x3B; HAL_I2C_Master_Transmit(&hi2c1 ,0xd0,datam,1,5);
 8002236:	233b      	movs	r3, #59	; 0x3b
 8002238:	713b      	strb	r3, [r7, #4]
 800223a:	1d3a      	adds	r2, r7, #4
 800223c:	2305      	movs	r3, #5
 800223e:	9300      	str	r3, [sp, #0]
 8002240:	2301      	movs	r3, #1
 8002242:	21d0      	movs	r1, #208	; 0xd0
 8002244:	48ae      	ldr	r0, [pc, #696]	; (8002500 <read_mpu_6050_data+0x2d0>)
 8002246:	f001 fcb9 	bl	8003bbc <HAL_I2C_Master_Transmit>
HAL_I2C_Master_Receive(&hi2c1 ,0xd1,datam,14,5);
 800224a:	1d3a      	adds	r2, r7, #4
 800224c:	2305      	movs	r3, #5
 800224e:	9300      	str	r3, [sp, #0]
 8002250:	230e      	movs	r3, #14
 8002252:	21d1      	movs	r1, #209	; 0xd1
 8002254:	48aa      	ldr	r0, [pc, #680]	; (8002500 <read_mpu_6050_data+0x2d0>)
 8002256:	f001 fdaf 	bl	8003db8 <HAL_I2C_Master_Receive>

acc_x = ((datam[0]<<8)|datam[1])&0xffff;   if (datam[0]&0x80) acc_x|=0xffff0000;
 800225a:	793b      	ldrb	r3, [r7, #4]
 800225c:	021b      	lsls	r3, r3, #8
 800225e:	797a      	ldrb	r2, [r7, #5]
 8002260:	4313      	orrs	r3, r2
 8002262:	b29b      	uxth	r3, r3
 8002264:	4aa7      	ldr	r2, [pc, #668]	; (8002504 <read_mpu_6050_data+0x2d4>)
 8002266:	6013      	str	r3, [r2, #0]
 8002268:	793b      	ldrb	r3, [r7, #4]
 800226a:	b25b      	sxtb	r3, r3
 800226c:	2b00      	cmp	r3, #0
 800226e:	da08      	bge.n	8002282 <read_mpu_6050_data+0x52>
 8002270:	4ba4      	ldr	r3, [pc, #656]	; (8002504 <read_mpu_6050_data+0x2d4>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8002278:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 800227c:	461a      	mov	r2, r3
 800227e:	4ba1      	ldr	r3, [pc, #644]	; (8002504 <read_mpu_6050_data+0x2d4>)
 8002280:	601a      	str	r2, [r3, #0]
acc_y = ((datam[2]<<8)|datam[3])&0xffff;   if (datam[2]&0x80) acc_y|=0xffff0000;
 8002282:	79bb      	ldrb	r3, [r7, #6]
 8002284:	021b      	lsls	r3, r3, #8
 8002286:	79fa      	ldrb	r2, [r7, #7]
 8002288:	4313      	orrs	r3, r2
 800228a:	b29b      	uxth	r3, r3
 800228c:	4a9e      	ldr	r2, [pc, #632]	; (8002508 <read_mpu_6050_data+0x2d8>)
 800228e:	6013      	str	r3, [r2, #0]
 8002290:	79bb      	ldrb	r3, [r7, #6]
 8002292:	b25b      	sxtb	r3, r3
 8002294:	2b00      	cmp	r3, #0
 8002296:	da08      	bge.n	80022aa <read_mpu_6050_data+0x7a>
 8002298:	4b9b      	ldr	r3, [pc, #620]	; (8002508 <read_mpu_6050_data+0x2d8>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 80022a0:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 80022a4:	461a      	mov	r2, r3
 80022a6:	4b98      	ldr	r3, [pc, #608]	; (8002508 <read_mpu_6050_data+0x2d8>)
 80022a8:	601a      	str	r2, [r3, #0]
acc_z = ((datam[4]<<8)|datam[5])&0xffff;   if (datam[4]&0x80) acc_z|=0xffff0000;
 80022aa:	7a3b      	ldrb	r3, [r7, #8]
 80022ac:	021b      	lsls	r3, r3, #8
 80022ae:	7a7a      	ldrb	r2, [r7, #9]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	4a95      	ldr	r2, [pc, #596]	; (800250c <read_mpu_6050_data+0x2dc>)
 80022b6:	6013      	str	r3, [r2, #0]
 80022b8:	7a3b      	ldrb	r3, [r7, #8]
 80022ba:	b25b      	sxtb	r3, r3
 80022bc:	2b00      	cmp	r3, #0
 80022be:	da08      	bge.n	80022d2 <read_mpu_6050_data+0xa2>
 80022c0:	4b92      	ldr	r3, [pc, #584]	; (800250c <read_mpu_6050_data+0x2dc>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 80022c8:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 80022cc:	461a      	mov	r2, r3
 80022ce:	4b8f      	ldr	r3, [pc, #572]	; (800250c <read_mpu_6050_data+0x2dc>)
 80022d0:	601a      	str	r2, [r3, #0]

temperature = ((int16_t)datam[6]<<8)|datam[7];
 80022d2:	7abb      	ldrb	r3, [r7, #10]
 80022d4:	021b      	lsls	r3, r3, #8
 80022d6:	7afa      	ldrb	r2, [r7, #11]
 80022d8:	4313      	orrs	r3, r2
 80022da:	4618      	mov	r0, r3
 80022dc:	f7fe fcde 	bl	8000c9c <__aeabi_i2f>
 80022e0:	4603      	mov	r3, r0
 80022e2:	4a8b      	ldr	r2, [pc, #556]	; (8002510 <read_mpu_6050_data+0x2e0>)
 80022e4:	6013      	str	r3, [r2, #0]

gyro_x = datam[8]<<8|datam[9];   if (datam[8]&0x80) gyro_x|=0xffff0000;
 80022e6:	7b3b      	ldrb	r3, [r7, #12]
 80022e8:	021b      	lsls	r3, r3, #8
 80022ea:	7b7a      	ldrb	r2, [r7, #13]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	4a89      	ldr	r2, [pc, #548]	; (8002514 <read_mpu_6050_data+0x2e4>)
 80022f0:	6013      	str	r3, [r2, #0]
 80022f2:	7b3b      	ldrb	r3, [r7, #12]
 80022f4:	b25b      	sxtb	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	da08      	bge.n	800230c <read_mpu_6050_data+0xdc>
 80022fa:	4b86      	ldr	r3, [pc, #536]	; (8002514 <read_mpu_6050_data+0x2e4>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8002302:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8002306:	461a      	mov	r2, r3
 8002308:	4b82      	ldr	r3, [pc, #520]	; (8002514 <read_mpu_6050_data+0x2e4>)
 800230a:	601a      	str	r2, [r3, #0]
gyro_y = datam[10]<<8|datam[11]; if (datam[10]&0x80) gyro_y|=0xffff0000;
 800230c:	7bbb      	ldrb	r3, [r7, #14]
 800230e:	021b      	lsls	r3, r3, #8
 8002310:	7bfa      	ldrb	r2, [r7, #15]
 8002312:	4313      	orrs	r3, r2
 8002314:	4a80      	ldr	r2, [pc, #512]	; (8002518 <read_mpu_6050_data+0x2e8>)
 8002316:	6013      	str	r3, [r2, #0]
 8002318:	7bbb      	ldrb	r3, [r7, #14]
 800231a:	b25b      	sxtb	r3, r3
 800231c:	2b00      	cmp	r3, #0
 800231e:	da08      	bge.n	8002332 <read_mpu_6050_data+0x102>
 8002320:	4b7d      	ldr	r3, [pc, #500]	; (8002518 <read_mpu_6050_data+0x2e8>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8002328:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 800232c:	461a      	mov	r2, r3
 800232e:	4b7a      	ldr	r3, [pc, #488]	; (8002518 <read_mpu_6050_data+0x2e8>)
 8002330:	601a      	str	r2, [r3, #0]
gyro_z = datam[12]<<8|datam[13]; if (datam[12]&0x80) gyro_z|=0xffff0000;
 8002332:	7c3b      	ldrb	r3, [r7, #16]
 8002334:	021b      	lsls	r3, r3, #8
 8002336:	7c7a      	ldrb	r2, [r7, #17]
 8002338:	4313      	orrs	r3, r2
 800233a:	4a78      	ldr	r2, [pc, #480]	; (800251c <read_mpu_6050_data+0x2ec>)
 800233c:	6013      	str	r3, [r2, #0]
 800233e:	7c3b      	ldrb	r3, [r7, #16]
 8002340:	b25b      	sxtb	r3, r3
 8002342:	2b00      	cmp	r3, #0
 8002344:	da08      	bge.n	8002358 <read_mpu_6050_data+0x128>
 8002346:	4b75      	ldr	r3, [pc, #468]	; (800251c <read_mpu_6050_data+0x2ec>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 800234e:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8002352:	461a      	mov	r2, r3
 8002354:	4b71      	ldr	r3, [pc, #452]	; (800251c <read_mpu_6050_data+0x2ec>)
 8002356:	601a      	str	r2, [r3, #0]

calacc_x = ((float) -acc_x) * 8.0 / (float) 0x8000;
 8002358:	4b6a      	ldr	r3, [pc, #424]	; (8002504 <read_mpu_6050_data+0x2d4>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	425b      	negs	r3, r3
 800235e:	4618      	mov	r0, r3
 8002360:	f7fe fc9c 	bl	8000c9c <__aeabi_i2f>
 8002364:	4603      	mov	r3, r0
 8002366:	4618      	mov	r0, r3
 8002368:	f7fe f85e 	bl	8000428 <__aeabi_f2d>
 800236c:	f04f 0200 	mov.w	r2, #0
 8002370:	4b6b      	ldr	r3, [pc, #428]	; (8002520 <read_mpu_6050_data+0x2f0>)
 8002372:	f7fe f8b1 	bl	80004d8 <__aeabi_dmul>
 8002376:	4602      	mov	r2, r0
 8002378:	460b      	mov	r3, r1
 800237a:	4610      	mov	r0, r2
 800237c:	4619      	mov	r1, r3
 800237e:	f04f 0200 	mov.w	r2, #0
 8002382:	4b68      	ldr	r3, [pc, #416]	; (8002524 <read_mpu_6050_data+0x2f4>)
 8002384:	f7fe f9d2 	bl	800072c <__aeabi_ddiv>
 8002388:	4602      	mov	r2, r0
 800238a:	460b      	mov	r3, r1
 800238c:	4610      	mov	r0, r2
 800238e:	4619      	mov	r1, r3
 8002390:	f7fe fb7a 	bl	8000a88 <__aeabi_d2f>
 8002394:	4603      	mov	r3, r0
 8002396:	4a64      	ldr	r2, [pc, #400]	; (8002528 <read_mpu_6050_data+0x2f8>)
 8002398:	6013      	str	r3, [r2, #0]
calacc_y = ((float) -acc_y) * 8.0 / (float) 0x8000;
 800239a:	4b5b      	ldr	r3, [pc, #364]	; (8002508 <read_mpu_6050_data+0x2d8>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	425b      	negs	r3, r3
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7fe fc7b 	bl	8000c9c <__aeabi_i2f>
 80023a6:	4603      	mov	r3, r0
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7fe f83d 	bl	8000428 <__aeabi_f2d>
 80023ae:	f04f 0200 	mov.w	r2, #0
 80023b2:	4b5b      	ldr	r3, [pc, #364]	; (8002520 <read_mpu_6050_data+0x2f0>)
 80023b4:	f7fe f890 	bl	80004d8 <__aeabi_dmul>
 80023b8:	4602      	mov	r2, r0
 80023ba:	460b      	mov	r3, r1
 80023bc:	4610      	mov	r0, r2
 80023be:	4619      	mov	r1, r3
 80023c0:	f04f 0200 	mov.w	r2, #0
 80023c4:	4b57      	ldr	r3, [pc, #348]	; (8002524 <read_mpu_6050_data+0x2f4>)
 80023c6:	f7fe f9b1 	bl	800072c <__aeabi_ddiv>
 80023ca:	4602      	mov	r2, r0
 80023cc:	460b      	mov	r3, r1
 80023ce:	4610      	mov	r0, r2
 80023d0:	4619      	mov	r1, r3
 80023d2:	f7fe fb59 	bl	8000a88 <__aeabi_d2f>
 80023d6:	4603      	mov	r3, r0
 80023d8:	4a54      	ldr	r2, [pc, #336]	; (800252c <read_mpu_6050_data+0x2fc>)
 80023da:	6013      	str	r3, [r2, #0]
calacc_z = ((float) -acc_z) * 8.0 / (float) 0x8000;
 80023dc:	4b4b      	ldr	r3, [pc, #300]	; (800250c <read_mpu_6050_data+0x2dc>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	425b      	negs	r3, r3
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7fe fc5a 	bl	8000c9c <__aeabi_i2f>
 80023e8:	4603      	mov	r3, r0
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7fe f81c 	bl	8000428 <__aeabi_f2d>
 80023f0:	f04f 0200 	mov.w	r2, #0
 80023f4:	4b4a      	ldr	r3, [pc, #296]	; (8002520 <read_mpu_6050_data+0x2f0>)
 80023f6:	f7fe f86f 	bl	80004d8 <__aeabi_dmul>
 80023fa:	4602      	mov	r2, r0
 80023fc:	460b      	mov	r3, r1
 80023fe:	4610      	mov	r0, r2
 8002400:	4619      	mov	r1, r3
 8002402:	f04f 0200 	mov.w	r2, #0
 8002406:	4b47      	ldr	r3, [pc, #284]	; (8002524 <read_mpu_6050_data+0x2f4>)
 8002408:	f7fe f990 	bl	800072c <__aeabi_ddiv>
 800240c:	4602      	mov	r2, r0
 800240e:	460b      	mov	r3, r1
 8002410:	4610      	mov	r0, r2
 8002412:	4619      	mov	r1, r3
 8002414:	f7fe fb38 	bl	8000a88 <__aeabi_d2f>
 8002418:	4603      	mov	r3, r0
 800241a:	4a45      	ldr	r2, [pc, #276]	; (8002530 <read_mpu_6050_data+0x300>)
 800241c:	6013      	str	r3, [r2, #0]

//temperature = datam[6]<<8|datam[7];
// caltemperature = temperature / 100;
caltemperature = ((float) temperature) / 333.87 + 21.0;
 800241e:	4b3c      	ldr	r3, [pc, #240]	; (8002510 <read_mpu_6050_data+0x2e0>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4618      	mov	r0, r3
 8002424:	f7fe f800 	bl	8000428 <__aeabi_f2d>
 8002428:	a333      	add	r3, pc, #204	; (adr r3, 80024f8 <read_mpu_6050_data+0x2c8>)
 800242a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800242e:	f7fe f97d 	bl	800072c <__aeabi_ddiv>
 8002432:	4602      	mov	r2, r0
 8002434:	460b      	mov	r3, r1
 8002436:	4610      	mov	r0, r2
 8002438:	4619      	mov	r1, r3
 800243a:	f04f 0200 	mov.w	r2, #0
 800243e:	4b3d      	ldr	r3, [pc, #244]	; (8002534 <read_mpu_6050_data+0x304>)
 8002440:	f7fd fe94 	bl	800016c <__adddf3>
 8002444:	4602      	mov	r2, r0
 8002446:	460b      	mov	r3, r1
 8002448:	4610      	mov	r0, r2
 800244a:	4619      	mov	r1, r3
 800244c:	f7fe fb1c 	bl	8000a88 <__aeabi_d2f>
 8002450:	4603      	mov	r3, r0
 8002452:	4a39      	ldr	r2, [pc, #228]	; (8002538 <read_mpu_6050_data+0x308>)
 8002454:	6013      	str	r3, [r2, #0]

gyro_x = datam[8]<<8|datam[9];   if (datam[8]&0x80) gyro_x|=0xffff0000;
 8002456:	7b3b      	ldrb	r3, [r7, #12]
 8002458:	021b      	lsls	r3, r3, #8
 800245a:	7b7a      	ldrb	r2, [r7, #13]
 800245c:	4313      	orrs	r3, r2
 800245e:	4a2d      	ldr	r2, [pc, #180]	; (8002514 <read_mpu_6050_data+0x2e4>)
 8002460:	6013      	str	r3, [r2, #0]
 8002462:	7b3b      	ldrb	r3, [r7, #12]
 8002464:	b25b      	sxtb	r3, r3
 8002466:	2b00      	cmp	r3, #0
 8002468:	da08      	bge.n	800247c <read_mpu_6050_data+0x24c>
 800246a:	4b2a      	ldr	r3, [pc, #168]	; (8002514 <read_mpu_6050_data+0x2e4>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8002472:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8002476:	461a      	mov	r2, r3
 8002478:	4b26      	ldr	r3, [pc, #152]	; (8002514 <read_mpu_6050_data+0x2e4>)
 800247a:	601a      	str	r2, [r3, #0]
gyro_y = datam[10]<<8|datam[11]; if (datam[10]&0x80) gyro_y|=0xffff0000;
 800247c:	7bbb      	ldrb	r3, [r7, #14]
 800247e:	021b      	lsls	r3, r3, #8
 8002480:	7bfa      	ldrb	r2, [r7, #15]
 8002482:	4313      	orrs	r3, r2
 8002484:	4a24      	ldr	r2, [pc, #144]	; (8002518 <read_mpu_6050_data+0x2e8>)
 8002486:	6013      	str	r3, [r2, #0]
 8002488:	7bbb      	ldrb	r3, [r7, #14]
 800248a:	b25b      	sxtb	r3, r3
 800248c:	2b00      	cmp	r3, #0
 800248e:	da08      	bge.n	80024a2 <read_mpu_6050_data+0x272>
 8002490:	4b21      	ldr	r3, [pc, #132]	; (8002518 <read_mpu_6050_data+0x2e8>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8002498:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 800249c:	461a      	mov	r2, r3
 800249e:	4b1e      	ldr	r3, [pc, #120]	; (8002518 <read_mpu_6050_data+0x2e8>)
 80024a0:	601a      	str	r2, [r3, #0]
gyro_z = datam[12]<<8|datam[13]; if (datam[12]&0x80) gyro_z|=0xffff0000;
 80024a2:	7c3b      	ldrb	r3, [r7, #16]
 80024a4:	021b      	lsls	r3, r3, #8
 80024a6:	7c7a      	ldrb	r2, [r7, #17]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	4a1c      	ldr	r2, [pc, #112]	; (800251c <read_mpu_6050_data+0x2ec>)
 80024ac:	6013      	str	r3, [r2, #0]
 80024ae:	7c3b      	ldrb	r3, [r7, #16]
 80024b0:	b25b      	sxtb	r3, r3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	da08      	bge.n	80024c8 <read_mpu_6050_data+0x298>
 80024b6:	4b19      	ldr	r3, [pc, #100]	; (800251c <read_mpu_6050_data+0x2ec>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 80024be:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 80024c2:	461a      	mov	r2, r3
 80024c4:	4b15      	ldr	r3, [pc, #84]	; (800251c <read_mpu_6050_data+0x2ec>)
 80024c6:	601a      	str	r2, [r3, #0]

calgyro_x = ((float) -gyro_x) * 500.0 / (float) 0x8000;
 80024c8:	4b12      	ldr	r3, [pc, #72]	; (8002514 <read_mpu_6050_data+0x2e4>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	425b      	negs	r3, r3
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7fe fbe4 	bl	8000c9c <__aeabi_i2f>
 80024d4:	4603      	mov	r3, r0
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7fd ffa6 	bl	8000428 <__aeabi_f2d>
 80024dc:	f04f 0200 	mov.w	r2, #0
 80024e0:	4b16      	ldr	r3, [pc, #88]	; (800253c <read_mpu_6050_data+0x30c>)
 80024e2:	f7fd fff9 	bl	80004d8 <__aeabi_dmul>
 80024e6:	4602      	mov	r2, r0
 80024e8:	460b      	mov	r3, r1
 80024ea:	4610      	mov	r0, r2
 80024ec:	4619      	mov	r1, r3
 80024ee:	f04f 0200 	mov.w	r2, #0
 80024f2:	e025      	b.n	8002540 <read_mpu_6050_data+0x310>
 80024f4:	f3af 8000 	nop.w
 80024f8:	851eb852 	.word	0x851eb852
 80024fc:	4074ddeb 	.word	0x4074ddeb
 8002500:	20000218 	.word	0x20000218
 8002504:	2000036c 	.word	0x2000036c
 8002508:	20000370 	.word	0x20000370
 800250c:	20000374 	.word	0x20000374
 8002510:	20000390 	.word	0x20000390
 8002514:	20000378 	.word	0x20000378
 8002518:	2000037c 	.word	0x2000037c
 800251c:	20000380 	.word	0x20000380
 8002520:	40200000 	.word	0x40200000
 8002524:	40e00000 	.word	0x40e00000
 8002528:	20000384 	.word	0x20000384
 800252c:	20000388 	.word	0x20000388
 8002530:	2000038c 	.word	0x2000038c
 8002534:	40350000 	.word	0x40350000
 8002538:	20000394 	.word	0x20000394
 800253c:	407f4000 	.word	0x407f4000
 8002540:	4b89      	ldr	r3, [pc, #548]	; (8002768 <read_mpu_6050_data+0x538>)
 8002542:	f7fe f8f3 	bl	800072c <__aeabi_ddiv>
 8002546:	4602      	mov	r2, r0
 8002548:	460b      	mov	r3, r1
 800254a:	4610      	mov	r0, r2
 800254c:	4619      	mov	r1, r3
 800254e:	f7fe fa9b 	bl	8000a88 <__aeabi_d2f>
 8002552:	4603      	mov	r3, r0
 8002554:	4a85      	ldr	r2, [pc, #532]	; (800276c <read_mpu_6050_data+0x53c>)
 8002556:	6013      	str	r3, [r2, #0]
calgyro_y = ((float) -gyro_y) * 500.0 / (float) 0x8000;
 8002558:	4b85      	ldr	r3, [pc, #532]	; (8002770 <read_mpu_6050_data+0x540>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	425b      	negs	r3, r3
 800255e:	4618      	mov	r0, r3
 8002560:	f7fe fb9c 	bl	8000c9c <__aeabi_i2f>
 8002564:	4603      	mov	r3, r0
 8002566:	4618      	mov	r0, r3
 8002568:	f7fd ff5e 	bl	8000428 <__aeabi_f2d>
 800256c:	f04f 0200 	mov.w	r2, #0
 8002570:	4b80      	ldr	r3, [pc, #512]	; (8002774 <read_mpu_6050_data+0x544>)
 8002572:	f7fd ffb1 	bl	80004d8 <__aeabi_dmul>
 8002576:	4602      	mov	r2, r0
 8002578:	460b      	mov	r3, r1
 800257a:	4610      	mov	r0, r2
 800257c:	4619      	mov	r1, r3
 800257e:	f04f 0200 	mov.w	r2, #0
 8002582:	4b79      	ldr	r3, [pc, #484]	; (8002768 <read_mpu_6050_data+0x538>)
 8002584:	f7fe f8d2 	bl	800072c <__aeabi_ddiv>
 8002588:	4602      	mov	r2, r0
 800258a:	460b      	mov	r3, r1
 800258c:	4610      	mov	r0, r2
 800258e:	4619      	mov	r1, r3
 8002590:	f7fe fa7a 	bl	8000a88 <__aeabi_d2f>
 8002594:	4603      	mov	r3, r0
 8002596:	4a78      	ldr	r2, [pc, #480]	; (8002778 <read_mpu_6050_data+0x548>)
 8002598:	6013      	str	r3, [r2, #0]
calgyro_z = ((float) -gyro_z) * 500.0 / (float) 0x8000;
 800259a:	4b78      	ldr	r3, [pc, #480]	; (800277c <read_mpu_6050_data+0x54c>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	425b      	negs	r3, r3
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7fe fb7b 	bl	8000c9c <__aeabi_i2f>
 80025a6:	4603      	mov	r3, r0
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7fd ff3d 	bl	8000428 <__aeabi_f2d>
 80025ae:	f04f 0200 	mov.w	r2, #0
 80025b2:	4b70      	ldr	r3, [pc, #448]	; (8002774 <read_mpu_6050_data+0x544>)
 80025b4:	f7fd ff90 	bl	80004d8 <__aeabi_dmul>
 80025b8:	4602      	mov	r2, r0
 80025ba:	460b      	mov	r3, r1
 80025bc:	4610      	mov	r0, r2
 80025be:	4619      	mov	r1, r3
 80025c0:	f04f 0200 	mov.w	r2, #0
 80025c4:	4b68      	ldr	r3, [pc, #416]	; (8002768 <read_mpu_6050_data+0x538>)
 80025c6:	f7fe f8b1 	bl	800072c <__aeabi_ddiv>
 80025ca:	4602      	mov	r2, r0
 80025cc:	460b      	mov	r3, r1
 80025ce:	4610      	mov	r0, r2
 80025d0:	4619      	mov	r1, r3
 80025d2:	f7fe fa59 	bl	8000a88 <__aeabi_d2f>
 80025d6:	4603      	mov	r3, r0
 80025d8:	4a69      	ldr	r2, [pc, #420]	; (8002780 <read_mpu_6050_data+0x550>)
 80025da:	6013      	str	r3, [r2, #0]

pitch = 180 * atan(acc_x/sqrt(acc_y*acc_y + acc_z*acc_z))/M_PI;
 80025dc:	4b69      	ldr	r3, [pc, #420]	; (8002784 <read_mpu_6050_data+0x554>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7fd ff0f 	bl	8000404 <__aeabi_i2d>
 80025e6:	4604      	mov	r4, r0
 80025e8:	460d      	mov	r5, r1
 80025ea:	4b67      	ldr	r3, [pc, #412]	; (8002788 <read_mpu_6050_data+0x558>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a66      	ldr	r2, [pc, #408]	; (8002788 <read_mpu_6050_data+0x558>)
 80025f0:	6812      	ldr	r2, [r2, #0]
 80025f2:	fb03 f202 	mul.w	r2, r3, r2
 80025f6:	4b65      	ldr	r3, [pc, #404]	; (800278c <read_mpu_6050_data+0x55c>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4964      	ldr	r1, [pc, #400]	; (800278c <read_mpu_6050_data+0x55c>)
 80025fc:	6809      	ldr	r1, [r1, #0]
 80025fe:	fb01 f303 	mul.w	r3, r1, r3
 8002602:	4413      	add	r3, r2
 8002604:	4618      	mov	r0, r3
 8002606:	f7fd fefd 	bl	8000404 <__aeabi_i2d>
 800260a:	4602      	mov	r2, r0
 800260c:	460b      	mov	r3, r1
 800260e:	4610      	mov	r0, r2
 8002610:	4619      	mov	r1, r3
 8002612:	f006 fe82 	bl	800931a <sqrt>
 8002616:	4602      	mov	r2, r0
 8002618:	460b      	mov	r3, r1
 800261a:	4620      	mov	r0, r4
 800261c:	4629      	mov	r1, r5
 800261e:	f7fe f885 	bl	800072c <__aeabi_ddiv>
 8002622:	4602      	mov	r2, r0
 8002624:	460b      	mov	r3, r1
 8002626:	4610      	mov	r0, r2
 8002628:	4619      	mov	r1, r3
 800262a:	f006 fce9 	bl	8009000 <atan>
 800262e:	f04f 0200 	mov.w	r2, #0
 8002632:	4b57      	ldr	r3, [pc, #348]	; (8002790 <read_mpu_6050_data+0x560>)
 8002634:	f7fd ff50 	bl	80004d8 <__aeabi_dmul>
 8002638:	4602      	mov	r2, r0
 800263a:	460b      	mov	r3, r1
 800263c:	4610      	mov	r0, r2
 800263e:	4619      	mov	r1, r3
 8002640:	a347      	add	r3, pc, #284	; (adr r3, 8002760 <read_mpu_6050_data+0x530>)
 8002642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002646:	f7fe f871 	bl	800072c <__aeabi_ddiv>
 800264a:	4602      	mov	r2, r0
 800264c:	460b      	mov	r3, r1
 800264e:	4951      	ldr	r1, [pc, #324]	; (8002794 <read_mpu_6050_data+0x564>)
 8002650:	e9c1 2300 	strd	r2, r3, [r1]
roll = 180 * atan(acc_y/sqrt(acc_x*acc_x + acc_z*acc_z))/M_PI;
 8002654:	4b4c      	ldr	r3, [pc, #304]	; (8002788 <read_mpu_6050_data+0x558>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4618      	mov	r0, r3
 800265a:	f7fd fed3 	bl	8000404 <__aeabi_i2d>
 800265e:	4604      	mov	r4, r0
 8002660:	460d      	mov	r5, r1
 8002662:	4b48      	ldr	r3, [pc, #288]	; (8002784 <read_mpu_6050_data+0x554>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a47      	ldr	r2, [pc, #284]	; (8002784 <read_mpu_6050_data+0x554>)
 8002668:	6812      	ldr	r2, [r2, #0]
 800266a:	fb03 f202 	mul.w	r2, r3, r2
 800266e:	4b47      	ldr	r3, [pc, #284]	; (800278c <read_mpu_6050_data+0x55c>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4946      	ldr	r1, [pc, #280]	; (800278c <read_mpu_6050_data+0x55c>)
 8002674:	6809      	ldr	r1, [r1, #0]
 8002676:	fb01 f303 	mul.w	r3, r1, r3
 800267a:	4413      	add	r3, r2
 800267c:	4618      	mov	r0, r3
 800267e:	f7fd fec1 	bl	8000404 <__aeabi_i2d>
 8002682:	4602      	mov	r2, r0
 8002684:	460b      	mov	r3, r1
 8002686:	4610      	mov	r0, r2
 8002688:	4619      	mov	r1, r3
 800268a:	f006 fe46 	bl	800931a <sqrt>
 800268e:	4602      	mov	r2, r0
 8002690:	460b      	mov	r3, r1
 8002692:	4620      	mov	r0, r4
 8002694:	4629      	mov	r1, r5
 8002696:	f7fe f849 	bl	800072c <__aeabi_ddiv>
 800269a:	4602      	mov	r2, r0
 800269c:	460b      	mov	r3, r1
 800269e:	4610      	mov	r0, r2
 80026a0:	4619      	mov	r1, r3
 80026a2:	f006 fcad 	bl	8009000 <atan>
 80026a6:	f04f 0200 	mov.w	r2, #0
 80026aa:	4b39      	ldr	r3, [pc, #228]	; (8002790 <read_mpu_6050_data+0x560>)
 80026ac:	f7fd ff14 	bl	80004d8 <__aeabi_dmul>
 80026b0:	4602      	mov	r2, r0
 80026b2:	460b      	mov	r3, r1
 80026b4:	4610      	mov	r0, r2
 80026b6:	4619      	mov	r1, r3
 80026b8:	a329      	add	r3, pc, #164	; (adr r3, 8002760 <read_mpu_6050_data+0x530>)
 80026ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026be:	f7fe f835 	bl	800072c <__aeabi_ddiv>
 80026c2:	4602      	mov	r2, r0
 80026c4:	460b      	mov	r3, r1
 80026c6:	4934      	ldr	r1, [pc, #208]	; (8002798 <read_mpu_6050_data+0x568>)
 80026c8:	e9c1 2300 	strd	r2, r3, [r1]
yaw = 2*(180 * atan (acc_z/sqrt(acc_x*acc_x + acc_z*acc_z))/M_PI);
 80026cc:	4b2f      	ldr	r3, [pc, #188]	; (800278c <read_mpu_6050_data+0x55c>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7fd fe97 	bl	8000404 <__aeabi_i2d>
 80026d6:	4604      	mov	r4, r0
 80026d8:	460d      	mov	r5, r1
 80026da:	4b2a      	ldr	r3, [pc, #168]	; (8002784 <read_mpu_6050_data+0x554>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a29      	ldr	r2, [pc, #164]	; (8002784 <read_mpu_6050_data+0x554>)
 80026e0:	6812      	ldr	r2, [r2, #0]
 80026e2:	fb03 f202 	mul.w	r2, r3, r2
 80026e6:	4b29      	ldr	r3, [pc, #164]	; (800278c <read_mpu_6050_data+0x55c>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4928      	ldr	r1, [pc, #160]	; (800278c <read_mpu_6050_data+0x55c>)
 80026ec:	6809      	ldr	r1, [r1, #0]
 80026ee:	fb01 f303 	mul.w	r3, r1, r3
 80026f2:	4413      	add	r3, r2
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7fd fe85 	bl	8000404 <__aeabi_i2d>
 80026fa:	4602      	mov	r2, r0
 80026fc:	460b      	mov	r3, r1
 80026fe:	4610      	mov	r0, r2
 8002700:	4619      	mov	r1, r3
 8002702:	f006 fe0a 	bl	800931a <sqrt>
 8002706:	4602      	mov	r2, r0
 8002708:	460b      	mov	r3, r1
 800270a:	4620      	mov	r0, r4
 800270c:	4629      	mov	r1, r5
 800270e:	f7fe f80d 	bl	800072c <__aeabi_ddiv>
 8002712:	4602      	mov	r2, r0
 8002714:	460b      	mov	r3, r1
 8002716:	4610      	mov	r0, r2
 8002718:	4619      	mov	r1, r3
 800271a:	f006 fc71 	bl	8009000 <atan>
 800271e:	f04f 0200 	mov.w	r2, #0
 8002722:	4b1b      	ldr	r3, [pc, #108]	; (8002790 <read_mpu_6050_data+0x560>)
 8002724:	f7fd fed8 	bl	80004d8 <__aeabi_dmul>
 8002728:	4602      	mov	r2, r0
 800272a:	460b      	mov	r3, r1
 800272c:	4610      	mov	r0, r2
 800272e:	4619      	mov	r1, r3
 8002730:	a30b      	add	r3, pc, #44	; (adr r3, 8002760 <read_mpu_6050_data+0x530>)
 8002732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002736:	f7fd fff9 	bl	800072c <__aeabi_ddiv>
 800273a:	4602      	mov	r2, r0
 800273c:	460b      	mov	r3, r1
 800273e:	4610      	mov	r0, r2
 8002740:	4619      	mov	r1, r3
 8002742:	4602      	mov	r2, r0
 8002744:	460b      	mov	r3, r1
 8002746:	f7fd fd11 	bl	800016c <__adddf3>
 800274a:	4602      	mov	r2, r0
 800274c:	460b      	mov	r3, r1
 800274e:	4913      	ldr	r1, [pc, #76]	; (800279c <read_mpu_6050_data+0x56c>)
 8002750:	e9c1 2300 	strd	r2, r3, [r1]

}
 8002754:	bf00      	nop
 8002756:	3718      	adds	r7, #24
 8002758:	46bd      	mov	sp, r7
 800275a:	bdb0      	pop	{r4, r5, r7, pc}
 800275c:	f3af 8000 	nop.w
 8002760:	54442d18 	.word	0x54442d18
 8002764:	400921fb 	.word	0x400921fb
 8002768:	40e00000 	.word	0x40e00000
 800276c:	20000398 	.word	0x20000398
 8002770:	2000037c 	.word	0x2000037c
 8002774:	407f4000 	.word	0x407f4000
 8002778:	2000039c 	.word	0x2000039c
 800277c:	20000380 	.word	0x20000380
 8002780:	200003a0 	.word	0x200003a0
 8002784:	2000036c 	.word	0x2000036c
 8002788:	20000370 	.word	0x20000370
 800278c:	20000374 	.word	0x20000374
 8002790:	40668000 	.word	0x40668000
 8002794:	200003a8 	.word	0x200003a8
 8002798:	200003b0 	.word	0x200003b0
 800279c:	200003b8 	.word	0x200003b8

080027a0 <setup_mpu_6050_registers>:
void setup_mpu_6050_registers(void){
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b088      	sub	sp, #32
 80027a4:	af02      	add	r7, sp, #8
uint8_t data[20];

data[0]=0x6b; data[1]=0x00; HAL_I2C_Master_Transmit(&hi2c1 ,0xd0,data,2,50); //Activate the MPU-6050
 80027a6:	236b      	movs	r3, #107	; 0x6b
 80027a8:	713b      	strb	r3, [r7, #4]
 80027aa:	2300      	movs	r3, #0
 80027ac:	717b      	strb	r3, [r7, #5]
 80027ae:	1d3a      	adds	r2, r7, #4
 80027b0:	2332      	movs	r3, #50	; 0x32
 80027b2:	9300      	str	r3, [sp, #0]
 80027b4:	2302      	movs	r3, #2
 80027b6:	21d0      	movs	r1, #208	; 0xd0
 80027b8:	481b      	ldr	r0, [pc, #108]	; (8002828 <setup_mpu_6050_registers+0x88>)
 80027ba:	f001 f9ff 	bl	8003bbc <HAL_I2C_Master_Transmit>
data[0]=0x37; data[1]=0x02; HAL_I2C_Master_Transmit(&hi2c1 ,0xd0,data,2,50); //Registers for Bypass Mode:
 80027be:	2337      	movs	r3, #55	; 0x37
 80027c0:	713b      	strb	r3, [r7, #4]
 80027c2:	2302      	movs	r3, #2
 80027c4:	717b      	strb	r3, [r7, #5]
 80027c6:	1d3a      	adds	r2, r7, #4
 80027c8:	2332      	movs	r3, #50	; 0x32
 80027ca:	9300      	str	r3, [sp, #0]
 80027cc:	2302      	movs	r3, #2
 80027ce:	21d0      	movs	r1, #208	; 0xd0
 80027d0:	4815      	ldr	r0, [pc, #84]	; (8002828 <setup_mpu_6050_registers+0x88>)
 80027d2:	f001 f9f3 	bl	8003bbc <HAL_I2C_Master_Transmit>
data[0]=0x6a; data[1]=0x00; HAL_I2C_Master_Transmit(&hi2c1 ,0xd0,data,2,50);
 80027d6:	236a      	movs	r3, #106	; 0x6a
 80027d8:	713b      	strb	r3, [r7, #4]
 80027da:	2300      	movs	r3, #0
 80027dc:	717b      	strb	r3, [r7, #5]
 80027de:	1d3a      	adds	r2, r7, #4
 80027e0:	2332      	movs	r3, #50	; 0x32
 80027e2:	9300      	str	r3, [sp, #0]
 80027e4:	2302      	movs	r3, #2
 80027e6:	21d0      	movs	r1, #208	; 0xd0
 80027e8:	480f      	ldr	r0, [pc, #60]	; (8002828 <setup_mpu_6050_registers+0x88>)
 80027ea:	f001 f9e7 	bl	8003bbc <HAL_I2C_Master_Transmit>

data[0]=0x1c; data[1]=0x10; HAL_I2C_Master_Transmit(&hi2c1 ,0xd0,data,2,50); //Configure the accelerometer (+/-8g)
 80027ee:	231c      	movs	r3, #28
 80027f0:	713b      	strb	r3, [r7, #4]
 80027f2:	2310      	movs	r3, #16
 80027f4:	717b      	strb	r3, [r7, #5]
 80027f6:	1d3a      	adds	r2, r7, #4
 80027f8:	2332      	movs	r3, #50	; 0x32
 80027fa:	9300      	str	r3, [sp, #0]
 80027fc:	2302      	movs	r3, #2
 80027fe:	21d0      	movs	r1, #208	; 0xd0
 8002800:	4809      	ldr	r0, [pc, #36]	; (8002828 <setup_mpu_6050_registers+0x88>)
 8002802:	f001 f9db 	bl	8003bbc <HAL_I2C_Master_Transmit>
data[0]=0x1b; data[1]=0x08; HAL_I2C_Master_Transmit(&hi2c1 ,0xd0,data,2,50); //Configure the gyro (500dps full scale)
 8002806:	231b      	movs	r3, #27
 8002808:	713b      	strb	r3, [r7, #4]
 800280a:	2308      	movs	r3, #8
 800280c:	717b      	strb	r3, [r7, #5]
 800280e:	1d3a      	adds	r2, r7, #4
 8002810:	2332      	movs	r3, #50	; 0x32
 8002812:	9300      	str	r3, [sp, #0]
 8002814:	2302      	movs	r3, #2
 8002816:	21d0      	movs	r1, #208	; 0xd0
 8002818:	4803      	ldr	r0, [pc, #12]	; (8002828 <setup_mpu_6050_registers+0x88>)
 800281a:	f001 f9cf 	bl	8003bbc <HAL_I2C_Master_Transmit>
}
 800281e:	bf00      	nop
 8002820:	3718      	adds	r7, #24
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	20000218 	.word	0x20000218

0800282c <HAL_UART_RxCpltCallback>:

// GPGGA with Altitude Information

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) {
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a63      	ldr	r2, [pc, #396]	; (80029c4 <HAL_UART_RxCpltCallback+0x198>)
 8002838:	4293      	cmp	r3, r2
 800283a:	f040 80be 	bne.w	80029ba <HAL_UART_RxCpltCallback+0x18e>
		switch(Rx_index) {
 800283e:	4b62      	ldr	r3, [pc, #392]	; (80029c8 <HAL_UART_RxCpltCallback+0x19c>)
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	2b05      	cmp	r3, #5
 8002844:	f200 8094 	bhi.w	8002970 <HAL_UART_RxCpltCallback+0x144>
 8002848:	a201      	add	r2, pc, #4	; (adr r2, 8002850 <HAL_UART_RxCpltCallback+0x24>)
 800284a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800284e:	bf00      	nop
 8002850:	08002869 	.word	0x08002869
 8002854:	08002895 	.word	0x08002895
 8002858:	080028c1 	.word	0x080028c1
 800285c:	080028ed 	.word	0x080028ed
 8002860:	08002919 	.word	0x08002919
 8002864:	08002945 	.word	0x08002945
		case 0:
			if(Rx_tempData[0] == '$')
 8002868:	4b58      	ldr	r3, [pc, #352]	; (80029cc <HAL_UART_RxCpltCallback+0x1a0>)
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	2b24      	cmp	r3, #36	; 0x24
 800286e:	d10d      	bne.n	800288c <HAL_UART_RxCpltCallback+0x60>
			{
				Rx_data[Rx_index] = Rx_tempData[0];
 8002870:	4b55      	ldr	r3, [pc, #340]	; (80029c8 <HAL_UART_RxCpltCallback+0x19c>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	461a      	mov	r2, r3
 8002876:	4b55      	ldr	r3, [pc, #340]	; (80029cc <HAL_UART_RxCpltCallback+0x1a0>)
 8002878:	7819      	ldrb	r1, [r3, #0]
 800287a:	4b55      	ldr	r3, [pc, #340]	; (80029d0 <HAL_UART_RxCpltCallback+0x1a4>)
 800287c:	5499      	strb	r1, [r3, r2]
				Rx_index++;
 800287e:	4b52      	ldr	r3, [pc, #328]	; (80029c8 <HAL_UART_RxCpltCallback+0x19c>)
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	3301      	adds	r3, #1
 8002884:	b2da      	uxtb	r2, r3
 8002886:	4b50      	ldr	r3, [pc, #320]	; (80029c8 <HAL_UART_RxCpltCallback+0x19c>)
 8002888:	701a      	strb	r2, [r3, #0]
			} else {
				Rx_index = 0;
			}
			break;
 800288a:	e091      	b.n	80029b0 <HAL_UART_RxCpltCallback+0x184>
				Rx_index = 0;
 800288c:	4b4e      	ldr	r3, [pc, #312]	; (80029c8 <HAL_UART_RxCpltCallback+0x19c>)
 800288e:	2200      	movs	r2, #0
 8002890:	701a      	strb	r2, [r3, #0]
			break;
 8002892:	e08d      	b.n	80029b0 <HAL_UART_RxCpltCallback+0x184>
		case 1:
			if(Rx_tempData[0] == 'G')
 8002894:	4b4d      	ldr	r3, [pc, #308]	; (80029cc <HAL_UART_RxCpltCallback+0x1a0>)
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	2b47      	cmp	r3, #71	; 0x47
 800289a:	d10d      	bne.n	80028b8 <HAL_UART_RxCpltCallback+0x8c>
			{
				Rx_data[Rx_index] = Rx_tempData[0];
 800289c:	4b4a      	ldr	r3, [pc, #296]	; (80029c8 <HAL_UART_RxCpltCallback+0x19c>)
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	461a      	mov	r2, r3
 80028a2:	4b4a      	ldr	r3, [pc, #296]	; (80029cc <HAL_UART_RxCpltCallback+0x1a0>)
 80028a4:	7819      	ldrb	r1, [r3, #0]
 80028a6:	4b4a      	ldr	r3, [pc, #296]	; (80029d0 <HAL_UART_RxCpltCallback+0x1a4>)
 80028a8:	5499      	strb	r1, [r3, r2]
				Rx_index++;
 80028aa:	4b47      	ldr	r3, [pc, #284]	; (80029c8 <HAL_UART_RxCpltCallback+0x19c>)
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	3301      	adds	r3, #1
 80028b0:	b2da      	uxtb	r2, r3
 80028b2:	4b45      	ldr	r3, [pc, #276]	; (80029c8 <HAL_UART_RxCpltCallback+0x19c>)
 80028b4:	701a      	strb	r2, [r3, #0]
			} else {
				Rx_index = 0;
			}
			break;
 80028b6:	e07b      	b.n	80029b0 <HAL_UART_RxCpltCallback+0x184>
				Rx_index = 0;
 80028b8:	4b43      	ldr	r3, [pc, #268]	; (80029c8 <HAL_UART_RxCpltCallback+0x19c>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	701a      	strb	r2, [r3, #0]
			break;
 80028be:	e077      	b.n	80029b0 <HAL_UART_RxCpltCallback+0x184>
		case 2:
			if(Rx_tempData[0] == 'P')
 80028c0:	4b42      	ldr	r3, [pc, #264]	; (80029cc <HAL_UART_RxCpltCallback+0x1a0>)
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	2b50      	cmp	r3, #80	; 0x50
 80028c6:	d10d      	bne.n	80028e4 <HAL_UART_RxCpltCallback+0xb8>
			{
				Rx_data[Rx_index] = Rx_tempData[0];
 80028c8:	4b3f      	ldr	r3, [pc, #252]	; (80029c8 <HAL_UART_RxCpltCallback+0x19c>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	461a      	mov	r2, r3
 80028ce:	4b3f      	ldr	r3, [pc, #252]	; (80029cc <HAL_UART_RxCpltCallback+0x1a0>)
 80028d0:	7819      	ldrb	r1, [r3, #0]
 80028d2:	4b3f      	ldr	r3, [pc, #252]	; (80029d0 <HAL_UART_RxCpltCallback+0x1a4>)
 80028d4:	5499      	strb	r1, [r3, r2]
				Rx_index++;
 80028d6:	4b3c      	ldr	r3, [pc, #240]	; (80029c8 <HAL_UART_RxCpltCallback+0x19c>)
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	3301      	adds	r3, #1
 80028dc:	b2da      	uxtb	r2, r3
 80028de:	4b3a      	ldr	r3, [pc, #232]	; (80029c8 <HAL_UART_RxCpltCallback+0x19c>)
 80028e0:	701a      	strb	r2, [r3, #0]
			} else {
				Rx_index = 0;
			}
			break;
 80028e2:	e065      	b.n	80029b0 <HAL_UART_RxCpltCallback+0x184>
				Rx_index = 0;
 80028e4:	4b38      	ldr	r3, [pc, #224]	; (80029c8 <HAL_UART_RxCpltCallback+0x19c>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	701a      	strb	r2, [r3, #0]
			break;
 80028ea:	e061      	b.n	80029b0 <HAL_UART_RxCpltCallback+0x184>
		case 3:
			if(Rx_tempData[0] == 'G')
 80028ec:	4b37      	ldr	r3, [pc, #220]	; (80029cc <HAL_UART_RxCpltCallback+0x1a0>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	2b47      	cmp	r3, #71	; 0x47
 80028f2:	d10d      	bne.n	8002910 <HAL_UART_RxCpltCallback+0xe4>
			{
				Rx_data[Rx_index] = Rx_tempData[0];
 80028f4:	4b34      	ldr	r3, [pc, #208]	; (80029c8 <HAL_UART_RxCpltCallback+0x19c>)
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	461a      	mov	r2, r3
 80028fa:	4b34      	ldr	r3, [pc, #208]	; (80029cc <HAL_UART_RxCpltCallback+0x1a0>)
 80028fc:	7819      	ldrb	r1, [r3, #0]
 80028fe:	4b34      	ldr	r3, [pc, #208]	; (80029d0 <HAL_UART_RxCpltCallback+0x1a4>)
 8002900:	5499      	strb	r1, [r3, r2]
				Rx_index++;
 8002902:	4b31      	ldr	r3, [pc, #196]	; (80029c8 <HAL_UART_RxCpltCallback+0x19c>)
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	3301      	adds	r3, #1
 8002908:	b2da      	uxtb	r2, r3
 800290a:	4b2f      	ldr	r3, [pc, #188]	; (80029c8 <HAL_UART_RxCpltCallback+0x19c>)
 800290c:	701a      	strb	r2, [r3, #0]
			} else {
				Rx_index = 0;
			}
			break;
 800290e:	e04f      	b.n	80029b0 <HAL_UART_RxCpltCallback+0x184>
				Rx_index = 0;
 8002910:	4b2d      	ldr	r3, [pc, #180]	; (80029c8 <HAL_UART_RxCpltCallback+0x19c>)
 8002912:	2200      	movs	r2, #0
 8002914:	701a      	strb	r2, [r3, #0]
			break;
 8002916:	e04b      	b.n	80029b0 <HAL_UART_RxCpltCallback+0x184>
		case 4:
			if(Rx_tempData[0] == 'G')
 8002918:	4b2c      	ldr	r3, [pc, #176]	; (80029cc <HAL_UART_RxCpltCallback+0x1a0>)
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	2b47      	cmp	r3, #71	; 0x47
 800291e:	d10d      	bne.n	800293c <HAL_UART_RxCpltCallback+0x110>
			{
				Rx_data[Rx_index] = Rx_tempData[0];
 8002920:	4b29      	ldr	r3, [pc, #164]	; (80029c8 <HAL_UART_RxCpltCallback+0x19c>)
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	461a      	mov	r2, r3
 8002926:	4b29      	ldr	r3, [pc, #164]	; (80029cc <HAL_UART_RxCpltCallback+0x1a0>)
 8002928:	7819      	ldrb	r1, [r3, #0]
 800292a:	4b29      	ldr	r3, [pc, #164]	; (80029d0 <HAL_UART_RxCpltCallback+0x1a4>)
 800292c:	5499      	strb	r1, [r3, r2]
				Rx_index++;
 800292e:	4b26      	ldr	r3, [pc, #152]	; (80029c8 <HAL_UART_RxCpltCallback+0x19c>)
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	3301      	adds	r3, #1
 8002934:	b2da      	uxtb	r2, r3
 8002936:	4b24      	ldr	r3, [pc, #144]	; (80029c8 <HAL_UART_RxCpltCallback+0x19c>)
 8002938:	701a      	strb	r2, [r3, #0]
			} else {
				Rx_index = 0;
			}
			break;
 800293a:	e039      	b.n	80029b0 <HAL_UART_RxCpltCallback+0x184>
				Rx_index = 0;
 800293c:	4b22      	ldr	r3, [pc, #136]	; (80029c8 <HAL_UART_RxCpltCallback+0x19c>)
 800293e:	2200      	movs	r2, #0
 8002940:	701a      	strb	r2, [r3, #0]
			break;
 8002942:	e035      	b.n	80029b0 <HAL_UART_RxCpltCallback+0x184>
		case 5:
			if(Rx_tempData[0] == 'A')
 8002944:	4b21      	ldr	r3, [pc, #132]	; (80029cc <HAL_UART_RxCpltCallback+0x1a0>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	2b41      	cmp	r3, #65	; 0x41
 800294a:	d10d      	bne.n	8002968 <HAL_UART_RxCpltCallback+0x13c>
			{
				Rx_data[Rx_index] = Rx_tempData[0];
 800294c:	4b1e      	ldr	r3, [pc, #120]	; (80029c8 <HAL_UART_RxCpltCallback+0x19c>)
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	461a      	mov	r2, r3
 8002952:	4b1e      	ldr	r3, [pc, #120]	; (80029cc <HAL_UART_RxCpltCallback+0x1a0>)
 8002954:	7819      	ldrb	r1, [r3, #0]
 8002956:	4b1e      	ldr	r3, [pc, #120]	; (80029d0 <HAL_UART_RxCpltCallback+0x1a4>)
 8002958:	5499      	strb	r1, [r3, r2]
				Rx_index++;
 800295a:	4b1b      	ldr	r3, [pc, #108]	; (80029c8 <HAL_UART_RxCpltCallback+0x19c>)
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	3301      	adds	r3, #1
 8002960:	b2da      	uxtb	r2, r3
 8002962:	4b19      	ldr	r3, [pc, #100]	; (80029c8 <HAL_UART_RxCpltCallback+0x19c>)
 8002964:	701a      	strb	r2, [r3, #0]
			} else {
				Rx_index = 0;
			}
			break;
 8002966:	e023      	b.n	80029b0 <HAL_UART_RxCpltCallback+0x184>
				Rx_index = 0;
 8002968:	4b17      	ldr	r3, [pc, #92]	; (80029c8 <HAL_UART_RxCpltCallback+0x19c>)
 800296a:	2200      	movs	r2, #0
 800296c:	701a      	strb	r2, [r3, #0]
			break;
 800296e:	e01f      	b.n	80029b0 <HAL_UART_RxCpltCallback+0x184>
		case 6:

		default:
			Rx_data[Rx_index] = Rx_tempData[0];
 8002970:	4b15      	ldr	r3, [pc, #84]	; (80029c8 <HAL_UART_RxCpltCallback+0x19c>)
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	461a      	mov	r2, r3
 8002976:	4b15      	ldr	r3, [pc, #84]	; (80029cc <HAL_UART_RxCpltCallback+0x1a0>)
 8002978:	7819      	ldrb	r1, [r3, #0]
 800297a:	4b15      	ldr	r3, [pc, #84]	; (80029d0 <HAL_UART_RxCpltCallback+0x1a4>)
 800297c:	5499      	strb	r1, [r3, r2]
			if(Rx_tempData[0] == '\n')
 800297e:	4b13      	ldr	r3, [pc, #76]	; (80029cc <HAL_UART_RxCpltCallback+0x1a0>)
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	2b0a      	cmp	r3, #10
 8002984:	d10e      	bne.n	80029a4 <HAL_UART_RxCpltCallback+0x178>
			{
				// kopyalama yapılacak
				memcpy(receivedString, Rx_data, 128);
 8002986:	4a13      	ldr	r2, [pc, #76]	; (80029d4 <HAL_UART_RxCpltCallback+0x1a8>)
 8002988:	4b11      	ldr	r3, [pc, #68]	; (80029d0 <HAL_UART_RxCpltCallback+0x1a4>)
 800298a:	4610      	mov	r0, r2
 800298c:	4619      	mov	r1, r3
 800298e:	2380      	movs	r3, #128	; 0x80
 8002990:	461a      	mov	r2, r3
 8002992:	f003 fc5b 	bl	800624c <memcpy>
				flag = '$';
 8002996:	4b10      	ldr	r3, [pc, #64]	; (80029d8 <HAL_UART_RxCpltCallback+0x1ac>)
 8002998:	2224      	movs	r2, #36	; 0x24
 800299a:	701a      	strb	r2, [r3, #0]
				Rx_index = 0;
 800299c:	4b0a      	ldr	r3, [pc, #40]	; (80029c8 <HAL_UART_RxCpltCallback+0x19c>)
 800299e:	2200      	movs	r2, #0
 80029a0:	701a      	strb	r2, [r3, #0]
 80029a2:	e005      	b.n	80029b0 <HAL_UART_RxCpltCallback+0x184>
			} else {
				Rx_index++;
 80029a4:	4b08      	ldr	r3, [pc, #32]	; (80029c8 <HAL_UART_RxCpltCallback+0x19c>)
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	3301      	adds	r3, #1
 80029aa:	b2da      	uxtb	r2, r3
 80029ac:	4b06      	ldr	r3, [pc, #24]	; (80029c8 <HAL_UART_RxCpltCallback+0x19c>)
 80029ae:	701a      	strb	r2, [r3, #0]
			}
		}
		HAL_UART_Receive_IT(&huart2, Rx_tempData, 1);
 80029b0:	2201      	movs	r2, #1
 80029b2:	4906      	ldr	r1, [pc, #24]	; (80029cc <HAL_UART_RxCpltCallback+0x1a0>)
 80029b4:	4803      	ldr	r0, [pc, #12]	; (80029c4 <HAL_UART_RxCpltCallback+0x198>)
 80029b6:	f003 f808 	bl	80059ca <HAL_UART_Receive_IT>
	}
}
 80029ba:	bf00      	nop
 80029bc:	3708      	adds	r7, #8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	2000070c 	.word	0x2000070c
 80029c8:	200004c0 	.word	0x200004c0
 80029cc:	200003c0 	.word	0x200003c0
 80029d0:	20000440 	.word	0x20000440
 80029d4:	200004c4 	.word	0x200004c4
 80029d8:	20000544 	.word	0x20000544

080029dc <GPS_Parse>:
//		HAL_UART_Receive_IT(&huart2, Rx_tempData, 1);
//	}
//}

void GPS_Parse(void)
{
 80029dc:	b5b0      	push	{r4, r5, r7, lr}
 80029de:	b086      	sub	sp, #24
 80029e0:	af04      	add	r7, sp, #16
//	Date = strtok_f(NULL,',');
//	Magnetic_Variation = strtok_f(NULL,',');
//	M_E_W = strtok_f(NULL,',');
//	Positioning_Mode = strtok_f(NULL,',');

	Message_ID = strtok_f((char*)receivedString,',');
 80029e2:	212c      	movs	r1, #44	; 0x2c
 80029e4:	4868      	ldr	r0, [pc, #416]	; (8002b88 <GPS_Parse+0x1ac>)
 80029e6:	f000 f8fb 	bl	8002be0 <strtok_f>
 80029ea:	4603      	mov	r3, r0
 80029ec:	4a67      	ldr	r2, [pc, #412]	; (8002b8c <GPS_Parse+0x1b0>)
 80029ee:	6013      	str	r3, [r2, #0]
	UTC_Of_Position = strtok_f(NULL, ',');
 80029f0:	212c      	movs	r1, #44	; 0x2c
 80029f2:	2000      	movs	r0, #0
 80029f4:	f000 f8f4 	bl	8002be0 <strtok_f>
 80029f8:	4603      	mov	r3, r0
 80029fa:	4a65      	ldr	r2, [pc, #404]	; (8002b90 <GPS_Parse+0x1b4>)
 80029fc:	6013      	str	r3, [r2, #0]
	Raw_Latitude = strtok_f(NULL,',');
 80029fe:	212c      	movs	r1, #44	; 0x2c
 8002a00:	2000      	movs	r0, #0
 8002a02:	f000 f8ed 	bl	8002be0 <strtok_f>
 8002a06:	4603      	mov	r3, r0
 8002a08:	4a62      	ldr	r2, [pc, #392]	; (8002b94 <GPS_Parse+0x1b8>)
 8002a0a:	6013      	str	r3, [r2, #0]
	N_S = strtok_f(NULL,',');
 8002a0c:	212c      	movs	r1, #44	; 0x2c
 8002a0e:	2000      	movs	r0, #0
 8002a10:	f000 f8e6 	bl	8002be0 <strtok_f>
 8002a14:	4603      	mov	r3, r0
 8002a16:	4a60      	ldr	r2, [pc, #384]	; (8002b98 <GPS_Parse+0x1bc>)
 8002a18:	6013      	str	r3, [r2, #0]
	Raw_Longitude = strtok_f(NULL,',');
 8002a1a:	212c      	movs	r1, #44	; 0x2c
 8002a1c:	2000      	movs	r0, #0
 8002a1e:	f000 f8df 	bl	8002be0 <strtok_f>
 8002a22:	4603      	mov	r3, r0
 8002a24:	4a5d      	ldr	r2, [pc, #372]	; (8002b9c <GPS_Parse+0x1c0>)
 8002a26:	6013      	str	r3, [r2, #0]
	E_W = strtok_f(NULL,',');
 8002a28:	212c      	movs	r1, #44	; 0x2c
 8002a2a:	2000      	movs	r0, #0
 8002a2c:	f000 f8d8 	bl	8002be0 <strtok_f>
 8002a30:	4603      	mov	r3, r0
 8002a32:	4a5b      	ldr	r2, [pc, #364]	; (8002ba0 <GPS_Parse+0x1c4>)
 8002a34:	6013      	str	r3, [r2, #0]
	Quality_Indicator = strtok_f(NULL,',');
 8002a36:	212c      	movs	r1, #44	; 0x2c
 8002a38:	2000      	movs	r0, #0
 8002a3a:	f000 f8d1 	bl	8002be0 <strtok_f>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	4a58      	ldr	r2, [pc, #352]	; (8002ba4 <GPS_Parse+0x1c8>)
 8002a42:	6013      	str	r3, [r2, #0]
	Num_Of_Satellites = strtok_f(NULL,',');
 8002a44:	212c      	movs	r1, #44	; 0x2c
 8002a46:	2000      	movs	r0, #0
 8002a48:	f000 f8ca 	bl	8002be0 <strtok_f>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	4a56      	ldr	r2, [pc, #344]	; (8002ba8 <GPS_Parse+0x1cc>)
 8002a50:	6013      	str	r3, [r2, #0]
	HDOP = strtok_f(NULL,',');
 8002a52:	212c      	movs	r1, #44	; 0x2c
 8002a54:	2000      	movs	r0, #0
 8002a56:	f000 f8c3 	bl	8002be0 <strtok_f>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	4a53      	ldr	r2, [pc, #332]	; (8002bac <GPS_Parse+0x1d0>)
 8002a5e:	6013      	str	r3, [r2, #0]
	Antenna_Altitude = strtok_f(NULL,',');
 8002a60:	212c      	movs	r1, #44	; 0x2c
 8002a62:	2000      	movs	r0, #0
 8002a64:	f000 f8bc 	bl	8002be0 <strtok_f>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	4a51      	ldr	r2, [pc, #324]	; (8002bb0 <GPS_Parse+0x1d4>)
 8002a6c:	6013      	str	r3, [r2, #0]
	A_A_M = strtok_f(NULL,',');
 8002a6e:	212c      	movs	r1, #44	; 0x2c
 8002a70:	2000      	movs	r0, #0
 8002a72:	f000 f8b5 	bl	8002be0 <strtok_f>
 8002a76:	4603      	mov	r3, r0
 8002a78:	4a4e      	ldr	r2, [pc, #312]	; (8002bb4 <GPS_Parse+0x1d8>)
 8002a7a:	6013      	str	r3, [r2, #0]
	Geoidal_Seperation = strtok_f(NULL,',');
 8002a7c:	212c      	movs	r1, #44	; 0x2c
 8002a7e:	2000      	movs	r0, #0
 8002a80:	f000 f8ae 	bl	8002be0 <strtok_f>
 8002a84:	4603      	mov	r3, r0
 8002a86:	4a4c      	ldr	r2, [pc, #304]	; (8002bb8 <GPS_Parse+0x1dc>)
 8002a88:	6013      	str	r3, [r2, #0]
	G_S_M = strtok_f(NULL,',');
 8002a8a:	212c      	movs	r1, #44	; 0x2c
 8002a8c:	2000      	movs	r0, #0
 8002a8e:	f000 f8a7 	bl	8002be0 <strtok_f>
 8002a92:	4603      	mov	r3, r0
 8002a94:	4a49      	ldr	r2, [pc, #292]	; (8002bbc <GPS_Parse+0x1e0>)
 8002a96:	6013      	str	r3, [r2, #0]
	AoDC = strtok_f(NULL,',');
 8002a98:	212c      	movs	r1, #44	; 0x2c
 8002a9a:	2000      	movs	r0, #0
 8002a9c:	f000 f8a0 	bl	8002be0 <strtok_f>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	4a47      	ldr	r2, [pc, #284]	; (8002bc0 <GPS_Parse+0x1e4>)
 8002aa4:	6013      	str	r3, [r2, #0]
	DRS_ID = strtok_f(NULL,',');
 8002aa6:	212c      	movs	r1, #44	; 0x2c
 8002aa8:	2000      	movs	r0, #0
 8002aaa:	f000 f899 	bl	8002be0 <strtok_f>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	4a44      	ldr	r2, [pc, #272]	; (8002bc4 <GPS_Parse+0x1e8>)
 8002ab2:	6013      	str	r3, [r2, #0]

//	char *GPSParse = malloc(strlen(Raw_Latitude)+strlen(N_S)+strlen(Raw_Longitude)+strlen(E_W)+1);
//	sprintf(GPSParse, "Lat:%s %s\r\nLon:%s %s\r\n", Raw_Latitude, N_S, Raw_Longitude, E_W);

	char *GPSParse = malloc(strlen(Raw_Latitude)+strlen(N_S)+strlen(Raw_Longitude)+strlen(E_W)+strlen(Antenna_Altitude)+strlen(A_A_M)+1);
 8002ab4:	4b37      	ldr	r3, [pc, #220]	; (8002b94 <GPS_Parse+0x1b8>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7fd fb49 	bl	8000150 <strlen>
 8002abe:	4604      	mov	r4, r0
 8002ac0:	4b35      	ldr	r3, [pc, #212]	; (8002b98 <GPS_Parse+0x1bc>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7fd fb43 	bl	8000150 <strlen>
 8002aca:	4603      	mov	r3, r0
 8002acc:	441c      	add	r4, r3
 8002ace:	4b33      	ldr	r3, [pc, #204]	; (8002b9c <GPS_Parse+0x1c0>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7fd fb3c 	bl	8000150 <strlen>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	441c      	add	r4, r3
 8002adc:	4b30      	ldr	r3, [pc, #192]	; (8002ba0 <GPS_Parse+0x1c4>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7fd fb35 	bl	8000150 <strlen>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	441c      	add	r4, r3
 8002aea:	4b31      	ldr	r3, [pc, #196]	; (8002bb0 <GPS_Parse+0x1d4>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7fd fb2e 	bl	8000150 <strlen>
 8002af4:	4603      	mov	r3, r0
 8002af6:	441c      	add	r4, r3
 8002af8:	4b2e      	ldr	r3, [pc, #184]	; (8002bb4 <GPS_Parse+0x1d8>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7fd fb27 	bl	8000150 <strlen>
 8002b02:	4603      	mov	r3, r0
 8002b04:	4423      	add	r3, r4
 8002b06:	3301      	adds	r3, #1
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f003 fb97 	bl	800623c <malloc>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	607b      	str	r3, [r7, #4]
	sprintf(GPSParse, "Lat:%s %s\r\nLon:%s %s\r\nAAM:%s %s\r\n", Raw_Latitude, N_S, Raw_Longitude, E_W, Antenna_Altitude, A_A_M);
 8002b12:	4b20      	ldr	r3, [pc, #128]	; (8002b94 <GPS_Parse+0x1b8>)
 8002b14:	681c      	ldr	r4, [r3, #0]
 8002b16:	4b20      	ldr	r3, [pc, #128]	; (8002b98 <GPS_Parse+0x1bc>)
 8002b18:	681d      	ldr	r5, [r3, #0]
 8002b1a:	4b20      	ldr	r3, [pc, #128]	; (8002b9c <GPS_Parse+0x1c0>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a20      	ldr	r2, [pc, #128]	; (8002ba0 <GPS_Parse+0x1c4>)
 8002b20:	6812      	ldr	r2, [r2, #0]
 8002b22:	4923      	ldr	r1, [pc, #140]	; (8002bb0 <GPS_Parse+0x1d4>)
 8002b24:	6809      	ldr	r1, [r1, #0]
 8002b26:	4823      	ldr	r0, [pc, #140]	; (8002bb4 <GPS_Parse+0x1d8>)
 8002b28:	6800      	ldr	r0, [r0, #0]
 8002b2a:	9003      	str	r0, [sp, #12]
 8002b2c:	9102      	str	r1, [sp, #8]
 8002b2e:	9201      	str	r2, [sp, #4]
 8002b30:	9300      	str	r3, [sp, #0]
 8002b32:	462b      	mov	r3, r5
 8002b34:	4622      	mov	r2, r4
 8002b36:	4924      	ldr	r1, [pc, #144]	; (8002bc8 <GPS_Parse+0x1ec>)
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f004 f8e9 	bl	8006d10 <siprintf>

	message_length = sprintf(buffer, "%s", GPSParse);
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	4922      	ldr	r1, [pc, #136]	; (8002bcc <GPS_Parse+0x1f0>)
 8002b42:	4823      	ldr	r0, [pc, #140]	; (8002bd0 <GPS_Parse+0x1f4>)
 8002b44:	f004 f8e4 	bl	8006d10 <siprintf>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	4a22      	ldr	r2, [pc, #136]	; (8002bd4 <GPS_Parse+0x1f8>)
 8002b4c:	6013      	str	r3, [r2, #0]
	ret = SX1278_LoRaEntryTx(&SX1278, message_length, 1650);
 8002b4e:	4b21      	ldr	r3, [pc, #132]	; (8002bd4 <GPS_Parse+0x1f8>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	f240 6272 	movw	r2, #1650	; 0x672
 8002b58:	4619      	mov	r1, r3
 8002b5a:	481f      	ldr	r0, [pc, #124]	; (8002bd8 <GPS_Parse+0x1fc>)
 8002b5c:	f7fe fc9c 	bl	8001498 <SX1278_LoRaEntryTx>
 8002b60:	4603      	mov	r3, r0
 8002b62:	4a1e      	ldr	r2, [pc, #120]	; (8002bdc <GPS_Parse+0x200>)
 8002b64:	6013      	str	r3, [r2, #0]
	ret = SX1278_LoRaTxPacket(&SX1278, (uint8_t *) buffer, message_length, 1650);
 8002b66:	4b1b      	ldr	r3, [pc, #108]	; (8002bd4 <GPS_Parse+0x1f8>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	b2da      	uxtb	r2, r3
 8002b6c:	f240 6372 	movw	r3, #1650	; 0x672
 8002b70:	4917      	ldr	r1, [pc, #92]	; (8002bd0 <GPS_Parse+0x1f4>)
 8002b72:	4819      	ldr	r0, [pc, #100]	; (8002bd8 <GPS_Parse+0x1fc>)
 8002b74:	f7fe fce8 	bl	8001548 <SX1278_LoRaTxPacket>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	4a18      	ldr	r2, [pc, #96]	; (8002bdc <GPS_Parse+0x200>)
 8002b7c:	6013      	str	r3, [r2, #0]

	return;
 8002b7e:	bf00      	nop
}
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bdb0      	pop	{r4, r5, r7, pc}
 8002b86:	bf00      	nop
 8002b88:	200004c4 	.word	0x200004c4
 8002b8c:	20000548 	.word	0x20000548
 8002b90:	2000054c 	.word	0x2000054c
 8002b94:	20000550 	.word	0x20000550
 8002b98:	20000554 	.word	0x20000554
 8002b9c:	20000558 	.word	0x20000558
 8002ba0:	2000055c 	.word	0x2000055c
 8002ba4:	20000560 	.word	0x20000560
 8002ba8:	20000564 	.word	0x20000564
 8002bac:	20000568 	.word	0x20000568
 8002bb0:	2000056c 	.word	0x2000056c
 8002bb4:	20000570 	.word	0x20000570
 8002bb8:	20000574 	.word	0x20000574
 8002bbc:	20000578 	.word	0x20000578
 8002bc0:	2000057c 	.word	0x2000057c
 8002bc4:	20000580 	.word	0x20000580
 8002bc8:	08009568 	.word	0x08009568
 8002bcc:	0800958c 	.word	0x0800958c
 8002bd0:	200002d0 	.word	0x200002d0
 8002bd4:	20000368 	.word	0x20000368
 8002bd8:	200005a0 	.word	0x200005a0
 8002bdc:	200002cc 	.word	0x200002cc

08002be0 <strtok_f>:

char *strtok_f (char *s, char delim)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	460b      	mov	r3, r1
 8002bea:	70fb      	strb	r3, [r7, #3]
    static char *save_ptr;

    return strtok_fr (s, delim, &save_ptr);
 8002bec:	78fb      	ldrb	r3, [r7, #3]
 8002bee:	4a05      	ldr	r2, [pc, #20]	; (8002c04 <strtok_f+0x24>)
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 f808 	bl	8002c08 <strtok_fr>
 8002bf8:	4603      	mov	r3, r0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	200006ac 	.word	0x200006ac

08002c08 <strtok_fr>:

char *strtok_fr (char *s, char delim, char **save_ptr)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b087      	sub	sp, #28
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	460b      	mov	r3, r1
 8002c12:	607a      	str	r2, [r7, #4]
 8002c14:	72fb      	strb	r3, [r7, #11]
    char *tail;
    char c;

    if (s == NULL) {
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d102      	bne.n	8002c22 <strtok_fr+0x1a>
        s = *save_ptr;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	60fb      	str	r3, [r7, #12]
    }
    tail = s;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	617b      	str	r3, [r7, #20]
    if ((c = *tail) == '\0') {
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	74fb      	strb	r3, [r7, #19]
 8002c2c:	7cfb      	ldrb	r3, [r7, #19]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d102      	bne.n	8002c38 <strtok_fr+0x30>
        s = NULL;
 8002c32:	2300      	movs	r3, #0
 8002c34:	60fb      	str	r3, [r7, #12]
 8002c36:	e012      	b.n	8002c5e <strtok_fr+0x56>
    }
    else {
        do {
            if (c == delim) {
 8002c38:	7cfa      	ldrb	r2, [r7, #19]
 8002c3a:	7afb      	ldrb	r3, [r7, #11]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d105      	bne.n	8002c4c <strtok_fr+0x44>
                *tail++ = '\0';
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	1c5a      	adds	r2, r3, #1
 8002c44:	617a      	str	r2, [r7, #20]
 8002c46:	2200      	movs	r2, #0
 8002c48:	701a      	strb	r2, [r3, #0]
                break;
 8002c4a:	e008      	b.n	8002c5e <strtok_fr+0x56>
           }
        }while ((c = *++tail) != '\0');
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	3301      	adds	r3, #1
 8002c50:	617b      	str	r3, [r7, #20]
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	74fb      	strb	r3, [r7, #19]
 8002c58:	7cfb      	ldrb	r3, [r7, #19]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1ec      	bne.n	8002c38 <strtok_fr+0x30>
    }
    *save_ptr = tail;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	697a      	ldr	r2, [r7, #20]
 8002c62:	601a      	str	r2, [r3, #0]
    return s;
 8002c64:	68fb      	ldr	r3, [r7, #12]
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	371c      	adds	r7, #28
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bc80      	pop	{r7}
 8002c6e:	4770      	bx	lr

08002c70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c74:	b672      	cpsid	i
}
 8002c76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c78:	e7fe      	b.n	8002c78 <Error_Handler+0x8>
	...

08002c7c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002c80:	4b17      	ldr	r3, [pc, #92]	; (8002ce0 <MX_SPI1_Init+0x64>)
 8002c82:	4a18      	ldr	r2, [pc, #96]	; (8002ce4 <MX_SPI1_Init+0x68>)
 8002c84:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c86:	4b16      	ldr	r3, [pc, #88]	; (8002ce0 <MX_SPI1_Init+0x64>)
 8002c88:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002c8c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002c8e:	4b14      	ldr	r3, [pc, #80]	; (8002ce0 <MX_SPI1_Init+0x64>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c94:	4b12      	ldr	r3, [pc, #72]	; (8002ce0 <MX_SPI1_Init+0x64>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c9a:	4b11      	ldr	r3, [pc, #68]	; (8002ce0 <MX_SPI1_Init+0x64>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ca0:	4b0f      	ldr	r3, [pc, #60]	; (8002ce0 <MX_SPI1_Init+0x64>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002ca6:	4b0e      	ldr	r3, [pc, #56]	; (8002ce0 <MX_SPI1_Init+0x64>)
 8002ca8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002cae:	4b0c      	ldr	r3, [pc, #48]	; (8002ce0 <MX_SPI1_Init+0x64>)
 8002cb0:	2220      	movs	r2, #32
 8002cb2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002cb4:	4b0a      	ldr	r3, [pc, #40]	; (8002ce0 <MX_SPI1_Init+0x64>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002cba:	4b09      	ldr	r3, [pc, #36]	; (8002ce0 <MX_SPI1_Init+0x64>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cc0:	4b07      	ldr	r3, [pc, #28]	; (8002ce0 <MX_SPI1_Init+0x64>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002cc6:	4b06      	ldr	r3, [pc, #24]	; (8002ce0 <MX_SPI1_Init+0x64>)
 8002cc8:	220a      	movs	r2, #10
 8002cca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002ccc:	4804      	ldr	r0, [pc, #16]	; (8002ce0 <MX_SPI1_Init+0x64>)
 8002cce:	f002 fa19 	bl	8005104 <HAL_SPI_Init>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002cd8:	f7ff ffca 	bl	8002c70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002cdc:	bf00      	nop
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	200006b0 	.word	0x200006b0
 8002ce4:	40013000 	.word	0x40013000

08002ce8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b088      	sub	sp, #32
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cf0:	f107 0310 	add.w	r3, r7, #16
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	605a      	str	r2, [r3, #4]
 8002cfa:	609a      	str	r2, [r3, #8]
 8002cfc:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a1b      	ldr	r2, [pc, #108]	; (8002d70 <HAL_SPI_MspInit+0x88>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d12f      	bne.n	8002d68 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d08:	4b1a      	ldr	r3, [pc, #104]	; (8002d74 <HAL_SPI_MspInit+0x8c>)
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	4a19      	ldr	r2, [pc, #100]	; (8002d74 <HAL_SPI_MspInit+0x8c>)
 8002d0e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d12:	6193      	str	r3, [r2, #24]
 8002d14:	4b17      	ldr	r3, [pc, #92]	; (8002d74 <HAL_SPI_MspInit+0x8c>)
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d1c:	60fb      	str	r3, [r7, #12]
 8002d1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d20:	4b14      	ldr	r3, [pc, #80]	; (8002d74 <HAL_SPI_MspInit+0x8c>)
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	4a13      	ldr	r2, [pc, #76]	; (8002d74 <HAL_SPI_MspInit+0x8c>)
 8002d26:	f043 0304 	orr.w	r3, r3, #4
 8002d2a:	6193      	str	r3, [r2, #24]
 8002d2c:	4b11      	ldr	r3, [pc, #68]	; (8002d74 <HAL_SPI_MspInit+0x8c>)
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	f003 0304 	and.w	r3, r3, #4
 8002d34:	60bb      	str	r3, [r7, #8]
 8002d36:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002d38:	23a0      	movs	r3, #160	; 0xa0
 8002d3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d40:	2303      	movs	r3, #3
 8002d42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d44:	f107 0310 	add.w	r3, r7, #16
 8002d48:	4619      	mov	r1, r3
 8002d4a:	480b      	ldr	r0, [pc, #44]	; (8002d78 <HAL_SPI_MspInit+0x90>)
 8002d4c:	f000 fc26 	bl	800359c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002d50:	2340      	movs	r3, #64	; 0x40
 8002d52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d54:	2300      	movs	r3, #0
 8002d56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d5c:	f107 0310 	add.w	r3, r7, #16
 8002d60:	4619      	mov	r1, r3
 8002d62:	4805      	ldr	r0, [pc, #20]	; (8002d78 <HAL_SPI_MspInit+0x90>)
 8002d64:	f000 fc1a 	bl	800359c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002d68:	bf00      	nop
 8002d6a:	3720      	adds	r7, #32
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	40013000 	.word	0x40013000
 8002d74:	40021000 	.word	0x40021000
 8002d78:	40010800 	.word	0x40010800

08002d7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b085      	sub	sp, #20
 8002d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002d82:	4b15      	ldr	r3, [pc, #84]	; (8002dd8 <HAL_MspInit+0x5c>)
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	4a14      	ldr	r2, [pc, #80]	; (8002dd8 <HAL_MspInit+0x5c>)
 8002d88:	f043 0301 	orr.w	r3, r3, #1
 8002d8c:	6193      	str	r3, [r2, #24]
 8002d8e:	4b12      	ldr	r3, [pc, #72]	; (8002dd8 <HAL_MspInit+0x5c>)
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	60bb      	str	r3, [r7, #8]
 8002d98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d9a:	4b0f      	ldr	r3, [pc, #60]	; (8002dd8 <HAL_MspInit+0x5c>)
 8002d9c:	69db      	ldr	r3, [r3, #28]
 8002d9e:	4a0e      	ldr	r2, [pc, #56]	; (8002dd8 <HAL_MspInit+0x5c>)
 8002da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002da4:	61d3      	str	r3, [r2, #28]
 8002da6:	4b0c      	ldr	r3, [pc, #48]	; (8002dd8 <HAL_MspInit+0x5c>)
 8002da8:	69db      	ldr	r3, [r3, #28]
 8002daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dae:	607b      	str	r3, [r7, #4]
 8002db0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002db2:	4b0a      	ldr	r3, [pc, #40]	; (8002ddc <HAL_MspInit+0x60>)
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	60fb      	str	r3, [r7, #12]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002dbe:	60fb      	str	r3, [r7, #12]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002dc6:	60fb      	str	r3, [r7, #12]
 8002dc8:	4a04      	ldr	r2, [pc, #16]	; (8002ddc <HAL_MspInit+0x60>)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dce:	bf00      	nop
 8002dd0:	3714      	adds	r7, #20
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bc80      	pop	{r7}
 8002dd6:	4770      	bx	lr
 8002dd8:	40021000 	.word	0x40021000
 8002ddc:	40010000 	.word	0x40010000

08002de0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002de4:	e7fe      	b.n	8002de4 <NMI_Handler+0x4>

08002de6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002de6:	b480      	push	{r7}
 8002de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dea:	e7fe      	b.n	8002dea <HardFault_Handler+0x4>

08002dec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002df0:	e7fe      	b.n	8002df0 <MemManage_Handler+0x4>

08002df2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002df2:	b480      	push	{r7}
 8002df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002df6:	e7fe      	b.n	8002df6 <BusFault_Handler+0x4>

08002df8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002dfc:	e7fe      	b.n	8002dfc <UsageFault_Handler+0x4>

08002dfe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e02:	bf00      	nop
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bc80      	pop	{r7}
 8002e08:	4770      	bx	lr

08002e0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e0e:	bf00      	nop
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bc80      	pop	{r7}
 8002e14:	4770      	bx	lr

08002e16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e16:	b480      	push	{r7}
 8002e18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e1a:	bf00      	nop
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bc80      	pop	{r7}
 8002e20:	4770      	bx	lr

08002e22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e26:	f000 f9bb 	bl	80031a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e2a:	bf00      	nop
 8002e2c:	bd80      	pop	{r7, pc}
	...

08002e30 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002e34:	4802      	ldr	r0, [pc, #8]	; (8002e40 <USART2_IRQHandler+0x10>)
 8002e36:	f002 fdf9 	bl	8005a2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002e3a:	bf00      	nop
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	2000070c 	.word	0x2000070c

08002e44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0
	return 1;
 8002e48:	2301      	movs	r3, #1
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bc80      	pop	{r7}
 8002e50:	4770      	bx	lr

08002e52 <_kill>:

int _kill(int pid, int sig)
{
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b082      	sub	sp, #8
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
 8002e5a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002e5c:	f003 f9c4 	bl	80061e8 <__errno>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2216      	movs	r2, #22
 8002e64:	601a      	str	r2, [r3, #0]
	return -1;
 8002e66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <_exit>:

void _exit (int status)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b082      	sub	sp, #8
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002e7a:	f04f 31ff 	mov.w	r1, #4294967295
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f7ff ffe7 	bl	8002e52 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002e84:	e7fe      	b.n	8002e84 <_exit+0x12>

08002e86 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b086      	sub	sp, #24
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	60f8      	str	r0, [r7, #12]
 8002e8e:	60b9      	str	r1, [r7, #8]
 8002e90:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e92:	2300      	movs	r3, #0
 8002e94:	617b      	str	r3, [r7, #20]
 8002e96:	e00a      	b.n	8002eae <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002e98:	f3af 8000 	nop.w
 8002e9c:	4601      	mov	r1, r0
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	1c5a      	adds	r2, r3, #1
 8002ea2:	60ba      	str	r2, [r7, #8]
 8002ea4:	b2ca      	uxtb	r2, r1
 8002ea6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	3301      	adds	r3, #1
 8002eac:	617b      	str	r3, [r7, #20]
 8002eae:	697a      	ldr	r2, [r7, #20]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	dbf0      	blt.n	8002e98 <_read+0x12>
	}

return len;
 8002eb6:	687b      	ldr	r3, [r7, #4]
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3718      	adds	r7, #24
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ecc:	2300      	movs	r3, #0
 8002ece:	617b      	str	r3, [r7, #20]
 8002ed0:	e009      	b.n	8002ee6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	1c5a      	adds	r2, r3, #1
 8002ed6:	60ba      	str	r2, [r7, #8]
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	617b      	str	r3, [r7, #20]
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	dbf1      	blt.n	8002ed2 <_write+0x12>
	}
	return len;
 8002eee:	687b      	ldr	r3, [r7, #4]
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3718      	adds	r7, #24
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <_close>:

int _close(int file)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
	return -1;
 8002f00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bc80      	pop	{r7}
 8002f0c:	4770      	bx	lr

08002f0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f0e:	b480      	push	{r7}
 8002f10:	b083      	sub	sp, #12
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
 8002f16:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f1e:	605a      	str	r2, [r3, #4]
	return 0;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bc80      	pop	{r7}
 8002f2a:	4770      	bx	lr

08002f2c <_isatty>:

int _isatty(int file)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
	return 1;
 8002f34:	2301      	movs	r3, #1
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bc80      	pop	{r7}
 8002f3e:	4770      	bx	lr

08002f40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
	return 0;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3714      	adds	r7, #20
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bc80      	pop	{r7}
 8002f56:	4770      	bx	lr

08002f58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b086      	sub	sp, #24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f60:	4a14      	ldr	r2, [pc, #80]	; (8002fb4 <_sbrk+0x5c>)
 8002f62:	4b15      	ldr	r3, [pc, #84]	; (8002fb8 <_sbrk+0x60>)
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f6c:	4b13      	ldr	r3, [pc, #76]	; (8002fbc <_sbrk+0x64>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d102      	bne.n	8002f7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f74:	4b11      	ldr	r3, [pc, #68]	; (8002fbc <_sbrk+0x64>)
 8002f76:	4a12      	ldr	r2, [pc, #72]	; (8002fc0 <_sbrk+0x68>)
 8002f78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f7a:	4b10      	ldr	r3, [pc, #64]	; (8002fbc <_sbrk+0x64>)
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4413      	add	r3, r2
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d207      	bcs.n	8002f98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f88:	f003 f92e 	bl	80061e8 <__errno>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	220c      	movs	r2, #12
 8002f90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f92:	f04f 33ff 	mov.w	r3, #4294967295
 8002f96:	e009      	b.n	8002fac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f98:	4b08      	ldr	r3, [pc, #32]	; (8002fbc <_sbrk+0x64>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f9e:	4b07      	ldr	r3, [pc, #28]	; (8002fbc <_sbrk+0x64>)
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	4a05      	ldr	r2, [pc, #20]	; (8002fbc <_sbrk+0x64>)
 8002fa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002faa:	68fb      	ldr	r3, [r7, #12]
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3718      	adds	r7, #24
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	20005000 	.word	0x20005000
 8002fb8:	00000400 	.word	0x00000400
 8002fbc:	20000708 	.word	0x20000708
 8002fc0:	20000768 	.word	0x20000768

08002fc4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fc8:	bf00      	nop
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bc80      	pop	{r7}
 8002fce:	4770      	bx	lr

08002fd0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002fd4:	4b11      	ldr	r3, [pc, #68]	; (800301c <MX_USART2_UART_Init+0x4c>)
 8002fd6:	4a12      	ldr	r2, [pc, #72]	; (8003020 <MX_USART2_UART_Init+0x50>)
 8002fd8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002fda:	4b10      	ldr	r3, [pc, #64]	; (800301c <MX_USART2_UART_Init+0x4c>)
 8002fdc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002fe0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002fe2:	4b0e      	ldr	r3, [pc, #56]	; (800301c <MX_USART2_UART_Init+0x4c>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002fe8:	4b0c      	ldr	r3, [pc, #48]	; (800301c <MX_USART2_UART_Init+0x4c>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002fee:	4b0b      	ldr	r3, [pc, #44]	; (800301c <MX_USART2_UART_Init+0x4c>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ff4:	4b09      	ldr	r3, [pc, #36]	; (800301c <MX_USART2_UART_Init+0x4c>)
 8002ff6:	220c      	movs	r2, #12
 8002ff8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ffa:	4b08      	ldr	r3, [pc, #32]	; (800301c <MX_USART2_UART_Init+0x4c>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003000:	4b06      	ldr	r3, [pc, #24]	; (800301c <MX_USART2_UART_Init+0x4c>)
 8003002:	2200      	movs	r2, #0
 8003004:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003006:	4805      	ldr	r0, [pc, #20]	; (800301c <MX_USART2_UART_Init+0x4c>)
 8003008:	f002 fc92 	bl	8005930 <HAL_UART_Init>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003012:	f7ff fe2d 	bl	8002c70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003016:	bf00      	nop
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	2000070c 	.word	0x2000070c
 8003020:	40004400 	.word	0x40004400

08003024 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b088      	sub	sp, #32
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800302c:	f107 0310 	add.w	r3, r7, #16
 8003030:	2200      	movs	r2, #0
 8003032:	601a      	str	r2, [r3, #0]
 8003034:	605a      	str	r2, [r3, #4]
 8003036:	609a      	str	r2, [r3, #8]
 8003038:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a1f      	ldr	r2, [pc, #124]	; (80030bc <HAL_UART_MspInit+0x98>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d137      	bne.n	80030b4 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003044:	4b1e      	ldr	r3, [pc, #120]	; (80030c0 <HAL_UART_MspInit+0x9c>)
 8003046:	69db      	ldr	r3, [r3, #28]
 8003048:	4a1d      	ldr	r2, [pc, #116]	; (80030c0 <HAL_UART_MspInit+0x9c>)
 800304a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800304e:	61d3      	str	r3, [r2, #28]
 8003050:	4b1b      	ldr	r3, [pc, #108]	; (80030c0 <HAL_UART_MspInit+0x9c>)
 8003052:	69db      	ldr	r3, [r3, #28]
 8003054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003058:	60fb      	str	r3, [r7, #12]
 800305a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800305c:	4b18      	ldr	r3, [pc, #96]	; (80030c0 <HAL_UART_MspInit+0x9c>)
 800305e:	699b      	ldr	r3, [r3, #24]
 8003060:	4a17      	ldr	r2, [pc, #92]	; (80030c0 <HAL_UART_MspInit+0x9c>)
 8003062:	f043 0304 	orr.w	r3, r3, #4
 8003066:	6193      	str	r3, [r2, #24]
 8003068:	4b15      	ldr	r3, [pc, #84]	; (80030c0 <HAL_UART_MspInit+0x9c>)
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	f003 0304 	and.w	r3, r3, #4
 8003070:	60bb      	str	r3, [r7, #8]
 8003072:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003074:	2304      	movs	r3, #4
 8003076:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003078:	2302      	movs	r3, #2
 800307a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800307c:	2303      	movs	r3, #3
 800307e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003080:	f107 0310 	add.w	r3, r7, #16
 8003084:	4619      	mov	r1, r3
 8003086:	480f      	ldr	r0, [pc, #60]	; (80030c4 <HAL_UART_MspInit+0xa0>)
 8003088:	f000 fa88 	bl	800359c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800308c:	2308      	movs	r3, #8
 800308e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003090:	2300      	movs	r3, #0
 8003092:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003094:	2300      	movs	r3, #0
 8003096:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003098:	f107 0310 	add.w	r3, r7, #16
 800309c:	4619      	mov	r1, r3
 800309e:	4809      	ldr	r0, [pc, #36]	; (80030c4 <HAL_UART_MspInit+0xa0>)
 80030a0:	f000 fa7c 	bl	800359c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80030a4:	2200      	movs	r2, #0
 80030a6:	2100      	movs	r1, #0
 80030a8:	2026      	movs	r0, #38	; 0x26
 80030aa:	f000 f990 	bl	80033ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80030ae:	2026      	movs	r0, #38	; 0x26
 80030b0:	f000 f9a9 	bl	8003406 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80030b4:	bf00      	nop
 80030b6:	3720      	adds	r7, #32
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	40004400 	.word	0x40004400
 80030c0:	40021000 	.word	0x40021000
 80030c4:	40010800 	.word	0x40010800

080030c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80030c8:	480c      	ldr	r0, [pc, #48]	; (80030fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80030ca:	490d      	ldr	r1, [pc, #52]	; (8003100 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80030cc:	4a0d      	ldr	r2, [pc, #52]	; (8003104 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80030ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030d0:	e002      	b.n	80030d8 <LoopCopyDataInit>

080030d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030d6:	3304      	adds	r3, #4

080030d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030dc:	d3f9      	bcc.n	80030d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030de:	4a0a      	ldr	r2, [pc, #40]	; (8003108 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80030e0:	4c0a      	ldr	r4, [pc, #40]	; (800310c <LoopFillZerobss+0x22>)
  movs r3, #0
 80030e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030e4:	e001      	b.n	80030ea <LoopFillZerobss>

080030e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030e8:	3204      	adds	r2, #4

080030ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030ec:	d3fb      	bcc.n	80030e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80030ee:	f7ff ff69 	bl	8002fc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030f2:	f003 f87f 	bl	80061f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80030f6:	f7fe fe3f 	bl	8001d78 <main>
  bx lr
 80030fa:	4770      	bx	lr
  ldr r0, =_sdata
 80030fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003100:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8003104:	080099f8 	.word	0x080099f8
  ldr r2, =_sbss
 8003108:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800310c:	20000764 	.word	0x20000764

08003110 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003110:	e7fe      	b.n	8003110 <ADC1_2_IRQHandler>
	...

08003114 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003118:	4b08      	ldr	r3, [pc, #32]	; (800313c <HAL_Init+0x28>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a07      	ldr	r2, [pc, #28]	; (800313c <HAL_Init+0x28>)
 800311e:	f043 0310 	orr.w	r3, r3, #16
 8003122:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003124:	2003      	movs	r0, #3
 8003126:	f000 f947 	bl	80033b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800312a:	200f      	movs	r0, #15
 800312c:	f000 f808 	bl	8003140 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003130:	f7ff fe24 	bl	8002d7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	40022000 	.word	0x40022000

08003140 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003148:	4b12      	ldr	r3, [pc, #72]	; (8003194 <HAL_InitTick+0x54>)
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	4b12      	ldr	r3, [pc, #72]	; (8003198 <HAL_InitTick+0x58>)
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	4619      	mov	r1, r3
 8003152:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003156:	fbb3 f3f1 	udiv	r3, r3, r1
 800315a:	fbb2 f3f3 	udiv	r3, r2, r3
 800315e:	4618      	mov	r0, r3
 8003160:	f000 f95f 	bl	8003422 <HAL_SYSTICK_Config>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e00e      	b.n	800318c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2b0f      	cmp	r3, #15
 8003172:	d80a      	bhi.n	800318a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003174:	2200      	movs	r2, #0
 8003176:	6879      	ldr	r1, [r7, #4]
 8003178:	f04f 30ff 	mov.w	r0, #4294967295
 800317c:	f000 f927 	bl	80033ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003180:	4a06      	ldr	r2, [pc, #24]	; (800319c <HAL_InitTick+0x5c>)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003186:	2300      	movs	r3, #0
 8003188:	e000      	b.n	800318c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
}
 800318c:	4618      	mov	r0, r3
 800318e:	3708      	adds	r7, #8
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}
 8003194:	20000000 	.word	0x20000000
 8003198:	20000008 	.word	0x20000008
 800319c:	20000004 	.word	0x20000004

080031a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031a0:	b480      	push	{r7}
 80031a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031a4:	4b05      	ldr	r3, [pc, #20]	; (80031bc <HAL_IncTick+0x1c>)
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	461a      	mov	r2, r3
 80031aa:	4b05      	ldr	r3, [pc, #20]	; (80031c0 <HAL_IncTick+0x20>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4413      	add	r3, r2
 80031b0:	4a03      	ldr	r2, [pc, #12]	; (80031c0 <HAL_IncTick+0x20>)
 80031b2:	6013      	str	r3, [r2, #0]
}
 80031b4:	bf00      	nop
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bc80      	pop	{r7}
 80031ba:	4770      	bx	lr
 80031bc:	20000008 	.word	0x20000008
 80031c0:	20000750 	.word	0x20000750

080031c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
  return uwTick;
 80031c8:	4b02      	ldr	r3, [pc, #8]	; (80031d4 <HAL_GetTick+0x10>)
 80031ca:	681b      	ldr	r3, [r3, #0]
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bc80      	pop	{r7}
 80031d2:	4770      	bx	lr
 80031d4:	20000750 	.word	0x20000750

080031d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031e0:	f7ff fff0 	bl	80031c4 <HAL_GetTick>
 80031e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f0:	d005      	beq.n	80031fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031f2:	4b0a      	ldr	r3, [pc, #40]	; (800321c <HAL_Delay+0x44>)
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	461a      	mov	r2, r3
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	4413      	add	r3, r2
 80031fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80031fe:	bf00      	nop
 8003200:	f7ff ffe0 	bl	80031c4 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	429a      	cmp	r2, r3
 800320e:	d8f7      	bhi.n	8003200 <HAL_Delay+0x28>
  {
  }
}
 8003210:	bf00      	nop
 8003212:	bf00      	nop
 8003214:	3710      	adds	r7, #16
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	20000008 	.word	0x20000008

08003220 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f003 0307 	and.w	r3, r3, #7
 800322e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003230:	4b0c      	ldr	r3, [pc, #48]	; (8003264 <__NVIC_SetPriorityGrouping+0x44>)
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003236:	68ba      	ldr	r2, [r7, #8]
 8003238:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800323c:	4013      	ands	r3, r2
 800323e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003248:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800324c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003250:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003252:	4a04      	ldr	r2, [pc, #16]	; (8003264 <__NVIC_SetPriorityGrouping+0x44>)
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	60d3      	str	r3, [r2, #12]
}
 8003258:	bf00      	nop
 800325a:	3714      	adds	r7, #20
 800325c:	46bd      	mov	sp, r7
 800325e:	bc80      	pop	{r7}
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	e000ed00 	.word	0xe000ed00

08003268 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003268:	b480      	push	{r7}
 800326a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800326c:	4b04      	ldr	r3, [pc, #16]	; (8003280 <__NVIC_GetPriorityGrouping+0x18>)
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	0a1b      	lsrs	r3, r3, #8
 8003272:	f003 0307 	and.w	r3, r3, #7
}
 8003276:	4618      	mov	r0, r3
 8003278:	46bd      	mov	sp, r7
 800327a:	bc80      	pop	{r7}
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	e000ed00 	.word	0xe000ed00

08003284 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	4603      	mov	r3, r0
 800328c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800328e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003292:	2b00      	cmp	r3, #0
 8003294:	db0b      	blt.n	80032ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003296:	79fb      	ldrb	r3, [r7, #7]
 8003298:	f003 021f 	and.w	r2, r3, #31
 800329c:	4906      	ldr	r1, [pc, #24]	; (80032b8 <__NVIC_EnableIRQ+0x34>)
 800329e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a2:	095b      	lsrs	r3, r3, #5
 80032a4:	2001      	movs	r0, #1
 80032a6:	fa00 f202 	lsl.w	r2, r0, r2
 80032aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032ae:	bf00      	nop
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bc80      	pop	{r7}
 80032b6:	4770      	bx	lr
 80032b8:	e000e100 	.word	0xe000e100

080032bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	4603      	mov	r3, r0
 80032c4:	6039      	str	r1, [r7, #0]
 80032c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	db0a      	blt.n	80032e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	b2da      	uxtb	r2, r3
 80032d4:	490c      	ldr	r1, [pc, #48]	; (8003308 <__NVIC_SetPriority+0x4c>)
 80032d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032da:	0112      	lsls	r2, r2, #4
 80032dc:	b2d2      	uxtb	r2, r2
 80032de:	440b      	add	r3, r1
 80032e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032e4:	e00a      	b.n	80032fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	b2da      	uxtb	r2, r3
 80032ea:	4908      	ldr	r1, [pc, #32]	; (800330c <__NVIC_SetPriority+0x50>)
 80032ec:	79fb      	ldrb	r3, [r7, #7]
 80032ee:	f003 030f 	and.w	r3, r3, #15
 80032f2:	3b04      	subs	r3, #4
 80032f4:	0112      	lsls	r2, r2, #4
 80032f6:	b2d2      	uxtb	r2, r2
 80032f8:	440b      	add	r3, r1
 80032fa:	761a      	strb	r2, [r3, #24]
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	bc80      	pop	{r7}
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	e000e100 	.word	0xe000e100
 800330c:	e000ed00 	.word	0xe000ed00

08003310 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003310:	b480      	push	{r7}
 8003312:	b089      	sub	sp, #36	; 0x24
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f003 0307 	and.w	r3, r3, #7
 8003322:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	f1c3 0307 	rsb	r3, r3, #7
 800332a:	2b04      	cmp	r3, #4
 800332c:	bf28      	it	cs
 800332e:	2304      	movcs	r3, #4
 8003330:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	3304      	adds	r3, #4
 8003336:	2b06      	cmp	r3, #6
 8003338:	d902      	bls.n	8003340 <NVIC_EncodePriority+0x30>
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	3b03      	subs	r3, #3
 800333e:	e000      	b.n	8003342 <NVIC_EncodePriority+0x32>
 8003340:	2300      	movs	r3, #0
 8003342:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003344:	f04f 32ff 	mov.w	r2, #4294967295
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	fa02 f303 	lsl.w	r3, r2, r3
 800334e:	43da      	mvns	r2, r3
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	401a      	ands	r2, r3
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003358:	f04f 31ff 	mov.w	r1, #4294967295
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	fa01 f303 	lsl.w	r3, r1, r3
 8003362:	43d9      	mvns	r1, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003368:	4313      	orrs	r3, r2
         );
}
 800336a:	4618      	mov	r0, r3
 800336c:	3724      	adds	r7, #36	; 0x24
 800336e:	46bd      	mov	sp, r7
 8003370:	bc80      	pop	{r7}
 8003372:	4770      	bx	lr

08003374 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	3b01      	subs	r3, #1
 8003380:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003384:	d301      	bcc.n	800338a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003386:	2301      	movs	r3, #1
 8003388:	e00f      	b.n	80033aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800338a:	4a0a      	ldr	r2, [pc, #40]	; (80033b4 <SysTick_Config+0x40>)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	3b01      	subs	r3, #1
 8003390:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003392:	210f      	movs	r1, #15
 8003394:	f04f 30ff 	mov.w	r0, #4294967295
 8003398:	f7ff ff90 	bl	80032bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800339c:	4b05      	ldr	r3, [pc, #20]	; (80033b4 <SysTick_Config+0x40>)
 800339e:	2200      	movs	r2, #0
 80033a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033a2:	4b04      	ldr	r3, [pc, #16]	; (80033b4 <SysTick_Config+0x40>)
 80033a4:	2207      	movs	r2, #7
 80033a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	e000e010 	.word	0xe000e010

080033b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f7ff ff2d 	bl	8003220 <__NVIC_SetPriorityGrouping>
}
 80033c6:	bf00      	nop
 80033c8:	3708      	adds	r7, #8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b086      	sub	sp, #24
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	4603      	mov	r3, r0
 80033d6:	60b9      	str	r1, [r7, #8]
 80033d8:	607a      	str	r2, [r7, #4]
 80033da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033dc:	2300      	movs	r3, #0
 80033de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033e0:	f7ff ff42 	bl	8003268 <__NVIC_GetPriorityGrouping>
 80033e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	68b9      	ldr	r1, [r7, #8]
 80033ea:	6978      	ldr	r0, [r7, #20]
 80033ec:	f7ff ff90 	bl	8003310 <NVIC_EncodePriority>
 80033f0:	4602      	mov	r2, r0
 80033f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033f6:	4611      	mov	r1, r2
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7ff ff5f 	bl	80032bc <__NVIC_SetPriority>
}
 80033fe:	bf00      	nop
 8003400:	3718      	adds	r7, #24
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003406:	b580      	push	{r7, lr}
 8003408:	b082      	sub	sp, #8
 800340a:	af00      	add	r7, sp, #0
 800340c:	4603      	mov	r3, r0
 800340e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003414:	4618      	mov	r0, r3
 8003416:	f7ff ff35 	bl	8003284 <__NVIC_EnableIRQ>
}
 800341a:	bf00      	nop
 800341c:	3708      	adds	r7, #8
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}

08003422 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003422:	b580      	push	{r7, lr}
 8003424:	b082      	sub	sp, #8
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f7ff ffa2 	bl	8003374 <SysTick_Config>
 8003430:	4603      	mov	r3, r0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3708      	adds	r7, #8
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800343a:	b480      	push	{r7}
 800343c:	b085      	sub	sp, #20
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003442:	2300      	movs	r3, #0
 8003444:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800344c:	2b02      	cmp	r3, #2
 800344e:	d008      	beq.n	8003462 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2204      	movs	r2, #4
 8003454:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e020      	b.n	80034a4 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f022 020e 	bic.w	r2, r2, #14
 8003470:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 0201 	bic.w	r2, r2, #1
 8003480:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800348a:	2101      	movs	r1, #1
 800348c:	fa01 f202 	lsl.w	r2, r1, r2
 8003490:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80034a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3714      	adds	r7, #20
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bc80      	pop	{r7}
 80034ac:	4770      	bx	lr
	...

080034b0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034b8:	2300      	movs	r3, #0
 80034ba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d005      	beq.n	80034d2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2204      	movs	r2, #4
 80034ca:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	73fb      	strb	r3, [r7, #15]
 80034d0:	e051      	b.n	8003576 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f022 020e 	bic.w	r2, r2, #14
 80034e0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f022 0201 	bic.w	r2, r2, #1
 80034f0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a22      	ldr	r2, [pc, #136]	; (8003580 <HAL_DMA_Abort_IT+0xd0>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d029      	beq.n	8003550 <HAL_DMA_Abort_IT+0xa0>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a20      	ldr	r2, [pc, #128]	; (8003584 <HAL_DMA_Abort_IT+0xd4>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d022      	beq.n	800354c <HAL_DMA_Abort_IT+0x9c>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a1f      	ldr	r2, [pc, #124]	; (8003588 <HAL_DMA_Abort_IT+0xd8>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d01a      	beq.n	8003546 <HAL_DMA_Abort_IT+0x96>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a1d      	ldr	r2, [pc, #116]	; (800358c <HAL_DMA_Abort_IT+0xdc>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d012      	beq.n	8003540 <HAL_DMA_Abort_IT+0x90>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a1c      	ldr	r2, [pc, #112]	; (8003590 <HAL_DMA_Abort_IT+0xe0>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d00a      	beq.n	800353a <HAL_DMA_Abort_IT+0x8a>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a1a      	ldr	r2, [pc, #104]	; (8003594 <HAL_DMA_Abort_IT+0xe4>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d102      	bne.n	8003534 <HAL_DMA_Abort_IT+0x84>
 800352e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003532:	e00e      	b.n	8003552 <HAL_DMA_Abort_IT+0xa2>
 8003534:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003538:	e00b      	b.n	8003552 <HAL_DMA_Abort_IT+0xa2>
 800353a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800353e:	e008      	b.n	8003552 <HAL_DMA_Abort_IT+0xa2>
 8003540:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003544:	e005      	b.n	8003552 <HAL_DMA_Abort_IT+0xa2>
 8003546:	f44f 7380 	mov.w	r3, #256	; 0x100
 800354a:	e002      	b.n	8003552 <HAL_DMA_Abort_IT+0xa2>
 800354c:	2310      	movs	r3, #16
 800354e:	e000      	b.n	8003552 <HAL_DMA_Abort_IT+0xa2>
 8003550:	2301      	movs	r3, #1
 8003552:	4a11      	ldr	r2, [pc, #68]	; (8003598 <HAL_DMA_Abort_IT+0xe8>)
 8003554:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2201      	movs	r2, #1
 800355a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800356a:	2b00      	cmp	r3, #0
 800356c:	d003      	beq.n	8003576 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	4798      	blx	r3
    } 
  }
  return status;
 8003576:	7bfb      	ldrb	r3, [r7, #15]
}
 8003578:	4618      	mov	r0, r3
 800357a:	3710      	adds	r7, #16
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	40020008 	.word	0x40020008
 8003584:	4002001c 	.word	0x4002001c
 8003588:	40020030 	.word	0x40020030
 800358c:	40020044 	.word	0x40020044
 8003590:	40020058 	.word	0x40020058
 8003594:	4002006c 	.word	0x4002006c
 8003598:	40020000 	.word	0x40020000

0800359c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800359c:	b480      	push	{r7}
 800359e:	b08b      	sub	sp, #44	; 0x2c
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035a6:	2300      	movs	r3, #0
 80035a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80035aa:	2300      	movs	r3, #0
 80035ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035ae:	e169      	b.n	8003884 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80035b0:	2201      	movs	r2, #1
 80035b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b4:	fa02 f303 	lsl.w	r3, r2, r3
 80035b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	69fa      	ldr	r2, [r7, #28]
 80035c0:	4013      	ands	r3, r2
 80035c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	f040 8158 	bne.w	800387e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	4a9a      	ldr	r2, [pc, #616]	; (800383c <HAL_GPIO_Init+0x2a0>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d05e      	beq.n	8003696 <HAL_GPIO_Init+0xfa>
 80035d8:	4a98      	ldr	r2, [pc, #608]	; (800383c <HAL_GPIO_Init+0x2a0>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d875      	bhi.n	80036ca <HAL_GPIO_Init+0x12e>
 80035de:	4a98      	ldr	r2, [pc, #608]	; (8003840 <HAL_GPIO_Init+0x2a4>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d058      	beq.n	8003696 <HAL_GPIO_Init+0xfa>
 80035e4:	4a96      	ldr	r2, [pc, #600]	; (8003840 <HAL_GPIO_Init+0x2a4>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d86f      	bhi.n	80036ca <HAL_GPIO_Init+0x12e>
 80035ea:	4a96      	ldr	r2, [pc, #600]	; (8003844 <HAL_GPIO_Init+0x2a8>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d052      	beq.n	8003696 <HAL_GPIO_Init+0xfa>
 80035f0:	4a94      	ldr	r2, [pc, #592]	; (8003844 <HAL_GPIO_Init+0x2a8>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d869      	bhi.n	80036ca <HAL_GPIO_Init+0x12e>
 80035f6:	4a94      	ldr	r2, [pc, #592]	; (8003848 <HAL_GPIO_Init+0x2ac>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d04c      	beq.n	8003696 <HAL_GPIO_Init+0xfa>
 80035fc:	4a92      	ldr	r2, [pc, #584]	; (8003848 <HAL_GPIO_Init+0x2ac>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d863      	bhi.n	80036ca <HAL_GPIO_Init+0x12e>
 8003602:	4a92      	ldr	r2, [pc, #584]	; (800384c <HAL_GPIO_Init+0x2b0>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d046      	beq.n	8003696 <HAL_GPIO_Init+0xfa>
 8003608:	4a90      	ldr	r2, [pc, #576]	; (800384c <HAL_GPIO_Init+0x2b0>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d85d      	bhi.n	80036ca <HAL_GPIO_Init+0x12e>
 800360e:	2b12      	cmp	r3, #18
 8003610:	d82a      	bhi.n	8003668 <HAL_GPIO_Init+0xcc>
 8003612:	2b12      	cmp	r3, #18
 8003614:	d859      	bhi.n	80036ca <HAL_GPIO_Init+0x12e>
 8003616:	a201      	add	r2, pc, #4	; (adr r2, 800361c <HAL_GPIO_Init+0x80>)
 8003618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800361c:	08003697 	.word	0x08003697
 8003620:	08003671 	.word	0x08003671
 8003624:	08003683 	.word	0x08003683
 8003628:	080036c5 	.word	0x080036c5
 800362c:	080036cb 	.word	0x080036cb
 8003630:	080036cb 	.word	0x080036cb
 8003634:	080036cb 	.word	0x080036cb
 8003638:	080036cb 	.word	0x080036cb
 800363c:	080036cb 	.word	0x080036cb
 8003640:	080036cb 	.word	0x080036cb
 8003644:	080036cb 	.word	0x080036cb
 8003648:	080036cb 	.word	0x080036cb
 800364c:	080036cb 	.word	0x080036cb
 8003650:	080036cb 	.word	0x080036cb
 8003654:	080036cb 	.word	0x080036cb
 8003658:	080036cb 	.word	0x080036cb
 800365c:	080036cb 	.word	0x080036cb
 8003660:	08003679 	.word	0x08003679
 8003664:	0800368d 	.word	0x0800368d
 8003668:	4a79      	ldr	r2, [pc, #484]	; (8003850 <HAL_GPIO_Init+0x2b4>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d013      	beq.n	8003696 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800366e:	e02c      	b.n	80036ca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	623b      	str	r3, [r7, #32]
          break;
 8003676:	e029      	b.n	80036cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	3304      	adds	r3, #4
 800367e:	623b      	str	r3, [r7, #32]
          break;
 8003680:	e024      	b.n	80036cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	3308      	adds	r3, #8
 8003688:	623b      	str	r3, [r7, #32]
          break;
 800368a:	e01f      	b.n	80036cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	330c      	adds	r3, #12
 8003692:	623b      	str	r3, [r7, #32]
          break;
 8003694:	e01a      	b.n	80036cc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d102      	bne.n	80036a4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800369e:	2304      	movs	r3, #4
 80036a0:	623b      	str	r3, [r7, #32]
          break;
 80036a2:	e013      	b.n	80036cc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d105      	bne.n	80036b8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80036ac:	2308      	movs	r3, #8
 80036ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	69fa      	ldr	r2, [r7, #28]
 80036b4:	611a      	str	r2, [r3, #16]
          break;
 80036b6:	e009      	b.n	80036cc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80036b8:	2308      	movs	r3, #8
 80036ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	69fa      	ldr	r2, [r7, #28]
 80036c0:	615a      	str	r2, [r3, #20]
          break;
 80036c2:	e003      	b.n	80036cc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80036c4:	2300      	movs	r3, #0
 80036c6:	623b      	str	r3, [r7, #32]
          break;
 80036c8:	e000      	b.n	80036cc <HAL_GPIO_Init+0x130>
          break;
 80036ca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	2bff      	cmp	r3, #255	; 0xff
 80036d0:	d801      	bhi.n	80036d6 <HAL_GPIO_Init+0x13a>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	e001      	b.n	80036da <HAL_GPIO_Init+0x13e>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	3304      	adds	r3, #4
 80036da:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	2bff      	cmp	r3, #255	; 0xff
 80036e0:	d802      	bhi.n	80036e8 <HAL_GPIO_Init+0x14c>
 80036e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	e002      	b.n	80036ee <HAL_GPIO_Init+0x152>
 80036e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ea:	3b08      	subs	r3, #8
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	210f      	movs	r1, #15
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	fa01 f303 	lsl.w	r3, r1, r3
 80036fc:	43db      	mvns	r3, r3
 80036fe:	401a      	ands	r2, r3
 8003700:	6a39      	ldr	r1, [r7, #32]
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	fa01 f303 	lsl.w	r3, r1, r3
 8003708:	431a      	orrs	r2, r3
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003716:	2b00      	cmp	r3, #0
 8003718:	f000 80b1 	beq.w	800387e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800371c:	4b4d      	ldr	r3, [pc, #308]	; (8003854 <HAL_GPIO_Init+0x2b8>)
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	4a4c      	ldr	r2, [pc, #304]	; (8003854 <HAL_GPIO_Init+0x2b8>)
 8003722:	f043 0301 	orr.w	r3, r3, #1
 8003726:	6193      	str	r3, [r2, #24]
 8003728:	4b4a      	ldr	r3, [pc, #296]	; (8003854 <HAL_GPIO_Init+0x2b8>)
 800372a:	699b      	ldr	r3, [r3, #24]
 800372c:	f003 0301 	and.w	r3, r3, #1
 8003730:	60bb      	str	r3, [r7, #8]
 8003732:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003734:	4a48      	ldr	r2, [pc, #288]	; (8003858 <HAL_GPIO_Init+0x2bc>)
 8003736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003738:	089b      	lsrs	r3, r3, #2
 800373a:	3302      	adds	r3, #2
 800373c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003740:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003744:	f003 0303 	and.w	r3, r3, #3
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	220f      	movs	r2, #15
 800374c:	fa02 f303 	lsl.w	r3, r2, r3
 8003750:	43db      	mvns	r3, r3
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	4013      	ands	r3, r2
 8003756:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a40      	ldr	r2, [pc, #256]	; (800385c <HAL_GPIO_Init+0x2c0>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d013      	beq.n	8003788 <HAL_GPIO_Init+0x1ec>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a3f      	ldr	r2, [pc, #252]	; (8003860 <HAL_GPIO_Init+0x2c4>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d00d      	beq.n	8003784 <HAL_GPIO_Init+0x1e8>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	4a3e      	ldr	r2, [pc, #248]	; (8003864 <HAL_GPIO_Init+0x2c8>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d007      	beq.n	8003780 <HAL_GPIO_Init+0x1e4>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4a3d      	ldr	r2, [pc, #244]	; (8003868 <HAL_GPIO_Init+0x2cc>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d101      	bne.n	800377c <HAL_GPIO_Init+0x1e0>
 8003778:	2303      	movs	r3, #3
 800377a:	e006      	b.n	800378a <HAL_GPIO_Init+0x1ee>
 800377c:	2304      	movs	r3, #4
 800377e:	e004      	b.n	800378a <HAL_GPIO_Init+0x1ee>
 8003780:	2302      	movs	r3, #2
 8003782:	e002      	b.n	800378a <HAL_GPIO_Init+0x1ee>
 8003784:	2301      	movs	r3, #1
 8003786:	e000      	b.n	800378a <HAL_GPIO_Init+0x1ee>
 8003788:	2300      	movs	r3, #0
 800378a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800378c:	f002 0203 	and.w	r2, r2, #3
 8003790:	0092      	lsls	r2, r2, #2
 8003792:	4093      	lsls	r3, r2
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	4313      	orrs	r3, r2
 8003798:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800379a:	492f      	ldr	r1, [pc, #188]	; (8003858 <HAL_GPIO_Init+0x2bc>)
 800379c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379e:	089b      	lsrs	r3, r3, #2
 80037a0:	3302      	adds	r3, #2
 80037a2:	68fa      	ldr	r2, [r7, #12]
 80037a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d006      	beq.n	80037c2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80037b4:	4b2d      	ldr	r3, [pc, #180]	; (800386c <HAL_GPIO_Init+0x2d0>)
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	492c      	ldr	r1, [pc, #176]	; (800386c <HAL_GPIO_Init+0x2d0>)
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	4313      	orrs	r3, r2
 80037be:	600b      	str	r3, [r1, #0]
 80037c0:	e006      	b.n	80037d0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80037c2:	4b2a      	ldr	r3, [pc, #168]	; (800386c <HAL_GPIO_Init+0x2d0>)
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	43db      	mvns	r3, r3
 80037ca:	4928      	ldr	r1, [pc, #160]	; (800386c <HAL_GPIO_Init+0x2d0>)
 80037cc:	4013      	ands	r3, r2
 80037ce:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d006      	beq.n	80037ea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80037dc:	4b23      	ldr	r3, [pc, #140]	; (800386c <HAL_GPIO_Init+0x2d0>)
 80037de:	685a      	ldr	r2, [r3, #4]
 80037e0:	4922      	ldr	r1, [pc, #136]	; (800386c <HAL_GPIO_Init+0x2d0>)
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	604b      	str	r3, [r1, #4]
 80037e8:	e006      	b.n	80037f8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80037ea:	4b20      	ldr	r3, [pc, #128]	; (800386c <HAL_GPIO_Init+0x2d0>)
 80037ec:	685a      	ldr	r2, [r3, #4]
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	43db      	mvns	r3, r3
 80037f2:	491e      	ldr	r1, [pc, #120]	; (800386c <HAL_GPIO_Init+0x2d0>)
 80037f4:	4013      	ands	r3, r2
 80037f6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d006      	beq.n	8003812 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003804:	4b19      	ldr	r3, [pc, #100]	; (800386c <HAL_GPIO_Init+0x2d0>)
 8003806:	689a      	ldr	r2, [r3, #8]
 8003808:	4918      	ldr	r1, [pc, #96]	; (800386c <HAL_GPIO_Init+0x2d0>)
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	4313      	orrs	r3, r2
 800380e:	608b      	str	r3, [r1, #8]
 8003810:	e006      	b.n	8003820 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003812:	4b16      	ldr	r3, [pc, #88]	; (800386c <HAL_GPIO_Init+0x2d0>)
 8003814:	689a      	ldr	r2, [r3, #8]
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	43db      	mvns	r3, r3
 800381a:	4914      	ldr	r1, [pc, #80]	; (800386c <HAL_GPIO_Init+0x2d0>)
 800381c:	4013      	ands	r3, r2
 800381e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d021      	beq.n	8003870 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800382c:	4b0f      	ldr	r3, [pc, #60]	; (800386c <HAL_GPIO_Init+0x2d0>)
 800382e:	68da      	ldr	r2, [r3, #12]
 8003830:	490e      	ldr	r1, [pc, #56]	; (800386c <HAL_GPIO_Init+0x2d0>)
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	4313      	orrs	r3, r2
 8003836:	60cb      	str	r3, [r1, #12]
 8003838:	e021      	b.n	800387e <HAL_GPIO_Init+0x2e2>
 800383a:	bf00      	nop
 800383c:	10320000 	.word	0x10320000
 8003840:	10310000 	.word	0x10310000
 8003844:	10220000 	.word	0x10220000
 8003848:	10210000 	.word	0x10210000
 800384c:	10120000 	.word	0x10120000
 8003850:	10110000 	.word	0x10110000
 8003854:	40021000 	.word	0x40021000
 8003858:	40010000 	.word	0x40010000
 800385c:	40010800 	.word	0x40010800
 8003860:	40010c00 	.word	0x40010c00
 8003864:	40011000 	.word	0x40011000
 8003868:	40011400 	.word	0x40011400
 800386c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003870:	4b0b      	ldr	r3, [pc, #44]	; (80038a0 <HAL_GPIO_Init+0x304>)
 8003872:	68da      	ldr	r2, [r3, #12]
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	43db      	mvns	r3, r3
 8003878:	4909      	ldr	r1, [pc, #36]	; (80038a0 <HAL_GPIO_Init+0x304>)
 800387a:	4013      	ands	r3, r2
 800387c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800387e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003880:	3301      	adds	r3, #1
 8003882:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388a:	fa22 f303 	lsr.w	r3, r2, r3
 800388e:	2b00      	cmp	r3, #0
 8003890:	f47f ae8e 	bne.w	80035b0 <HAL_GPIO_Init+0x14>
  }
}
 8003894:	bf00      	nop
 8003896:	bf00      	nop
 8003898:	372c      	adds	r7, #44	; 0x2c
 800389a:	46bd      	mov	sp, r7
 800389c:	bc80      	pop	{r7}
 800389e:	4770      	bx	lr
 80038a0:	40010400 	.word	0x40010400

080038a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b085      	sub	sp, #20
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	460b      	mov	r3, r1
 80038ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689a      	ldr	r2, [r3, #8]
 80038b4:	887b      	ldrh	r3, [r7, #2]
 80038b6:	4013      	ands	r3, r2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d002      	beq.n	80038c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80038bc:	2301      	movs	r3, #1
 80038be:	73fb      	strb	r3, [r7, #15]
 80038c0:	e001      	b.n	80038c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80038c2:	2300      	movs	r3, #0
 80038c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80038c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3714      	adds	r7, #20
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bc80      	pop	{r7}
 80038d0:	4770      	bx	lr

080038d2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038d2:	b480      	push	{r7}
 80038d4:	b083      	sub	sp, #12
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
 80038da:	460b      	mov	r3, r1
 80038dc:	807b      	strh	r3, [r7, #2]
 80038de:	4613      	mov	r3, r2
 80038e0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038e2:	787b      	ldrb	r3, [r7, #1]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d003      	beq.n	80038f0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038e8:	887a      	ldrh	r2, [r7, #2]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80038ee:	e003      	b.n	80038f8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80038f0:	887b      	ldrh	r3, [r7, #2]
 80038f2:	041a      	lsls	r2, r3, #16
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	611a      	str	r2, [r3, #16]
}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bc80      	pop	{r7}
 8003900:	4770      	bx	lr

08003902 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003902:	b480      	push	{r7}
 8003904:	b085      	sub	sp, #20
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
 800390a:	460b      	mov	r3, r1
 800390c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003914:	887a      	ldrh	r2, [r7, #2]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	4013      	ands	r3, r2
 800391a:	041a      	lsls	r2, r3, #16
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	43d9      	mvns	r1, r3
 8003920:	887b      	ldrh	r3, [r7, #2]
 8003922:	400b      	ands	r3, r1
 8003924:	431a      	orrs	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	611a      	str	r2, [r3, #16]
}
 800392a:	bf00      	nop
 800392c:	3714      	adds	r7, #20
 800392e:	46bd      	mov	sp, r7
 8003930:	bc80      	pop	{r7}
 8003932:	4770      	bx	lr

08003934 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e12b      	b.n	8003b9e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d106      	bne.n	8003960 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f7fe f9a0 	bl	8001ca0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2224      	movs	r2, #36	; 0x24
 8003964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f022 0201 	bic.w	r2, r2, #1
 8003976:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003986:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003996:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003998:	f001 fb6e 	bl	8005078 <HAL_RCC_GetPCLK1Freq>
 800399c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	4a81      	ldr	r2, [pc, #516]	; (8003ba8 <HAL_I2C_Init+0x274>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d807      	bhi.n	80039b8 <HAL_I2C_Init+0x84>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	4a80      	ldr	r2, [pc, #512]	; (8003bac <HAL_I2C_Init+0x278>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	bf94      	ite	ls
 80039b0:	2301      	movls	r3, #1
 80039b2:	2300      	movhi	r3, #0
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	e006      	b.n	80039c6 <HAL_I2C_Init+0x92>
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	4a7d      	ldr	r2, [pc, #500]	; (8003bb0 <HAL_I2C_Init+0x27c>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	bf94      	ite	ls
 80039c0:	2301      	movls	r3, #1
 80039c2:	2300      	movhi	r3, #0
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d001      	beq.n	80039ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e0e7      	b.n	8003b9e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	4a78      	ldr	r2, [pc, #480]	; (8003bb4 <HAL_I2C_Init+0x280>)
 80039d2:	fba2 2303 	umull	r2, r3, r2, r3
 80039d6:	0c9b      	lsrs	r3, r3, #18
 80039d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68ba      	ldr	r2, [r7, #8]
 80039ea:	430a      	orrs	r2, r1
 80039ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	4a6a      	ldr	r2, [pc, #424]	; (8003ba8 <HAL_I2C_Init+0x274>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d802      	bhi.n	8003a08 <HAL_I2C_Init+0xd4>
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	3301      	adds	r3, #1
 8003a06:	e009      	b.n	8003a1c <HAL_I2C_Init+0xe8>
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003a0e:	fb02 f303 	mul.w	r3, r2, r3
 8003a12:	4a69      	ldr	r2, [pc, #420]	; (8003bb8 <HAL_I2C_Init+0x284>)
 8003a14:	fba2 2303 	umull	r2, r3, r2, r3
 8003a18:	099b      	lsrs	r3, r3, #6
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	6812      	ldr	r2, [r2, #0]
 8003a20:	430b      	orrs	r3, r1
 8003a22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	69db      	ldr	r3, [r3, #28]
 8003a2a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003a2e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	495c      	ldr	r1, [pc, #368]	; (8003ba8 <HAL_I2C_Init+0x274>)
 8003a38:	428b      	cmp	r3, r1
 8003a3a:	d819      	bhi.n	8003a70 <HAL_I2C_Init+0x13c>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	1e59      	subs	r1, r3, #1
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	005b      	lsls	r3, r3, #1
 8003a46:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a4a:	1c59      	adds	r1, r3, #1
 8003a4c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003a50:	400b      	ands	r3, r1
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d00a      	beq.n	8003a6c <HAL_I2C_Init+0x138>
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	1e59      	subs	r1, r3, #1
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	005b      	lsls	r3, r3, #1
 8003a60:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a64:	3301      	adds	r3, #1
 8003a66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a6a:	e051      	b.n	8003b10 <HAL_I2C_Init+0x1dc>
 8003a6c:	2304      	movs	r3, #4
 8003a6e:	e04f      	b.n	8003b10 <HAL_I2C_Init+0x1dc>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d111      	bne.n	8003a9c <HAL_I2C_Init+0x168>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	1e58      	subs	r0, r3, #1
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6859      	ldr	r1, [r3, #4]
 8003a80:	460b      	mov	r3, r1
 8003a82:	005b      	lsls	r3, r3, #1
 8003a84:	440b      	add	r3, r1
 8003a86:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	bf0c      	ite	eq
 8003a94:	2301      	moveq	r3, #1
 8003a96:	2300      	movne	r3, #0
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	e012      	b.n	8003ac2 <HAL_I2C_Init+0x18e>
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	1e58      	subs	r0, r3, #1
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6859      	ldr	r1, [r3, #4]
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	440b      	add	r3, r1
 8003aaa:	0099      	lsls	r1, r3, #2
 8003aac:	440b      	add	r3, r1
 8003aae:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	bf0c      	ite	eq
 8003abc:	2301      	moveq	r3, #1
 8003abe:	2300      	movne	r3, #0
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d001      	beq.n	8003aca <HAL_I2C_Init+0x196>
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e022      	b.n	8003b10 <HAL_I2C_Init+0x1dc>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d10e      	bne.n	8003af0 <HAL_I2C_Init+0x1bc>
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	1e58      	subs	r0, r3, #1
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6859      	ldr	r1, [r3, #4]
 8003ada:	460b      	mov	r3, r1
 8003adc:	005b      	lsls	r3, r3, #1
 8003ade:	440b      	add	r3, r1
 8003ae0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003aee:	e00f      	b.n	8003b10 <HAL_I2C_Init+0x1dc>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	1e58      	subs	r0, r3, #1
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6859      	ldr	r1, [r3, #4]
 8003af8:	460b      	mov	r3, r1
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	440b      	add	r3, r1
 8003afe:	0099      	lsls	r1, r3, #2
 8003b00:	440b      	add	r3, r1
 8003b02:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b06:	3301      	adds	r3, #1
 8003b08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b10:	6879      	ldr	r1, [r7, #4]
 8003b12:	6809      	ldr	r1, [r1, #0]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	69da      	ldr	r2, [r3, #28]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a1b      	ldr	r3, [r3, #32]
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	430a      	orrs	r2, r1
 8003b32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003b3e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	6911      	ldr	r1, [r2, #16]
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	68d2      	ldr	r2, [r2, #12]
 8003b4a:	4311      	orrs	r1, r2
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	6812      	ldr	r2, [r2, #0]
 8003b50:	430b      	orrs	r3, r1
 8003b52:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	695a      	ldr	r2, [r3, #20]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	431a      	orrs	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f042 0201 	orr.w	r2, r2, #1
 8003b7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2220      	movs	r2, #32
 8003b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3710      	adds	r7, #16
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	000186a0 	.word	0x000186a0
 8003bac:	001e847f 	.word	0x001e847f
 8003bb0:	003d08ff 	.word	0x003d08ff
 8003bb4:	431bde83 	.word	0x431bde83
 8003bb8:	10624dd3 	.word	0x10624dd3

08003bbc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b088      	sub	sp, #32
 8003bc0:	af02      	add	r7, sp, #8
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	607a      	str	r2, [r7, #4]
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	460b      	mov	r3, r1
 8003bca:	817b      	strh	r3, [r7, #10]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003bd0:	f7ff faf8 	bl	80031c4 <HAL_GetTick>
 8003bd4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	2b20      	cmp	r3, #32
 8003be0:	f040 80e0 	bne.w	8003da4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	9300      	str	r3, [sp, #0]
 8003be8:	2319      	movs	r3, #25
 8003bea:	2201      	movs	r2, #1
 8003bec:	4970      	ldr	r1, [pc, #448]	; (8003db0 <HAL_I2C_Master_Transmit+0x1f4>)
 8003bee:	68f8      	ldr	r0, [r7, #12]
 8003bf0:	f000 fc92 	bl	8004518 <I2C_WaitOnFlagUntilTimeout>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d001      	beq.n	8003bfe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003bfa:	2302      	movs	r3, #2
 8003bfc:	e0d3      	b.n	8003da6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d101      	bne.n	8003c0c <HAL_I2C_Master_Transmit+0x50>
 8003c08:	2302      	movs	r3, #2
 8003c0a:	e0cc      	b.n	8003da6 <HAL_I2C_Master_Transmit+0x1ea>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0301 	and.w	r3, r3, #1
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d007      	beq.n	8003c32 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f042 0201 	orr.w	r2, r2, #1
 8003c30:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c40:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2221      	movs	r2, #33	; 0x21
 8003c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2210      	movs	r2, #16
 8003c4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2200      	movs	r2, #0
 8003c56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	893a      	ldrh	r2, [r7, #8]
 8003c62:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	4a50      	ldr	r2, [pc, #320]	; (8003db4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003c72:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003c74:	8979      	ldrh	r1, [r7, #10]
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	6a3a      	ldr	r2, [r7, #32]
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f000 fafc 	bl	8004278 <I2C_MasterRequestWrite>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e08d      	b.n	8003da6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	613b      	str	r3, [r7, #16]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	695b      	ldr	r3, [r3, #20]
 8003c94:	613b      	str	r3, [r7, #16]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	699b      	ldr	r3, [r3, #24]
 8003c9c:	613b      	str	r3, [r7, #16]
 8003c9e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003ca0:	e066      	b.n	8003d70 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ca2:	697a      	ldr	r2, [r7, #20]
 8003ca4:	6a39      	ldr	r1, [r7, #32]
 8003ca6:	68f8      	ldr	r0, [r7, #12]
 8003ca8:	f000 fd0c 	bl	80046c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00d      	beq.n	8003cce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb6:	2b04      	cmp	r3, #4
 8003cb8:	d107      	bne.n	8003cca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cc8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e06b      	b.n	8003da6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd2:	781a      	ldrb	r2, [r3, #0]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cde:	1c5a      	adds	r2, r3, #1
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	3b01      	subs	r3, #1
 8003cec:	b29a      	uxth	r2, r3
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	b29a      	uxth	r2, r3
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	695b      	ldr	r3, [r3, #20]
 8003d04:	f003 0304 	and.w	r3, r3, #4
 8003d08:	2b04      	cmp	r3, #4
 8003d0a:	d11b      	bne.n	8003d44 <HAL_I2C_Master_Transmit+0x188>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d017      	beq.n	8003d44 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d18:	781a      	ldrb	r2, [r3, #0]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d24:	1c5a      	adds	r2, r3, #1
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	3b01      	subs	r3, #1
 8003d32:	b29a      	uxth	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d3c:	3b01      	subs	r3, #1
 8003d3e:	b29a      	uxth	r2, r3
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d44:	697a      	ldr	r2, [r7, #20]
 8003d46:	6a39      	ldr	r1, [r7, #32]
 8003d48:	68f8      	ldr	r0, [r7, #12]
 8003d4a:	f000 fcfc 	bl	8004746 <I2C_WaitOnBTFFlagUntilTimeout>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d00d      	beq.n	8003d70 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d58:	2b04      	cmp	r3, #4
 8003d5a:	d107      	bne.n	8003d6c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d6a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e01a      	b.n	8003da6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d194      	bne.n	8003ca2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2220      	movs	r2, #32
 8003d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003da0:	2300      	movs	r3, #0
 8003da2:	e000      	b.n	8003da6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003da4:	2302      	movs	r3, #2
  }
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3718      	adds	r7, #24
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	00100002 	.word	0x00100002
 8003db4:	ffff0000 	.word	0xffff0000

08003db8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b08c      	sub	sp, #48	; 0x30
 8003dbc:	af02      	add	r7, sp, #8
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	607a      	str	r2, [r7, #4]
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	817b      	strh	r3, [r7, #10]
 8003dc8:	4613      	mov	r3, r2
 8003dca:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003dd0:	f7ff f9f8 	bl	80031c4 <HAL_GetTick>
 8003dd4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	2b20      	cmp	r3, #32
 8003de0:	f040 823f 	bne.w	8004262 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de6:	9300      	str	r3, [sp, #0]
 8003de8:	2319      	movs	r3, #25
 8003dea:	2201      	movs	r2, #1
 8003dec:	497f      	ldr	r1, [pc, #508]	; (8003fec <HAL_I2C_Master_Receive+0x234>)
 8003dee:	68f8      	ldr	r0, [r7, #12]
 8003df0:	f000 fb92 	bl	8004518 <I2C_WaitOnFlagUntilTimeout>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d001      	beq.n	8003dfe <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	e232      	b.n	8004264 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d101      	bne.n	8003e0c <HAL_I2C_Master_Receive+0x54>
 8003e08:	2302      	movs	r3, #2
 8003e0a:	e22b      	b.n	8004264 <HAL_I2C_Master_Receive+0x4ac>
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d007      	beq.n	8003e32 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f042 0201 	orr.w	r2, r2, #1
 8003e30:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e40:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2222      	movs	r2, #34	; 0x22
 8003e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2210      	movs	r2, #16
 8003e4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2200      	movs	r2, #0
 8003e56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	893a      	ldrh	r2, [r7, #8]
 8003e62:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	4a5f      	ldr	r2, [pc, #380]	; (8003ff0 <HAL_I2C_Master_Receive+0x238>)
 8003e72:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003e74:	8979      	ldrh	r1, [r7, #10]
 8003e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e7a:	68f8      	ldr	r0, [r7, #12]
 8003e7c:	f000 fa7e 	bl	800437c <I2C_MasterRequestRead>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d001      	beq.n	8003e8a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e1ec      	b.n	8004264 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d113      	bne.n	8003eba <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e92:	2300      	movs	r3, #0
 8003e94:	61fb      	str	r3, [r7, #28]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	695b      	ldr	r3, [r3, #20]
 8003e9c:	61fb      	str	r3, [r7, #28]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	699b      	ldr	r3, [r3, #24]
 8003ea4:	61fb      	str	r3, [r7, #28]
 8003ea6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eb6:	601a      	str	r2, [r3, #0]
 8003eb8:	e1c0      	b.n	800423c <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d11e      	bne.n	8003f00 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ed0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003ed2:	b672      	cpsid	i
}
 8003ed4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	61bb      	str	r3, [r7, #24]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	695b      	ldr	r3, [r3, #20]
 8003ee0:	61bb      	str	r3, [r7, #24]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	699b      	ldr	r3, [r3, #24]
 8003ee8:	61bb      	str	r3, [r7, #24]
 8003eea:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003efa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003efc:	b662      	cpsie	i
}
 8003efe:	e035      	b.n	8003f6c <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d11e      	bne.n	8003f46 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f16:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003f18:	b672      	cpsid	i
}
 8003f1a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	617b      	str	r3, [r7, #20]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	617b      	str	r3, [r7, #20]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	699b      	ldr	r3, [r3, #24]
 8003f2e:	617b      	str	r3, [r7, #20]
 8003f30:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f40:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003f42:	b662      	cpsie	i
}
 8003f44:	e012      	b.n	8003f6c <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f54:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f56:	2300      	movs	r3, #0
 8003f58:	613b      	str	r3, [r7, #16]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	695b      	ldr	r3, [r3, #20]
 8003f60:	613b      	str	r3, [r7, #16]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	699b      	ldr	r3, [r3, #24]
 8003f68:	613b      	str	r3, [r7, #16]
 8003f6a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003f6c:	e166      	b.n	800423c <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f72:	2b03      	cmp	r3, #3
 8003f74:	f200 811f 	bhi.w	80041b6 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d123      	bne.n	8003fc8 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f82:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f84:	68f8      	ldr	r0, [r7, #12]
 8003f86:	f000 fc1f 	bl	80047c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d001      	beq.n	8003f94 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e167      	b.n	8004264 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	691a      	ldr	r2, [r3, #16]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9e:	b2d2      	uxtb	r2, r2
 8003fa0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa6:	1c5a      	adds	r2, r3, #1
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	b29a      	uxth	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003fc6:	e139      	b.n	800423c <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d152      	bne.n	8004076 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd2:	9300      	str	r3, [sp, #0]
 8003fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	4906      	ldr	r1, [pc, #24]	; (8003ff4 <HAL_I2C_Master_Receive+0x23c>)
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	f000 fa9c 	bl	8004518 <I2C_WaitOnFlagUntilTimeout>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d008      	beq.n	8003ff8 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e13c      	b.n	8004264 <HAL_I2C_Master_Receive+0x4ac>
 8003fea:	bf00      	nop
 8003fec:	00100002 	.word	0x00100002
 8003ff0:	ffff0000 	.word	0xffff0000
 8003ff4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003ff8:	b672      	cpsid	i
}
 8003ffa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800400a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	691a      	ldr	r2, [r3, #16]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004016:	b2d2      	uxtb	r2, r2
 8004018:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401e:	1c5a      	adds	r2, r3, #1
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004028:	3b01      	subs	r3, #1
 800402a:	b29a      	uxth	r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004034:	b29b      	uxth	r3, r3
 8004036:	3b01      	subs	r3, #1
 8004038:	b29a      	uxth	r2, r3
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800403e:	b662      	cpsie	i
}
 8004040:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	691a      	ldr	r2, [r3, #16]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404c:	b2d2      	uxtb	r2, r2
 800404e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004054:	1c5a      	adds	r2, r3, #1
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800405e:	3b01      	subs	r3, #1
 8004060:	b29a      	uxth	r2, r3
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800406a:	b29b      	uxth	r3, r3
 800406c:	3b01      	subs	r3, #1
 800406e:	b29a      	uxth	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004074:	e0e2      	b.n	800423c <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004078:	9300      	str	r3, [sp, #0]
 800407a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800407c:	2200      	movs	r2, #0
 800407e:	497b      	ldr	r1, [pc, #492]	; (800426c <HAL_I2C_Master_Receive+0x4b4>)
 8004080:	68f8      	ldr	r0, [r7, #12]
 8004082:	f000 fa49 	bl	8004518 <I2C_WaitOnFlagUntilTimeout>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d001      	beq.n	8004090 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e0e9      	b.n	8004264 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800409e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80040a0:	b672      	cpsid	i
}
 80040a2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	691a      	ldr	r2, [r3, #16]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ae:	b2d2      	uxtb	r2, r2
 80040b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b6:	1c5a      	adds	r2, r3, #1
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040c0:	3b01      	subs	r3, #1
 80040c2:	b29a      	uxth	r2, r3
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	3b01      	subs	r3, #1
 80040d0:	b29a      	uxth	r2, r3
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80040d6:	4b66      	ldr	r3, [pc, #408]	; (8004270 <HAL_I2C_Master_Receive+0x4b8>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	08db      	lsrs	r3, r3, #3
 80040dc:	4a65      	ldr	r2, [pc, #404]	; (8004274 <HAL_I2C_Master_Receive+0x4bc>)
 80040de:	fba2 2303 	umull	r2, r3, r2, r3
 80040e2:	0a1a      	lsrs	r2, r3, #8
 80040e4:	4613      	mov	r3, r2
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	4413      	add	r3, r2
 80040ea:	00da      	lsls	r2, r3, #3
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80040f0:	6a3b      	ldr	r3, [r7, #32]
 80040f2:	3b01      	subs	r3, #1
 80040f4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80040f6:	6a3b      	ldr	r3, [r7, #32]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d118      	bne.n	800412e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2200      	movs	r2, #0
 8004100:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2220      	movs	r2, #32
 8004106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2200      	movs	r2, #0
 800410e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004116:	f043 0220 	orr.w	r2, r3, #32
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800411e:	b662      	cpsie	i
}
 8004120:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e09a      	b.n	8004264 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	695b      	ldr	r3, [r3, #20]
 8004134:	f003 0304 	and.w	r3, r3, #4
 8004138:	2b04      	cmp	r3, #4
 800413a:	d1d9      	bne.n	80040f0 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800414a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	691a      	ldr	r2, [r3, #16]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004156:	b2d2      	uxtb	r2, r2
 8004158:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415e:	1c5a      	adds	r2, r3, #1
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004168:	3b01      	subs	r3, #1
 800416a:	b29a      	uxth	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004174:	b29b      	uxth	r3, r3
 8004176:	3b01      	subs	r3, #1
 8004178:	b29a      	uxth	r2, r3
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800417e:	b662      	cpsie	i
}
 8004180:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	691a      	ldr	r2, [r3, #16]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418c:	b2d2      	uxtb	r2, r2
 800418e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004194:	1c5a      	adds	r2, r3, #1
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800419e:	3b01      	subs	r3, #1
 80041a0:	b29a      	uxth	r2, r3
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	3b01      	subs	r3, #1
 80041ae:	b29a      	uxth	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80041b4:	e042      	b.n	800423c <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041ba:	68f8      	ldr	r0, [r7, #12]
 80041bc:	f000 fb04 	bl	80047c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d001      	beq.n	80041ca <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e04c      	b.n	8004264 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	691a      	ldr	r2, [r3, #16]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d4:	b2d2      	uxtb	r2, r2
 80041d6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041dc:	1c5a      	adds	r2, r3, #1
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041e6:	3b01      	subs	r3, #1
 80041e8:	b29a      	uxth	r2, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	3b01      	subs	r3, #1
 80041f6:	b29a      	uxth	r2, r3
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	f003 0304 	and.w	r3, r3, #4
 8004206:	2b04      	cmp	r3, #4
 8004208:	d118      	bne.n	800423c <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	691a      	ldr	r2, [r3, #16]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004214:	b2d2      	uxtb	r2, r2
 8004216:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421c:	1c5a      	adds	r2, r3, #1
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004226:	3b01      	subs	r3, #1
 8004228:	b29a      	uxth	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004232:	b29b      	uxth	r3, r3
 8004234:	3b01      	subs	r3, #1
 8004236:	b29a      	uxth	r2, r3
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004240:	2b00      	cmp	r3, #0
 8004242:	f47f ae94 	bne.w	8003f6e <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2220      	movs	r2, #32
 800424a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800425e:	2300      	movs	r3, #0
 8004260:	e000      	b.n	8004264 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8004262:	2302      	movs	r3, #2
  }
}
 8004264:	4618      	mov	r0, r3
 8004266:	3728      	adds	r7, #40	; 0x28
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	00010004 	.word	0x00010004
 8004270:	20000000 	.word	0x20000000
 8004274:	14f8b589 	.word	0x14f8b589

08004278 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b088      	sub	sp, #32
 800427c:	af02      	add	r7, sp, #8
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	607a      	str	r2, [r7, #4]
 8004282:	603b      	str	r3, [r7, #0]
 8004284:	460b      	mov	r3, r1
 8004286:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800428c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	2b08      	cmp	r3, #8
 8004292:	d006      	beq.n	80042a2 <I2C_MasterRequestWrite+0x2a>
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	2b01      	cmp	r3, #1
 8004298:	d003      	beq.n	80042a2 <I2C_MasterRequestWrite+0x2a>
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80042a0:	d108      	bne.n	80042b4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042b0:	601a      	str	r2, [r3, #0]
 80042b2:	e00b      	b.n	80042cc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b8:	2b12      	cmp	r3, #18
 80042ba:	d107      	bne.n	80042cc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042ca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	9300      	str	r3, [sp, #0]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042d8:	68f8      	ldr	r0, [r7, #12]
 80042da:	f000 f91d 	bl	8004518 <I2C_WaitOnFlagUntilTimeout>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d00d      	beq.n	8004300 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042f2:	d103      	bne.n	80042fc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e035      	b.n	800436c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004308:	d108      	bne.n	800431c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800430a:	897b      	ldrh	r3, [r7, #10]
 800430c:	b2db      	uxtb	r3, r3
 800430e:	461a      	mov	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004318:	611a      	str	r2, [r3, #16]
 800431a:	e01b      	b.n	8004354 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800431c:	897b      	ldrh	r3, [r7, #10]
 800431e:	11db      	asrs	r3, r3, #7
 8004320:	b2db      	uxtb	r3, r3
 8004322:	f003 0306 	and.w	r3, r3, #6
 8004326:	b2db      	uxtb	r3, r3
 8004328:	f063 030f 	orn	r3, r3, #15
 800432c:	b2da      	uxtb	r2, r3
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	490e      	ldr	r1, [pc, #56]	; (8004374 <I2C_MasterRequestWrite+0xfc>)
 800433a:	68f8      	ldr	r0, [r7, #12]
 800433c:	f000 f943 	bl	80045c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d001      	beq.n	800434a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e010      	b.n	800436c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800434a:	897b      	ldrh	r3, [r7, #10]
 800434c:	b2da      	uxtb	r2, r3
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	4907      	ldr	r1, [pc, #28]	; (8004378 <I2C_MasterRequestWrite+0x100>)
 800435a:	68f8      	ldr	r0, [r7, #12]
 800435c:	f000 f933 	bl	80045c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d001      	beq.n	800436a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e000      	b.n	800436c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800436a:	2300      	movs	r3, #0
}
 800436c:	4618      	mov	r0, r3
 800436e:	3718      	adds	r7, #24
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}
 8004374:	00010008 	.word	0x00010008
 8004378:	00010002 	.word	0x00010002

0800437c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b088      	sub	sp, #32
 8004380:	af02      	add	r7, sp, #8
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	607a      	str	r2, [r7, #4]
 8004386:	603b      	str	r3, [r7, #0]
 8004388:	460b      	mov	r3, r1
 800438a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004390:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80043a0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	2b08      	cmp	r3, #8
 80043a6:	d006      	beq.n	80043b6 <I2C_MasterRequestRead+0x3a>
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d003      	beq.n	80043b6 <I2C_MasterRequestRead+0x3a>
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80043b4:	d108      	bne.n	80043c8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043c4:	601a      	str	r2, [r3, #0]
 80043c6:	e00b      	b.n	80043e0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043cc:	2b11      	cmp	r3, #17
 80043ce:	d107      	bne.n	80043e0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	9300      	str	r3, [sp, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80043ec:	68f8      	ldr	r0, [r7, #12]
 80043ee:	f000 f893 	bl	8004518 <I2C_WaitOnFlagUntilTimeout>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d00d      	beq.n	8004414 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004402:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004406:	d103      	bne.n	8004410 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800440e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e079      	b.n	8004508 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	691b      	ldr	r3, [r3, #16]
 8004418:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800441c:	d108      	bne.n	8004430 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800441e:	897b      	ldrh	r3, [r7, #10]
 8004420:	b2db      	uxtb	r3, r3
 8004422:	f043 0301 	orr.w	r3, r3, #1
 8004426:	b2da      	uxtb	r2, r3
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	611a      	str	r2, [r3, #16]
 800442e:	e05f      	b.n	80044f0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004430:	897b      	ldrh	r3, [r7, #10]
 8004432:	11db      	asrs	r3, r3, #7
 8004434:	b2db      	uxtb	r3, r3
 8004436:	f003 0306 	and.w	r3, r3, #6
 800443a:	b2db      	uxtb	r3, r3
 800443c:	f063 030f 	orn	r3, r3, #15
 8004440:	b2da      	uxtb	r2, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	4930      	ldr	r1, [pc, #192]	; (8004510 <I2C_MasterRequestRead+0x194>)
 800444e:	68f8      	ldr	r0, [r7, #12]
 8004450:	f000 f8b9 	bl	80045c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d001      	beq.n	800445e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e054      	b.n	8004508 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800445e:	897b      	ldrh	r3, [r7, #10]
 8004460:	b2da      	uxtb	r2, r3
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	4929      	ldr	r1, [pc, #164]	; (8004514 <I2C_MasterRequestRead+0x198>)
 800446e:	68f8      	ldr	r0, [r7, #12]
 8004470:	f000 f8a9 	bl	80045c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d001      	beq.n	800447e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e044      	b.n	8004508 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800447e:	2300      	movs	r3, #0
 8004480:	613b      	str	r3, [r7, #16]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	695b      	ldr	r3, [r3, #20]
 8004488:	613b      	str	r3, [r7, #16]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	613b      	str	r3, [r7, #16]
 8004492:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044a2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	9300      	str	r3, [sp, #0]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80044b0:	68f8      	ldr	r0, [r7, #12]
 80044b2:	f000 f831 	bl	8004518 <I2C_WaitOnFlagUntilTimeout>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d00d      	beq.n	80044d8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044ca:	d103      	bne.n	80044d4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044d2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e017      	b.n	8004508 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80044d8:	897b      	ldrh	r3, [r7, #10]
 80044da:	11db      	asrs	r3, r3, #7
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	f003 0306 	and.w	r3, r3, #6
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	f063 030e 	orn	r3, r3, #14
 80044e8:	b2da      	uxtb	r2, r3
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	4907      	ldr	r1, [pc, #28]	; (8004514 <I2C_MasterRequestRead+0x198>)
 80044f6:	68f8      	ldr	r0, [r7, #12]
 80044f8:	f000 f865 	bl	80045c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d001      	beq.n	8004506 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e000      	b.n	8004508 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004506:	2300      	movs	r3, #0
}
 8004508:	4618      	mov	r0, r3
 800450a:	3718      	adds	r7, #24
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	00010008 	.word	0x00010008
 8004514:	00010002 	.word	0x00010002

08004518 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	603b      	str	r3, [r7, #0]
 8004524:	4613      	mov	r3, r2
 8004526:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004528:	e025      	b.n	8004576 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004530:	d021      	beq.n	8004576 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004532:	f7fe fe47 	bl	80031c4 <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	683a      	ldr	r2, [r7, #0]
 800453e:	429a      	cmp	r2, r3
 8004540:	d302      	bcc.n	8004548 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d116      	bne.n	8004576 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2200      	movs	r2, #0
 800454c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2220      	movs	r2, #32
 8004552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004562:	f043 0220 	orr.w	r2, r3, #32
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e023      	b.n	80045be <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	0c1b      	lsrs	r3, r3, #16
 800457a:	b2db      	uxtb	r3, r3
 800457c:	2b01      	cmp	r3, #1
 800457e:	d10d      	bne.n	800459c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	43da      	mvns	r2, r3
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	4013      	ands	r3, r2
 800458c:	b29b      	uxth	r3, r3
 800458e:	2b00      	cmp	r3, #0
 8004590:	bf0c      	ite	eq
 8004592:	2301      	moveq	r3, #1
 8004594:	2300      	movne	r3, #0
 8004596:	b2db      	uxtb	r3, r3
 8004598:	461a      	mov	r2, r3
 800459a:	e00c      	b.n	80045b6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	43da      	mvns	r2, r3
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	4013      	ands	r3, r2
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	bf0c      	ite	eq
 80045ae:	2301      	moveq	r3, #1
 80045b0:	2300      	movne	r3, #0
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	461a      	mov	r2, r3
 80045b6:	79fb      	ldrb	r3, [r7, #7]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d0b6      	beq.n	800452a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3710      	adds	r7, #16
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b084      	sub	sp, #16
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	60f8      	str	r0, [r7, #12]
 80045ce:	60b9      	str	r1, [r7, #8]
 80045d0:	607a      	str	r2, [r7, #4]
 80045d2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80045d4:	e051      	b.n	800467a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	695b      	ldr	r3, [r3, #20]
 80045dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045e4:	d123      	bne.n	800462e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045f4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80045fe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2200      	movs	r2, #0
 8004604:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2220      	movs	r2, #32
 800460a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461a:	f043 0204 	orr.w	r2, r3, #4
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e046      	b.n	80046bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004634:	d021      	beq.n	800467a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004636:	f7fe fdc5 	bl	80031c4 <HAL_GetTick>
 800463a:	4602      	mov	r2, r0
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	429a      	cmp	r2, r3
 8004644:	d302      	bcc.n	800464c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d116      	bne.n	800467a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2200      	movs	r2, #0
 8004650:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2220      	movs	r2, #32
 8004656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004666:	f043 0220 	orr.w	r2, r3, #32
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e020      	b.n	80046bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	0c1b      	lsrs	r3, r3, #16
 800467e:	b2db      	uxtb	r3, r3
 8004680:	2b01      	cmp	r3, #1
 8004682:	d10c      	bne.n	800469e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	695b      	ldr	r3, [r3, #20]
 800468a:	43da      	mvns	r2, r3
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	4013      	ands	r3, r2
 8004690:	b29b      	uxth	r3, r3
 8004692:	2b00      	cmp	r3, #0
 8004694:	bf14      	ite	ne
 8004696:	2301      	movne	r3, #1
 8004698:	2300      	moveq	r3, #0
 800469a:	b2db      	uxtb	r3, r3
 800469c:	e00b      	b.n	80046b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	699b      	ldr	r3, [r3, #24]
 80046a4:	43da      	mvns	r2, r3
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	4013      	ands	r3, r2
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	bf14      	ite	ne
 80046b0:	2301      	movne	r3, #1
 80046b2:	2300      	moveq	r3, #0
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d18d      	bne.n	80045d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80046ba:	2300      	movs	r3, #0
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3710      	adds	r7, #16
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046d0:	e02d      	b.n	800472e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80046d2:	68f8      	ldr	r0, [r7, #12]
 80046d4:	f000 f8ce 	bl	8004874 <I2C_IsAcknowledgeFailed>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d001      	beq.n	80046e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e02d      	b.n	800473e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e8:	d021      	beq.n	800472e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046ea:	f7fe fd6b 	bl	80031c4 <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	68ba      	ldr	r2, [r7, #8]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d302      	bcc.n	8004700 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d116      	bne.n	800472e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2200      	movs	r2, #0
 8004704:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2220      	movs	r2, #32
 800470a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471a:	f043 0220 	orr.w	r2, r3, #32
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2200      	movs	r2, #0
 8004726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e007      	b.n	800473e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	695b      	ldr	r3, [r3, #20]
 8004734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004738:	2b80      	cmp	r3, #128	; 0x80
 800473a:	d1ca      	bne.n	80046d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	3710      	adds	r7, #16
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}

08004746 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004746:	b580      	push	{r7, lr}
 8004748:	b084      	sub	sp, #16
 800474a:	af00      	add	r7, sp, #0
 800474c:	60f8      	str	r0, [r7, #12]
 800474e:	60b9      	str	r1, [r7, #8]
 8004750:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004752:	e02d      	b.n	80047b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f000 f88d 	bl	8004874 <I2C_IsAcknowledgeFailed>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d001      	beq.n	8004764 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e02d      	b.n	80047c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800476a:	d021      	beq.n	80047b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800476c:	f7fe fd2a 	bl	80031c4 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	68ba      	ldr	r2, [r7, #8]
 8004778:	429a      	cmp	r2, r3
 800477a:	d302      	bcc.n	8004782 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d116      	bne.n	80047b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2220      	movs	r2, #32
 800478c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2200      	movs	r2, #0
 8004794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479c:	f043 0220 	orr.w	r2, r3, #32
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e007      	b.n	80047c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	f003 0304 	and.w	r3, r3, #4
 80047ba:	2b04      	cmp	r3, #4
 80047bc:	d1ca      	bne.n	8004754 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80047be:	2300      	movs	r3, #0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3710      	adds	r7, #16
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	60b9      	str	r1, [r7, #8]
 80047d2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80047d4:	e042      	b.n	800485c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	695b      	ldr	r3, [r3, #20]
 80047dc:	f003 0310 	and.w	r3, r3, #16
 80047e0:	2b10      	cmp	r3, #16
 80047e2:	d119      	bne.n	8004818 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f06f 0210 	mvn.w	r2, #16
 80047ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2220      	movs	r2, #32
 80047f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2200      	movs	r2, #0
 8004810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e029      	b.n	800486c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004818:	f7fe fcd4 	bl	80031c4 <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	68ba      	ldr	r2, [r7, #8]
 8004824:	429a      	cmp	r2, r3
 8004826:	d302      	bcc.n	800482e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d116      	bne.n	800485c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2200      	movs	r2, #0
 8004832:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2220      	movs	r2, #32
 8004838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2200      	movs	r2, #0
 8004840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004848:	f043 0220 	orr.w	r2, r3, #32
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2200      	movs	r2, #0
 8004854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e007      	b.n	800486c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	695b      	ldr	r3, [r3, #20]
 8004862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004866:	2b40      	cmp	r3, #64	; 0x40
 8004868:	d1b5      	bne.n	80047d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	3710      	adds	r7, #16
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004886:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800488a:	d11b      	bne.n	80048c4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004894:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2220      	movs	r2, #32
 80048a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b0:	f043 0204 	orr.w	r2, r3, #4
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e000      	b.n	80048c6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	370c      	adds	r7, #12
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bc80      	pop	{r7}
 80048ce:	4770      	bx	lr

080048d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b086      	sub	sp, #24
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d101      	bne.n	80048e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e272      	b.n	8004dc8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0301 	and.w	r3, r3, #1
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	f000 8087 	beq.w	80049fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80048f0:	4b92      	ldr	r3, [pc, #584]	; (8004b3c <HAL_RCC_OscConfig+0x26c>)
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f003 030c 	and.w	r3, r3, #12
 80048f8:	2b04      	cmp	r3, #4
 80048fa:	d00c      	beq.n	8004916 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80048fc:	4b8f      	ldr	r3, [pc, #572]	; (8004b3c <HAL_RCC_OscConfig+0x26c>)
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f003 030c 	and.w	r3, r3, #12
 8004904:	2b08      	cmp	r3, #8
 8004906:	d112      	bne.n	800492e <HAL_RCC_OscConfig+0x5e>
 8004908:	4b8c      	ldr	r3, [pc, #560]	; (8004b3c <HAL_RCC_OscConfig+0x26c>)
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004910:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004914:	d10b      	bne.n	800492e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004916:	4b89      	ldr	r3, [pc, #548]	; (8004b3c <HAL_RCC_OscConfig+0x26c>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d06c      	beq.n	80049fc <HAL_RCC_OscConfig+0x12c>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d168      	bne.n	80049fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e24c      	b.n	8004dc8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004936:	d106      	bne.n	8004946 <HAL_RCC_OscConfig+0x76>
 8004938:	4b80      	ldr	r3, [pc, #512]	; (8004b3c <HAL_RCC_OscConfig+0x26c>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a7f      	ldr	r2, [pc, #508]	; (8004b3c <HAL_RCC_OscConfig+0x26c>)
 800493e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004942:	6013      	str	r3, [r2, #0]
 8004944:	e02e      	b.n	80049a4 <HAL_RCC_OscConfig+0xd4>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d10c      	bne.n	8004968 <HAL_RCC_OscConfig+0x98>
 800494e:	4b7b      	ldr	r3, [pc, #492]	; (8004b3c <HAL_RCC_OscConfig+0x26c>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a7a      	ldr	r2, [pc, #488]	; (8004b3c <HAL_RCC_OscConfig+0x26c>)
 8004954:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004958:	6013      	str	r3, [r2, #0]
 800495a:	4b78      	ldr	r3, [pc, #480]	; (8004b3c <HAL_RCC_OscConfig+0x26c>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a77      	ldr	r2, [pc, #476]	; (8004b3c <HAL_RCC_OscConfig+0x26c>)
 8004960:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004964:	6013      	str	r3, [r2, #0]
 8004966:	e01d      	b.n	80049a4 <HAL_RCC_OscConfig+0xd4>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004970:	d10c      	bne.n	800498c <HAL_RCC_OscConfig+0xbc>
 8004972:	4b72      	ldr	r3, [pc, #456]	; (8004b3c <HAL_RCC_OscConfig+0x26c>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a71      	ldr	r2, [pc, #452]	; (8004b3c <HAL_RCC_OscConfig+0x26c>)
 8004978:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800497c:	6013      	str	r3, [r2, #0]
 800497e:	4b6f      	ldr	r3, [pc, #444]	; (8004b3c <HAL_RCC_OscConfig+0x26c>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a6e      	ldr	r2, [pc, #440]	; (8004b3c <HAL_RCC_OscConfig+0x26c>)
 8004984:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004988:	6013      	str	r3, [r2, #0]
 800498a:	e00b      	b.n	80049a4 <HAL_RCC_OscConfig+0xd4>
 800498c:	4b6b      	ldr	r3, [pc, #428]	; (8004b3c <HAL_RCC_OscConfig+0x26c>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a6a      	ldr	r2, [pc, #424]	; (8004b3c <HAL_RCC_OscConfig+0x26c>)
 8004992:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004996:	6013      	str	r3, [r2, #0]
 8004998:	4b68      	ldr	r3, [pc, #416]	; (8004b3c <HAL_RCC_OscConfig+0x26c>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a67      	ldr	r2, [pc, #412]	; (8004b3c <HAL_RCC_OscConfig+0x26c>)
 800499e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d013      	beq.n	80049d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049ac:	f7fe fc0a 	bl	80031c4 <HAL_GetTick>
 80049b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049b2:	e008      	b.n	80049c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049b4:	f7fe fc06 	bl	80031c4 <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	2b64      	cmp	r3, #100	; 0x64
 80049c0:	d901      	bls.n	80049c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e200      	b.n	8004dc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049c6:	4b5d      	ldr	r3, [pc, #372]	; (8004b3c <HAL_RCC_OscConfig+0x26c>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d0f0      	beq.n	80049b4 <HAL_RCC_OscConfig+0xe4>
 80049d2:	e014      	b.n	80049fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049d4:	f7fe fbf6 	bl	80031c4 <HAL_GetTick>
 80049d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049da:	e008      	b.n	80049ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049dc:	f7fe fbf2 	bl	80031c4 <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	2b64      	cmp	r3, #100	; 0x64
 80049e8:	d901      	bls.n	80049ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e1ec      	b.n	8004dc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049ee:	4b53      	ldr	r3, [pc, #332]	; (8004b3c <HAL_RCC_OscConfig+0x26c>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1f0      	bne.n	80049dc <HAL_RCC_OscConfig+0x10c>
 80049fa:	e000      	b.n	80049fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0302 	and.w	r3, r3, #2
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d063      	beq.n	8004ad2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a0a:	4b4c      	ldr	r3, [pc, #304]	; (8004b3c <HAL_RCC_OscConfig+0x26c>)
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	f003 030c 	and.w	r3, r3, #12
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00b      	beq.n	8004a2e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004a16:	4b49      	ldr	r3, [pc, #292]	; (8004b3c <HAL_RCC_OscConfig+0x26c>)
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	f003 030c 	and.w	r3, r3, #12
 8004a1e:	2b08      	cmp	r3, #8
 8004a20:	d11c      	bne.n	8004a5c <HAL_RCC_OscConfig+0x18c>
 8004a22:	4b46      	ldr	r3, [pc, #280]	; (8004b3c <HAL_RCC_OscConfig+0x26c>)
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d116      	bne.n	8004a5c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a2e:	4b43      	ldr	r3, [pc, #268]	; (8004b3c <HAL_RCC_OscConfig+0x26c>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0302 	and.w	r3, r3, #2
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d005      	beq.n	8004a46 <HAL_RCC_OscConfig+0x176>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d001      	beq.n	8004a46 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e1c0      	b.n	8004dc8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a46:	4b3d      	ldr	r3, [pc, #244]	; (8004b3c <HAL_RCC_OscConfig+0x26c>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	695b      	ldr	r3, [r3, #20]
 8004a52:	00db      	lsls	r3, r3, #3
 8004a54:	4939      	ldr	r1, [pc, #228]	; (8004b3c <HAL_RCC_OscConfig+0x26c>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a5a:	e03a      	b.n	8004ad2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	691b      	ldr	r3, [r3, #16]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d020      	beq.n	8004aa6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a64:	4b36      	ldr	r3, [pc, #216]	; (8004b40 <HAL_RCC_OscConfig+0x270>)
 8004a66:	2201      	movs	r2, #1
 8004a68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a6a:	f7fe fbab 	bl	80031c4 <HAL_GetTick>
 8004a6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a70:	e008      	b.n	8004a84 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a72:	f7fe fba7 	bl	80031c4 <HAL_GetTick>
 8004a76:	4602      	mov	r2, r0
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	1ad3      	subs	r3, r2, r3
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d901      	bls.n	8004a84 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004a80:	2303      	movs	r3, #3
 8004a82:	e1a1      	b.n	8004dc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a84:	4b2d      	ldr	r3, [pc, #180]	; (8004b3c <HAL_RCC_OscConfig+0x26c>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0302 	and.w	r3, r3, #2
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d0f0      	beq.n	8004a72 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a90:	4b2a      	ldr	r3, [pc, #168]	; (8004b3c <HAL_RCC_OscConfig+0x26c>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	695b      	ldr	r3, [r3, #20]
 8004a9c:	00db      	lsls	r3, r3, #3
 8004a9e:	4927      	ldr	r1, [pc, #156]	; (8004b3c <HAL_RCC_OscConfig+0x26c>)
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	600b      	str	r3, [r1, #0]
 8004aa4:	e015      	b.n	8004ad2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004aa6:	4b26      	ldr	r3, [pc, #152]	; (8004b40 <HAL_RCC_OscConfig+0x270>)
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aac:	f7fe fb8a 	bl	80031c4 <HAL_GetTick>
 8004ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ab2:	e008      	b.n	8004ac6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ab4:	f7fe fb86 	bl	80031c4 <HAL_GetTick>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d901      	bls.n	8004ac6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e180      	b.n	8004dc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ac6:	4b1d      	ldr	r3, [pc, #116]	; (8004b3c <HAL_RCC_OscConfig+0x26c>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0302 	and.w	r3, r3, #2
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d1f0      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0308 	and.w	r3, r3, #8
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d03a      	beq.n	8004b54 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	699b      	ldr	r3, [r3, #24]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d019      	beq.n	8004b1a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ae6:	4b17      	ldr	r3, [pc, #92]	; (8004b44 <HAL_RCC_OscConfig+0x274>)
 8004ae8:	2201      	movs	r2, #1
 8004aea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004aec:	f7fe fb6a 	bl	80031c4 <HAL_GetTick>
 8004af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004af2:	e008      	b.n	8004b06 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004af4:	f7fe fb66 	bl	80031c4 <HAL_GetTick>
 8004af8:	4602      	mov	r2, r0
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d901      	bls.n	8004b06 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	e160      	b.n	8004dc8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b06:	4b0d      	ldr	r3, [pc, #52]	; (8004b3c <HAL_RCC_OscConfig+0x26c>)
 8004b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0a:	f003 0302 	and.w	r3, r3, #2
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d0f0      	beq.n	8004af4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004b12:	2001      	movs	r0, #1
 8004b14:	f000 fad8 	bl	80050c8 <RCC_Delay>
 8004b18:	e01c      	b.n	8004b54 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b1a:	4b0a      	ldr	r3, [pc, #40]	; (8004b44 <HAL_RCC_OscConfig+0x274>)
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b20:	f7fe fb50 	bl	80031c4 <HAL_GetTick>
 8004b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b26:	e00f      	b.n	8004b48 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b28:	f7fe fb4c 	bl	80031c4 <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d908      	bls.n	8004b48 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e146      	b.n	8004dc8 <HAL_RCC_OscConfig+0x4f8>
 8004b3a:	bf00      	nop
 8004b3c:	40021000 	.word	0x40021000
 8004b40:	42420000 	.word	0x42420000
 8004b44:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b48:	4b92      	ldr	r3, [pc, #584]	; (8004d94 <HAL_RCC_OscConfig+0x4c4>)
 8004b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4c:	f003 0302 	and.w	r3, r3, #2
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d1e9      	bne.n	8004b28 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0304 	and.w	r3, r3, #4
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f000 80a6 	beq.w	8004cae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b62:	2300      	movs	r3, #0
 8004b64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b66:	4b8b      	ldr	r3, [pc, #556]	; (8004d94 <HAL_RCC_OscConfig+0x4c4>)
 8004b68:	69db      	ldr	r3, [r3, #28]
 8004b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d10d      	bne.n	8004b8e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b72:	4b88      	ldr	r3, [pc, #544]	; (8004d94 <HAL_RCC_OscConfig+0x4c4>)
 8004b74:	69db      	ldr	r3, [r3, #28]
 8004b76:	4a87      	ldr	r2, [pc, #540]	; (8004d94 <HAL_RCC_OscConfig+0x4c4>)
 8004b78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b7c:	61d3      	str	r3, [r2, #28]
 8004b7e:	4b85      	ldr	r3, [pc, #532]	; (8004d94 <HAL_RCC_OscConfig+0x4c4>)
 8004b80:	69db      	ldr	r3, [r3, #28]
 8004b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b86:	60bb      	str	r3, [r7, #8]
 8004b88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b8e:	4b82      	ldr	r3, [pc, #520]	; (8004d98 <HAL_RCC_OscConfig+0x4c8>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d118      	bne.n	8004bcc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b9a:	4b7f      	ldr	r3, [pc, #508]	; (8004d98 <HAL_RCC_OscConfig+0x4c8>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a7e      	ldr	r2, [pc, #504]	; (8004d98 <HAL_RCC_OscConfig+0x4c8>)
 8004ba0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ba4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ba6:	f7fe fb0d 	bl	80031c4 <HAL_GetTick>
 8004baa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bac:	e008      	b.n	8004bc0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bae:	f7fe fb09 	bl	80031c4 <HAL_GetTick>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	2b64      	cmp	r3, #100	; 0x64
 8004bba:	d901      	bls.n	8004bc0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	e103      	b.n	8004dc8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bc0:	4b75      	ldr	r3, [pc, #468]	; (8004d98 <HAL_RCC_OscConfig+0x4c8>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d0f0      	beq.n	8004bae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d106      	bne.n	8004be2 <HAL_RCC_OscConfig+0x312>
 8004bd4:	4b6f      	ldr	r3, [pc, #444]	; (8004d94 <HAL_RCC_OscConfig+0x4c4>)
 8004bd6:	6a1b      	ldr	r3, [r3, #32]
 8004bd8:	4a6e      	ldr	r2, [pc, #440]	; (8004d94 <HAL_RCC_OscConfig+0x4c4>)
 8004bda:	f043 0301 	orr.w	r3, r3, #1
 8004bde:	6213      	str	r3, [r2, #32]
 8004be0:	e02d      	b.n	8004c3e <HAL_RCC_OscConfig+0x36e>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d10c      	bne.n	8004c04 <HAL_RCC_OscConfig+0x334>
 8004bea:	4b6a      	ldr	r3, [pc, #424]	; (8004d94 <HAL_RCC_OscConfig+0x4c4>)
 8004bec:	6a1b      	ldr	r3, [r3, #32]
 8004bee:	4a69      	ldr	r2, [pc, #420]	; (8004d94 <HAL_RCC_OscConfig+0x4c4>)
 8004bf0:	f023 0301 	bic.w	r3, r3, #1
 8004bf4:	6213      	str	r3, [r2, #32]
 8004bf6:	4b67      	ldr	r3, [pc, #412]	; (8004d94 <HAL_RCC_OscConfig+0x4c4>)
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	4a66      	ldr	r2, [pc, #408]	; (8004d94 <HAL_RCC_OscConfig+0x4c4>)
 8004bfc:	f023 0304 	bic.w	r3, r3, #4
 8004c00:	6213      	str	r3, [r2, #32]
 8004c02:	e01c      	b.n	8004c3e <HAL_RCC_OscConfig+0x36e>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	2b05      	cmp	r3, #5
 8004c0a:	d10c      	bne.n	8004c26 <HAL_RCC_OscConfig+0x356>
 8004c0c:	4b61      	ldr	r3, [pc, #388]	; (8004d94 <HAL_RCC_OscConfig+0x4c4>)
 8004c0e:	6a1b      	ldr	r3, [r3, #32]
 8004c10:	4a60      	ldr	r2, [pc, #384]	; (8004d94 <HAL_RCC_OscConfig+0x4c4>)
 8004c12:	f043 0304 	orr.w	r3, r3, #4
 8004c16:	6213      	str	r3, [r2, #32]
 8004c18:	4b5e      	ldr	r3, [pc, #376]	; (8004d94 <HAL_RCC_OscConfig+0x4c4>)
 8004c1a:	6a1b      	ldr	r3, [r3, #32]
 8004c1c:	4a5d      	ldr	r2, [pc, #372]	; (8004d94 <HAL_RCC_OscConfig+0x4c4>)
 8004c1e:	f043 0301 	orr.w	r3, r3, #1
 8004c22:	6213      	str	r3, [r2, #32]
 8004c24:	e00b      	b.n	8004c3e <HAL_RCC_OscConfig+0x36e>
 8004c26:	4b5b      	ldr	r3, [pc, #364]	; (8004d94 <HAL_RCC_OscConfig+0x4c4>)
 8004c28:	6a1b      	ldr	r3, [r3, #32]
 8004c2a:	4a5a      	ldr	r2, [pc, #360]	; (8004d94 <HAL_RCC_OscConfig+0x4c4>)
 8004c2c:	f023 0301 	bic.w	r3, r3, #1
 8004c30:	6213      	str	r3, [r2, #32]
 8004c32:	4b58      	ldr	r3, [pc, #352]	; (8004d94 <HAL_RCC_OscConfig+0x4c4>)
 8004c34:	6a1b      	ldr	r3, [r3, #32]
 8004c36:	4a57      	ldr	r2, [pc, #348]	; (8004d94 <HAL_RCC_OscConfig+0x4c4>)
 8004c38:	f023 0304 	bic.w	r3, r3, #4
 8004c3c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d015      	beq.n	8004c72 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c46:	f7fe fabd 	bl	80031c4 <HAL_GetTick>
 8004c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c4c:	e00a      	b.n	8004c64 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c4e:	f7fe fab9 	bl	80031c4 <HAL_GetTick>
 8004c52:	4602      	mov	r2, r0
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d901      	bls.n	8004c64 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004c60:	2303      	movs	r3, #3
 8004c62:	e0b1      	b.n	8004dc8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c64:	4b4b      	ldr	r3, [pc, #300]	; (8004d94 <HAL_RCC_OscConfig+0x4c4>)
 8004c66:	6a1b      	ldr	r3, [r3, #32]
 8004c68:	f003 0302 	and.w	r3, r3, #2
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d0ee      	beq.n	8004c4e <HAL_RCC_OscConfig+0x37e>
 8004c70:	e014      	b.n	8004c9c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c72:	f7fe faa7 	bl	80031c4 <HAL_GetTick>
 8004c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c78:	e00a      	b.n	8004c90 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c7a:	f7fe faa3 	bl	80031c4 <HAL_GetTick>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d901      	bls.n	8004c90 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e09b      	b.n	8004dc8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c90:	4b40      	ldr	r3, [pc, #256]	; (8004d94 <HAL_RCC_OscConfig+0x4c4>)
 8004c92:	6a1b      	ldr	r3, [r3, #32]
 8004c94:	f003 0302 	and.w	r3, r3, #2
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d1ee      	bne.n	8004c7a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004c9c:	7dfb      	ldrb	r3, [r7, #23]
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d105      	bne.n	8004cae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ca2:	4b3c      	ldr	r3, [pc, #240]	; (8004d94 <HAL_RCC_OscConfig+0x4c4>)
 8004ca4:	69db      	ldr	r3, [r3, #28]
 8004ca6:	4a3b      	ldr	r2, [pc, #236]	; (8004d94 <HAL_RCC_OscConfig+0x4c4>)
 8004ca8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	69db      	ldr	r3, [r3, #28]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	f000 8087 	beq.w	8004dc6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004cb8:	4b36      	ldr	r3, [pc, #216]	; (8004d94 <HAL_RCC_OscConfig+0x4c4>)
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	f003 030c 	and.w	r3, r3, #12
 8004cc0:	2b08      	cmp	r3, #8
 8004cc2:	d061      	beq.n	8004d88 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	69db      	ldr	r3, [r3, #28]
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d146      	bne.n	8004d5a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ccc:	4b33      	ldr	r3, [pc, #204]	; (8004d9c <HAL_RCC_OscConfig+0x4cc>)
 8004cce:	2200      	movs	r2, #0
 8004cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cd2:	f7fe fa77 	bl	80031c4 <HAL_GetTick>
 8004cd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004cd8:	e008      	b.n	8004cec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cda:	f7fe fa73 	bl	80031c4 <HAL_GetTick>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d901      	bls.n	8004cec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	e06d      	b.n	8004dc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004cec:	4b29      	ldr	r3, [pc, #164]	; (8004d94 <HAL_RCC_OscConfig+0x4c4>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d1f0      	bne.n	8004cda <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a1b      	ldr	r3, [r3, #32]
 8004cfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d00:	d108      	bne.n	8004d14 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004d02:	4b24      	ldr	r3, [pc, #144]	; (8004d94 <HAL_RCC_OscConfig+0x4c4>)
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	4921      	ldr	r1, [pc, #132]	; (8004d94 <HAL_RCC_OscConfig+0x4c4>)
 8004d10:	4313      	orrs	r3, r2
 8004d12:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d14:	4b1f      	ldr	r3, [pc, #124]	; (8004d94 <HAL_RCC_OscConfig+0x4c4>)
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a19      	ldr	r1, [r3, #32]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d24:	430b      	orrs	r3, r1
 8004d26:	491b      	ldr	r1, [pc, #108]	; (8004d94 <HAL_RCC_OscConfig+0x4c4>)
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d2c:	4b1b      	ldr	r3, [pc, #108]	; (8004d9c <HAL_RCC_OscConfig+0x4cc>)
 8004d2e:	2201      	movs	r2, #1
 8004d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d32:	f7fe fa47 	bl	80031c4 <HAL_GetTick>
 8004d36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d38:	e008      	b.n	8004d4c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d3a:	f7fe fa43 	bl	80031c4 <HAL_GetTick>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d901      	bls.n	8004d4c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e03d      	b.n	8004dc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d4c:	4b11      	ldr	r3, [pc, #68]	; (8004d94 <HAL_RCC_OscConfig+0x4c4>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d0f0      	beq.n	8004d3a <HAL_RCC_OscConfig+0x46a>
 8004d58:	e035      	b.n	8004dc6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d5a:	4b10      	ldr	r3, [pc, #64]	; (8004d9c <HAL_RCC_OscConfig+0x4cc>)
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d60:	f7fe fa30 	bl	80031c4 <HAL_GetTick>
 8004d64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d66:	e008      	b.n	8004d7a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d68:	f7fe fa2c 	bl	80031c4 <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d901      	bls.n	8004d7a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e026      	b.n	8004dc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d7a:	4b06      	ldr	r3, [pc, #24]	; (8004d94 <HAL_RCC_OscConfig+0x4c4>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d1f0      	bne.n	8004d68 <HAL_RCC_OscConfig+0x498>
 8004d86:	e01e      	b.n	8004dc6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	69db      	ldr	r3, [r3, #28]
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d107      	bne.n	8004da0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e019      	b.n	8004dc8 <HAL_RCC_OscConfig+0x4f8>
 8004d94:	40021000 	.word	0x40021000
 8004d98:	40007000 	.word	0x40007000
 8004d9c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004da0:	4b0b      	ldr	r3, [pc, #44]	; (8004dd0 <HAL_RCC_OscConfig+0x500>)
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a1b      	ldr	r3, [r3, #32]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d106      	bne.n	8004dc2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d001      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e000      	b.n	8004dc8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004dc6:	2300      	movs	r3, #0
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3718      	adds	r7, #24
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	40021000 	.word	0x40021000

08004dd4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d101      	bne.n	8004de8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e0d0      	b.n	8004f8a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004de8:	4b6a      	ldr	r3, [pc, #424]	; (8004f94 <HAL_RCC_ClockConfig+0x1c0>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0307 	and.w	r3, r3, #7
 8004df0:	683a      	ldr	r2, [r7, #0]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d910      	bls.n	8004e18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004df6:	4b67      	ldr	r3, [pc, #412]	; (8004f94 <HAL_RCC_ClockConfig+0x1c0>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f023 0207 	bic.w	r2, r3, #7
 8004dfe:	4965      	ldr	r1, [pc, #404]	; (8004f94 <HAL_RCC_ClockConfig+0x1c0>)
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e06:	4b63      	ldr	r3, [pc, #396]	; (8004f94 <HAL_RCC_ClockConfig+0x1c0>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 0307 	and.w	r3, r3, #7
 8004e0e:	683a      	ldr	r2, [r7, #0]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d001      	beq.n	8004e18 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e0b8      	b.n	8004f8a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0302 	and.w	r3, r3, #2
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d020      	beq.n	8004e66 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 0304 	and.w	r3, r3, #4
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d005      	beq.n	8004e3c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e30:	4b59      	ldr	r3, [pc, #356]	; (8004f98 <HAL_RCC_ClockConfig+0x1c4>)
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	4a58      	ldr	r2, [pc, #352]	; (8004f98 <HAL_RCC_ClockConfig+0x1c4>)
 8004e36:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004e3a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0308 	and.w	r3, r3, #8
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d005      	beq.n	8004e54 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e48:	4b53      	ldr	r3, [pc, #332]	; (8004f98 <HAL_RCC_ClockConfig+0x1c4>)
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	4a52      	ldr	r2, [pc, #328]	; (8004f98 <HAL_RCC_ClockConfig+0x1c4>)
 8004e4e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004e52:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e54:	4b50      	ldr	r3, [pc, #320]	; (8004f98 <HAL_RCC_ClockConfig+0x1c4>)
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	494d      	ldr	r1, [pc, #308]	; (8004f98 <HAL_RCC_ClockConfig+0x1c4>)
 8004e62:	4313      	orrs	r3, r2
 8004e64:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0301 	and.w	r3, r3, #1
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d040      	beq.n	8004ef4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d107      	bne.n	8004e8a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e7a:	4b47      	ldr	r3, [pc, #284]	; (8004f98 <HAL_RCC_ClockConfig+0x1c4>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d115      	bne.n	8004eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e07f      	b.n	8004f8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d107      	bne.n	8004ea2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e92:	4b41      	ldr	r3, [pc, #260]	; (8004f98 <HAL_RCC_ClockConfig+0x1c4>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d109      	bne.n	8004eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e073      	b.n	8004f8a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ea2:	4b3d      	ldr	r3, [pc, #244]	; (8004f98 <HAL_RCC_ClockConfig+0x1c4>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0302 	and.w	r3, r3, #2
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d101      	bne.n	8004eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e06b      	b.n	8004f8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004eb2:	4b39      	ldr	r3, [pc, #228]	; (8004f98 <HAL_RCC_ClockConfig+0x1c4>)
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	f023 0203 	bic.w	r2, r3, #3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	4936      	ldr	r1, [pc, #216]	; (8004f98 <HAL_RCC_ClockConfig+0x1c4>)
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ec4:	f7fe f97e 	bl	80031c4 <HAL_GetTick>
 8004ec8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eca:	e00a      	b.n	8004ee2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ecc:	f7fe f97a 	bl	80031c4 <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d901      	bls.n	8004ee2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e053      	b.n	8004f8a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ee2:	4b2d      	ldr	r3, [pc, #180]	; (8004f98 <HAL_RCC_ClockConfig+0x1c4>)
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	f003 020c 	and.w	r2, r3, #12
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d1eb      	bne.n	8004ecc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ef4:	4b27      	ldr	r3, [pc, #156]	; (8004f94 <HAL_RCC_ClockConfig+0x1c0>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 0307 	and.w	r3, r3, #7
 8004efc:	683a      	ldr	r2, [r7, #0]
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d210      	bcs.n	8004f24 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f02:	4b24      	ldr	r3, [pc, #144]	; (8004f94 <HAL_RCC_ClockConfig+0x1c0>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f023 0207 	bic.w	r2, r3, #7
 8004f0a:	4922      	ldr	r1, [pc, #136]	; (8004f94 <HAL_RCC_ClockConfig+0x1c0>)
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f12:	4b20      	ldr	r3, [pc, #128]	; (8004f94 <HAL_RCC_ClockConfig+0x1c0>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0307 	and.w	r3, r3, #7
 8004f1a:	683a      	ldr	r2, [r7, #0]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d001      	beq.n	8004f24 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e032      	b.n	8004f8a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0304 	and.w	r3, r3, #4
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d008      	beq.n	8004f42 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f30:	4b19      	ldr	r3, [pc, #100]	; (8004f98 <HAL_RCC_ClockConfig+0x1c4>)
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	4916      	ldr	r1, [pc, #88]	; (8004f98 <HAL_RCC_ClockConfig+0x1c4>)
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0308 	and.w	r3, r3, #8
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d009      	beq.n	8004f62 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004f4e:	4b12      	ldr	r3, [pc, #72]	; (8004f98 <HAL_RCC_ClockConfig+0x1c4>)
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	00db      	lsls	r3, r3, #3
 8004f5c:	490e      	ldr	r1, [pc, #56]	; (8004f98 <HAL_RCC_ClockConfig+0x1c4>)
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004f62:	f000 f821 	bl	8004fa8 <HAL_RCC_GetSysClockFreq>
 8004f66:	4602      	mov	r2, r0
 8004f68:	4b0b      	ldr	r3, [pc, #44]	; (8004f98 <HAL_RCC_ClockConfig+0x1c4>)
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	091b      	lsrs	r3, r3, #4
 8004f6e:	f003 030f 	and.w	r3, r3, #15
 8004f72:	490a      	ldr	r1, [pc, #40]	; (8004f9c <HAL_RCC_ClockConfig+0x1c8>)
 8004f74:	5ccb      	ldrb	r3, [r1, r3]
 8004f76:	fa22 f303 	lsr.w	r3, r2, r3
 8004f7a:	4a09      	ldr	r2, [pc, #36]	; (8004fa0 <HAL_RCC_ClockConfig+0x1cc>)
 8004f7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004f7e:	4b09      	ldr	r3, [pc, #36]	; (8004fa4 <HAL_RCC_ClockConfig+0x1d0>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4618      	mov	r0, r3
 8004f84:	f7fe f8dc 	bl	8003140 <HAL_InitTick>

  return HAL_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3710      	adds	r7, #16
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	40022000 	.word	0x40022000
 8004f98:	40021000 	.word	0x40021000
 8004f9c:	080095bc 	.word	0x080095bc
 8004fa0:	20000000 	.word	0x20000000
 8004fa4:	20000004 	.word	0x20000004

08004fa8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fa8:	b490      	push	{r4, r7}
 8004faa:	b08a      	sub	sp, #40	; 0x28
 8004fac:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004fae:	4b29      	ldr	r3, [pc, #164]	; (8005054 <HAL_RCC_GetSysClockFreq+0xac>)
 8004fb0:	1d3c      	adds	r4, r7, #4
 8004fb2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004fb4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004fb8:	f240 2301 	movw	r3, #513	; 0x201
 8004fbc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	61fb      	str	r3, [r7, #28]
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	61bb      	str	r3, [r7, #24]
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	627b      	str	r3, [r7, #36]	; 0x24
 8004fca:	2300      	movs	r3, #0
 8004fcc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004fd2:	4b21      	ldr	r3, [pc, #132]	; (8005058 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	f003 030c 	and.w	r3, r3, #12
 8004fde:	2b04      	cmp	r3, #4
 8004fe0:	d002      	beq.n	8004fe8 <HAL_RCC_GetSysClockFreq+0x40>
 8004fe2:	2b08      	cmp	r3, #8
 8004fe4:	d003      	beq.n	8004fee <HAL_RCC_GetSysClockFreq+0x46>
 8004fe6:	e02b      	b.n	8005040 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004fe8:	4b1c      	ldr	r3, [pc, #112]	; (800505c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004fea:	623b      	str	r3, [r7, #32]
      break;
 8004fec:	e02b      	b.n	8005046 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	0c9b      	lsrs	r3, r3, #18
 8004ff2:	f003 030f 	and.w	r3, r3, #15
 8004ff6:	3328      	adds	r3, #40	; 0x28
 8004ff8:	443b      	add	r3, r7
 8004ffa:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004ffe:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d012      	beq.n	8005030 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800500a:	4b13      	ldr	r3, [pc, #76]	; (8005058 <HAL_RCC_GetSysClockFreq+0xb0>)
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	0c5b      	lsrs	r3, r3, #17
 8005010:	f003 0301 	and.w	r3, r3, #1
 8005014:	3328      	adds	r3, #40	; 0x28
 8005016:	443b      	add	r3, r7
 8005018:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800501c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	4a0e      	ldr	r2, [pc, #56]	; (800505c <HAL_RCC_GetSysClockFreq+0xb4>)
 8005022:	fb03 f202 	mul.w	r2, r3, r2
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	fbb2 f3f3 	udiv	r3, r2, r3
 800502c:	627b      	str	r3, [r7, #36]	; 0x24
 800502e:	e004      	b.n	800503a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	4a0b      	ldr	r2, [pc, #44]	; (8005060 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005034:	fb02 f303 	mul.w	r3, r2, r3
 8005038:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800503a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503c:	623b      	str	r3, [r7, #32]
      break;
 800503e:	e002      	b.n	8005046 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005040:	4b06      	ldr	r3, [pc, #24]	; (800505c <HAL_RCC_GetSysClockFreq+0xb4>)
 8005042:	623b      	str	r3, [r7, #32]
      break;
 8005044:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005046:	6a3b      	ldr	r3, [r7, #32]
}
 8005048:	4618      	mov	r0, r3
 800504a:	3728      	adds	r7, #40	; 0x28
 800504c:	46bd      	mov	sp, r7
 800504e:	bc90      	pop	{r4, r7}
 8005050:	4770      	bx	lr
 8005052:	bf00      	nop
 8005054:	08009590 	.word	0x08009590
 8005058:	40021000 	.word	0x40021000
 800505c:	007a1200 	.word	0x007a1200
 8005060:	003d0900 	.word	0x003d0900

08005064 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005064:	b480      	push	{r7}
 8005066:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005068:	4b02      	ldr	r3, [pc, #8]	; (8005074 <HAL_RCC_GetHCLKFreq+0x10>)
 800506a:	681b      	ldr	r3, [r3, #0]
}
 800506c:	4618      	mov	r0, r3
 800506e:	46bd      	mov	sp, r7
 8005070:	bc80      	pop	{r7}
 8005072:	4770      	bx	lr
 8005074:	20000000 	.word	0x20000000

08005078 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800507c:	f7ff fff2 	bl	8005064 <HAL_RCC_GetHCLKFreq>
 8005080:	4602      	mov	r2, r0
 8005082:	4b05      	ldr	r3, [pc, #20]	; (8005098 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	0a1b      	lsrs	r3, r3, #8
 8005088:	f003 0307 	and.w	r3, r3, #7
 800508c:	4903      	ldr	r1, [pc, #12]	; (800509c <HAL_RCC_GetPCLK1Freq+0x24>)
 800508e:	5ccb      	ldrb	r3, [r1, r3]
 8005090:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005094:	4618      	mov	r0, r3
 8005096:	bd80      	pop	{r7, pc}
 8005098:	40021000 	.word	0x40021000
 800509c:	080095cc 	.word	0x080095cc

080050a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80050a4:	f7ff ffde 	bl	8005064 <HAL_RCC_GetHCLKFreq>
 80050a8:	4602      	mov	r2, r0
 80050aa:	4b05      	ldr	r3, [pc, #20]	; (80050c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	0adb      	lsrs	r3, r3, #11
 80050b0:	f003 0307 	and.w	r3, r3, #7
 80050b4:	4903      	ldr	r1, [pc, #12]	; (80050c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050b6:	5ccb      	ldrb	r3, [r1, r3]
 80050b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050bc:	4618      	mov	r0, r3
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	40021000 	.word	0x40021000
 80050c4:	080095cc 	.word	0x080095cc

080050c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b085      	sub	sp, #20
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80050d0:	4b0a      	ldr	r3, [pc, #40]	; (80050fc <RCC_Delay+0x34>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a0a      	ldr	r2, [pc, #40]	; (8005100 <RCC_Delay+0x38>)
 80050d6:	fba2 2303 	umull	r2, r3, r2, r3
 80050da:	0a5b      	lsrs	r3, r3, #9
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	fb02 f303 	mul.w	r3, r2, r3
 80050e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80050e4:	bf00      	nop
  }
  while (Delay --);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	1e5a      	subs	r2, r3, #1
 80050ea:	60fa      	str	r2, [r7, #12]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d1f9      	bne.n	80050e4 <RCC_Delay+0x1c>
}
 80050f0:	bf00      	nop
 80050f2:	bf00      	nop
 80050f4:	3714      	adds	r7, #20
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bc80      	pop	{r7}
 80050fa:	4770      	bx	lr
 80050fc:	20000000 	.word	0x20000000
 8005100:	10624dd3 	.word	0x10624dd3

08005104 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d101      	bne.n	8005116 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e076      	b.n	8005204 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511a:	2b00      	cmp	r3, #0
 800511c:	d108      	bne.n	8005130 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005126:	d009      	beq.n	800513c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	61da      	str	r2, [r3, #28]
 800512e:	e005      	b.n	800513c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005148:	b2db      	uxtb	r3, r3
 800514a:	2b00      	cmp	r3, #0
 800514c:	d106      	bne.n	800515c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f7fd fdc6 	bl	8002ce8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2202      	movs	r2, #2
 8005160:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005172:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005184:	431a      	orrs	r2, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800518e:	431a      	orrs	r2, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	691b      	ldr	r3, [r3, #16]
 8005194:	f003 0302 	and.w	r3, r3, #2
 8005198:	431a      	orrs	r2, r3
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	695b      	ldr	r3, [r3, #20]
 800519e:	f003 0301 	and.w	r3, r3, #1
 80051a2:	431a      	orrs	r2, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	699b      	ldr	r3, [r3, #24]
 80051a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051ac:	431a      	orrs	r2, r3
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	69db      	ldr	r3, [r3, #28]
 80051b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80051b6:	431a      	orrs	r2, r3
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6a1b      	ldr	r3, [r3, #32]
 80051bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051c0:	ea42 0103 	orr.w	r1, r2, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	430a      	orrs	r2, r1
 80051d2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	699b      	ldr	r3, [r3, #24]
 80051d8:	0c1a      	lsrs	r2, r3, #16
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f002 0204 	and.w	r2, r2, #4
 80051e2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	69da      	ldr	r2, [r3, #28]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051f2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2201      	movs	r2, #1
 80051fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005202:	2300      	movs	r3, #0
}
 8005204:	4618      	mov	r0, r3
 8005206:	3708      	adds	r7, #8
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b088      	sub	sp, #32
 8005210:	af00      	add	r7, sp, #0
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	603b      	str	r3, [r7, #0]
 8005218:	4613      	mov	r3, r2
 800521a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800521c:	2300      	movs	r3, #0
 800521e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005226:	2b01      	cmp	r3, #1
 8005228:	d101      	bne.n	800522e <HAL_SPI_Transmit+0x22>
 800522a:	2302      	movs	r3, #2
 800522c:	e126      	b.n	800547c <HAL_SPI_Transmit+0x270>
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2201      	movs	r2, #1
 8005232:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005236:	f7fd ffc5 	bl	80031c4 <HAL_GetTick>
 800523a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800523c:	88fb      	ldrh	r3, [r7, #6]
 800523e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005246:	b2db      	uxtb	r3, r3
 8005248:	2b01      	cmp	r3, #1
 800524a:	d002      	beq.n	8005252 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800524c:	2302      	movs	r3, #2
 800524e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005250:	e10b      	b.n	800546a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d002      	beq.n	800525e <HAL_SPI_Transmit+0x52>
 8005258:	88fb      	ldrh	r3, [r7, #6]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d102      	bne.n	8005264 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005262:	e102      	b.n	800546a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2203      	movs	r2, #3
 8005268:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2200      	movs	r2, #0
 8005270:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	68ba      	ldr	r2, [r7, #8]
 8005276:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	88fa      	ldrh	r2, [r7, #6]
 800527c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	88fa      	ldrh	r2, [r7, #6]
 8005282:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2200      	movs	r2, #0
 8005288:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2200      	movs	r2, #0
 800528e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2200      	movs	r2, #0
 8005294:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2200      	movs	r2, #0
 800529a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2200      	movs	r2, #0
 80052a0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052aa:	d10f      	bne.n	80052cc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052ba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052ca:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d6:	2b40      	cmp	r3, #64	; 0x40
 80052d8:	d007      	beq.n	80052ea <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052e8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052f2:	d14b      	bne.n	800538c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d002      	beq.n	8005302 <HAL_SPI_Transmit+0xf6>
 80052fc:	8afb      	ldrh	r3, [r7, #22]
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d13e      	bne.n	8005380 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005306:	881a      	ldrh	r2, [r3, #0]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005312:	1c9a      	adds	r2, r3, #2
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800531c:	b29b      	uxth	r3, r3
 800531e:	3b01      	subs	r3, #1
 8005320:	b29a      	uxth	r2, r3
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005326:	e02b      	b.n	8005380 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	f003 0302 	and.w	r3, r3, #2
 8005332:	2b02      	cmp	r3, #2
 8005334:	d112      	bne.n	800535c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800533a:	881a      	ldrh	r2, [r3, #0]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005346:	1c9a      	adds	r2, r3, #2
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005350:	b29b      	uxth	r3, r3
 8005352:	3b01      	subs	r3, #1
 8005354:	b29a      	uxth	r2, r3
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	86da      	strh	r2, [r3, #54]	; 0x36
 800535a:	e011      	b.n	8005380 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800535c:	f7fd ff32 	bl	80031c4 <HAL_GetTick>
 8005360:	4602      	mov	r2, r0
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	683a      	ldr	r2, [r7, #0]
 8005368:	429a      	cmp	r2, r3
 800536a:	d803      	bhi.n	8005374 <HAL_SPI_Transmit+0x168>
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005372:	d102      	bne.n	800537a <HAL_SPI_Transmit+0x16e>
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d102      	bne.n	8005380 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800537e:	e074      	b.n	800546a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005384:	b29b      	uxth	r3, r3
 8005386:	2b00      	cmp	r3, #0
 8005388:	d1ce      	bne.n	8005328 <HAL_SPI_Transmit+0x11c>
 800538a:	e04c      	b.n	8005426 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d002      	beq.n	800539a <HAL_SPI_Transmit+0x18e>
 8005394:	8afb      	ldrh	r3, [r7, #22]
 8005396:	2b01      	cmp	r3, #1
 8005398:	d140      	bne.n	800541c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	330c      	adds	r3, #12
 80053a4:	7812      	ldrb	r2, [r2, #0]
 80053a6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ac:	1c5a      	adds	r2, r3, #1
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	3b01      	subs	r3, #1
 80053ba:	b29a      	uxth	r2, r3
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80053c0:	e02c      	b.n	800541c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	f003 0302 	and.w	r3, r3, #2
 80053cc:	2b02      	cmp	r3, #2
 80053ce:	d113      	bne.n	80053f8 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	330c      	adds	r3, #12
 80053da:	7812      	ldrb	r2, [r2, #0]
 80053dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e2:	1c5a      	adds	r2, r3, #1
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	3b01      	subs	r3, #1
 80053f0:	b29a      	uxth	r2, r3
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	86da      	strh	r2, [r3, #54]	; 0x36
 80053f6:	e011      	b.n	800541c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053f8:	f7fd fee4 	bl	80031c4 <HAL_GetTick>
 80053fc:	4602      	mov	r2, r0
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	683a      	ldr	r2, [r7, #0]
 8005404:	429a      	cmp	r2, r3
 8005406:	d803      	bhi.n	8005410 <HAL_SPI_Transmit+0x204>
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800540e:	d102      	bne.n	8005416 <HAL_SPI_Transmit+0x20a>
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d102      	bne.n	800541c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	77fb      	strb	r3, [r7, #31]
          goto error;
 800541a:	e026      	b.n	800546a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005420:	b29b      	uxth	r3, r3
 8005422:	2b00      	cmp	r3, #0
 8005424:	d1cd      	bne.n	80053c2 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005426:	69ba      	ldr	r2, [r7, #24]
 8005428:	6839      	ldr	r1, [r7, #0]
 800542a:	68f8      	ldr	r0, [r7, #12]
 800542c:	f000 fa62 	bl	80058f4 <SPI_EndRxTxTransaction>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d002      	beq.n	800543c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2220      	movs	r2, #32
 800543a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d10a      	bne.n	800545a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005444:	2300      	movs	r3, #0
 8005446:	613b      	str	r3, [r7, #16]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	613b      	str	r3, [r7, #16]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	613b      	str	r3, [r7, #16]
 8005458:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800545e:	2b00      	cmp	r3, #0
 8005460:	d002      	beq.n	8005468 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	77fb      	strb	r3, [r7, #31]
 8005466:	e000      	b.n	800546a <HAL_SPI_Transmit+0x25e>
  }

error:
 8005468:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2201      	movs	r2, #1
 800546e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800547a:	7ffb      	ldrb	r3, [r7, #31]
}
 800547c:	4618      	mov	r0, r3
 800547e:	3720      	adds	r7, #32
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b08c      	sub	sp, #48	; 0x30
 8005488:	af00      	add	r7, sp, #0
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	60b9      	str	r1, [r7, #8]
 800548e:	607a      	str	r2, [r7, #4]
 8005490:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005492:	2301      	movs	r3, #1
 8005494:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005496:	2300      	movs	r3, #0
 8005498:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d101      	bne.n	80054aa <HAL_SPI_TransmitReceive+0x26>
 80054a6:	2302      	movs	r3, #2
 80054a8:	e18a      	b.n	80057c0 <HAL_SPI_TransmitReceive+0x33c>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2201      	movs	r2, #1
 80054ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054b2:	f7fd fe87 	bl	80031c4 <HAL_GetTick>
 80054b6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80054c8:	887b      	ldrh	r3, [r7, #2]
 80054ca:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80054cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d00f      	beq.n	80054f4 <HAL_SPI_TransmitReceive+0x70>
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054da:	d107      	bne.n	80054ec <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d103      	bne.n	80054ec <HAL_SPI_TransmitReceive+0x68>
 80054e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80054e8:	2b04      	cmp	r3, #4
 80054ea:	d003      	beq.n	80054f4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80054ec:	2302      	movs	r3, #2
 80054ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80054f2:	e15b      	b.n	80057ac <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d005      	beq.n	8005506 <HAL_SPI_TransmitReceive+0x82>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d002      	beq.n	8005506 <HAL_SPI_TransmitReceive+0x82>
 8005500:	887b      	ldrh	r3, [r7, #2]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d103      	bne.n	800550e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800550c:	e14e      	b.n	80057ac <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005514:	b2db      	uxtb	r3, r3
 8005516:	2b04      	cmp	r3, #4
 8005518:	d003      	beq.n	8005522 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2205      	movs	r2, #5
 800551e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2200      	movs	r2, #0
 8005526:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	887a      	ldrh	r2, [r7, #2]
 8005532:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	887a      	ldrh	r2, [r7, #2]
 8005538:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	68ba      	ldr	r2, [r7, #8]
 800553e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	887a      	ldrh	r2, [r7, #2]
 8005544:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	887a      	ldrh	r2, [r7, #2]
 800554a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2200      	movs	r2, #0
 8005550:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2200      	movs	r2, #0
 8005556:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005562:	2b40      	cmp	r3, #64	; 0x40
 8005564:	d007      	beq.n	8005576 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005574:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800557e:	d178      	bne.n	8005672 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d002      	beq.n	800558e <HAL_SPI_TransmitReceive+0x10a>
 8005588:	8b7b      	ldrh	r3, [r7, #26]
 800558a:	2b01      	cmp	r3, #1
 800558c:	d166      	bne.n	800565c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005592:	881a      	ldrh	r2, [r3, #0]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800559e:	1c9a      	adds	r2, r3, #2
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	3b01      	subs	r3, #1
 80055ac:	b29a      	uxth	r2, r3
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055b2:	e053      	b.n	800565c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	f003 0302 	and.w	r3, r3, #2
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d11b      	bne.n	80055fa <HAL_SPI_TransmitReceive+0x176>
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d016      	beq.n	80055fa <HAL_SPI_TransmitReceive+0x176>
 80055cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d113      	bne.n	80055fa <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d6:	881a      	ldrh	r2, [r3, #0]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e2:	1c9a      	adds	r2, r3, #2
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	3b01      	subs	r3, #1
 80055f0:	b29a      	uxth	r2, r3
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80055f6:	2300      	movs	r3, #0
 80055f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	f003 0301 	and.w	r3, r3, #1
 8005604:	2b01      	cmp	r3, #1
 8005606:	d119      	bne.n	800563c <HAL_SPI_TransmitReceive+0x1b8>
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800560c:	b29b      	uxth	r3, r3
 800560e:	2b00      	cmp	r3, #0
 8005610:	d014      	beq.n	800563c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	68da      	ldr	r2, [r3, #12]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800561c:	b292      	uxth	r2, r2
 800561e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005624:	1c9a      	adds	r2, r3, #2
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800562e:	b29b      	uxth	r3, r3
 8005630:	3b01      	subs	r3, #1
 8005632:	b29a      	uxth	r2, r3
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005638:	2301      	movs	r3, #1
 800563a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800563c:	f7fd fdc2 	bl	80031c4 <HAL_GetTick>
 8005640:	4602      	mov	r2, r0
 8005642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005648:	429a      	cmp	r2, r3
 800564a:	d807      	bhi.n	800565c <HAL_SPI_TransmitReceive+0x1d8>
 800564c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800564e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005652:	d003      	beq.n	800565c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005654:	2303      	movs	r3, #3
 8005656:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800565a:	e0a7      	b.n	80057ac <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005660:	b29b      	uxth	r3, r3
 8005662:	2b00      	cmp	r3, #0
 8005664:	d1a6      	bne.n	80055b4 <HAL_SPI_TransmitReceive+0x130>
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800566a:	b29b      	uxth	r3, r3
 800566c:	2b00      	cmp	r3, #0
 800566e:	d1a1      	bne.n	80055b4 <HAL_SPI_TransmitReceive+0x130>
 8005670:	e07c      	b.n	800576c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d002      	beq.n	8005680 <HAL_SPI_TransmitReceive+0x1fc>
 800567a:	8b7b      	ldrh	r3, [r7, #26]
 800567c:	2b01      	cmp	r3, #1
 800567e:	d16b      	bne.n	8005758 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	330c      	adds	r3, #12
 800568a:	7812      	ldrb	r2, [r2, #0]
 800568c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005692:	1c5a      	adds	r2, r3, #1
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800569c:	b29b      	uxth	r3, r3
 800569e:	3b01      	subs	r3, #1
 80056a0:	b29a      	uxth	r2, r3
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056a6:	e057      	b.n	8005758 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	f003 0302 	and.w	r3, r3, #2
 80056b2:	2b02      	cmp	r3, #2
 80056b4:	d11c      	bne.n	80056f0 <HAL_SPI_TransmitReceive+0x26c>
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d017      	beq.n	80056f0 <HAL_SPI_TransmitReceive+0x26c>
 80056c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d114      	bne.n	80056f0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	330c      	adds	r3, #12
 80056d0:	7812      	ldrb	r2, [r2, #0]
 80056d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d8:	1c5a      	adds	r2, r3, #1
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	3b01      	subs	r3, #1
 80056e6:	b29a      	uxth	r2, r3
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80056ec:	2300      	movs	r3, #0
 80056ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	f003 0301 	and.w	r3, r3, #1
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d119      	bne.n	8005732 <HAL_SPI_TransmitReceive+0x2ae>
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005702:	b29b      	uxth	r3, r3
 8005704:	2b00      	cmp	r3, #0
 8005706:	d014      	beq.n	8005732 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68da      	ldr	r2, [r3, #12]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005712:	b2d2      	uxtb	r2, r2
 8005714:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800571a:	1c5a      	adds	r2, r3, #1
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005724:	b29b      	uxth	r3, r3
 8005726:	3b01      	subs	r3, #1
 8005728:	b29a      	uxth	r2, r3
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800572e:	2301      	movs	r3, #1
 8005730:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005732:	f7fd fd47 	bl	80031c4 <HAL_GetTick>
 8005736:	4602      	mov	r2, r0
 8005738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800573e:	429a      	cmp	r2, r3
 8005740:	d803      	bhi.n	800574a <HAL_SPI_TransmitReceive+0x2c6>
 8005742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005748:	d102      	bne.n	8005750 <HAL_SPI_TransmitReceive+0x2cc>
 800574a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800574c:	2b00      	cmp	r3, #0
 800574e:	d103      	bne.n	8005758 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005750:	2303      	movs	r3, #3
 8005752:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005756:	e029      	b.n	80057ac <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800575c:	b29b      	uxth	r3, r3
 800575e:	2b00      	cmp	r3, #0
 8005760:	d1a2      	bne.n	80056a8 <HAL_SPI_TransmitReceive+0x224>
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005766:	b29b      	uxth	r3, r3
 8005768:	2b00      	cmp	r3, #0
 800576a:	d19d      	bne.n	80056a8 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800576c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800576e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005770:	68f8      	ldr	r0, [r7, #12]
 8005772:	f000 f8bf 	bl	80058f4 <SPI_EndRxTxTransaction>
 8005776:	4603      	mov	r3, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d006      	beq.n	800578a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2220      	movs	r2, #32
 8005786:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005788:	e010      	b.n	80057ac <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d10b      	bne.n	80057aa <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005792:	2300      	movs	r3, #0
 8005794:	617b      	str	r3, [r7, #20]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	617b      	str	r3, [r7, #20]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	617b      	str	r3, [r7, #20]
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	e000      	b.n	80057ac <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80057aa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80057bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3730      	adds	r7, #48	; 0x30
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057d6:	b2db      	uxtb	r3, r3
}
 80057d8:	4618      	mov	r0, r3
 80057da:	370c      	adds	r7, #12
 80057dc:	46bd      	mov	sp, r7
 80057de:	bc80      	pop	{r7}
 80057e0:	4770      	bx	lr
	...

080057e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b088      	sub	sp, #32
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	60b9      	str	r1, [r7, #8]
 80057ee:	603b      	str	r3, [r7, #0]
 80057f0:	4613      	mov	r3, r2
 80057f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80057f4:	f7fd fce6 	bl	80031c4 <HAL_GetTick>
 80057f8:	4602      	mov	r2, r0
 80057fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057fc:	1a9b      	subs	r3, r3, r2
 80057fe:	683a      	ldr	r2, [r7, #0]
 8005800:	4413      	add	r3, r2
 8005802:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005804:	f7fd fcde 	bl	80031c4 <HAL_GetTick>
 8005808:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800580a:	4b39      	ldr	r3, [pc, #228]	; (80058f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	015b      	lsls	r3, r3, #5
 8005810:	0d1b      	lsrs	r3, r3, #20
 8005812:	69fa      	ldr	r2, [r7, #28]
 8005814:	fb02 f303 	mul.w	r3, r2, r3
 8005818:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800581a:	e054      	b.n	80058c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005822:	d050      	beq.n	80058c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005824:	f7fd fcce 	bl	80031c4 <HAL_GetTick>
 8005828:	4602      	mov	r2, r0
 800582a:	69bb      	ldr	r3, [r7, #24]
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	69fa      	ldr	r2, [r7, #28]
 8005830:	429a      	cmp	r2, r3
 8005832:	d902      	bls.n	800583a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d13d      	bne.n	80058b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	685a      	ldr	r2, [r3, #4]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005848:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005852:	d111      	bne.n	8005878 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800585c:	d004      	beq.n	8005868 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005866:	d107      	bne.n	8005878 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005876:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800587c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005880:	d10f      	bne.n	80058a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005890:	601a      	str	r2, [r3, #0]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2201      	movs	r2, #1
 80058a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
 80058b4:	e017      	b.n	80058e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d101      	bne.n	80058c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80058bc:	2300      	movs	r3, #0
 80058be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	3b01      	subs	r3, #1
 80058c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	689a      	ldr	r2, [r3, #8]
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	4013      	ands	r3, r2
 80058d0:	68ba      	ldr	r2, [r7, #8]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	bf0c      	ite	eq
 80058d6:	2301      	moveq	r3, #1
 80058d8:	2300      	movne	r3, #0
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	461a      	mov	r2, r3
 80058de:	79fb      	ldrb	r3, [r7, #7]
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d19b      	bne.n	800581c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80058e4:	2300      	movs	r3, #0
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3720      	adds	r7, #32
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	20000000 	.word	0x20000000

080058f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b086      	sub	sp, #24
 80058f8:	af02      	add	r7, sp, #8
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	60b9      	str	r1, [r7, #8]
 80058fe:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	9300      	str	r3, [sp, #0]
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	2200      	movs	r2, #0
 8005908:	2180      	movs	r1, #128	; 0x80
 800590a:	68f8      	ldr	r0, [r7, #12]
 800590c:	f7ff ff6a 	bl	80057e4 <SPI_WaitFlagStateUntilTimeout>
 8005910:	4603      	mov	r3, r0
 8005912:	2b00      	cmp	r3, #0
 8005914:	d007      	beq.n	8005926 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800591a:	f043 0220 	orr.w	r2, r3, #32
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005922:	2303      	movs	r3, #3
 8005924:	e000      	b.n	8005928 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005926:	2300      	movs	r3, #0
}
 8005928:	4618      	mov	r0, r3
 800592a:	3710      	adds	r7, #16
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b082      	sub	sp, #8
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d101      	bne.n	8005942 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e03f      	b.n	80059c2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005948:	b2db      	uxtb	r3, r3
 800594a:	2b00      	cmp	r3, #0
 800594c:	d106      	bne.n	800595c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f7fd fb64 	bl	8003024 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2224      	movs	r2, #36	; 0x24
 8005960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	68da      	ldr	r2, [r3, #12]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005972:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f000 fba9 	bl	80060cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	691a      	ldr	r2, [r3, #16]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005988:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	695a      	ldr	r2, [r3, #20]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005998:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	68da      	ldr	r2, [r3, #12]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2220      	movs	r2, #32
 80059b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2220      	movs	r2, #32
 80059bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3708      	adds	r7, #8
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}

080059ca <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059ca:	b580      	push	{r7, lr}
 80059cc:	b084      	sub	sp, #16
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	60f8      	str	r0, [r7, #12]
 80059d2:	60b9      	str	r1, [r7, #8]
 80059d4:	4613      	mov	r3, r2
 80059d6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	2b20      	cmp	r3, #32
 80059e2:	d11d      	bne.n	8005a20 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d002      	beq.n	80059f0 <HAL_UART_Receive_IT+0x26>
 80059ea:	88fb      	ldrh	r3, [r7, #6]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d101      	bne.n	80059f4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	e016      	b.n	8005a22 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d101      	bne.n	8005a02 <HAL_UART_Receive_IT+0x38>
 80059fe:	2302      	movs	r3, #2
 8005a00:	e00f      	b.n	8005a22 <HAL_UART_Receive_IT+0x58>
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2201      	movs	r2, #1
 8005a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005a10:	88fb      	ldrh	r3, [r7, #6]
 8005a12:	461a      	mov	r2, r3
 8005a14:	68b9      	ldr	r1, [r7, #8]
 8005a16:	68f8      	ldr	r0, [r7, #12]
 8005a18:	f000 f9cf 	bl	8005dba <UART_Start_Receive_IT>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	e000      	b.n	8005a22 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005a20:	2302      	movs	r3, #2
  }
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3710      	adds	r7, #16
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
	...

08005a2c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b08a      	sub	sp, #40	; 0x28
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	695b      	ldr	r3, [r3, #20]
 8005a4a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005a50:	2300      	movs	r3, #0
 8005a52:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a56:	f003 030f 	and.w	r3, r3, #15
 8005a5a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005a5c:	69bb      	ldr	r3, [r7, #24]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d10d      	bne.n	8005a7e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a64:	f003 0320 	and.w	r3, r3, #32
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d008      	beq.n	8005a7e <HAL_UART_IRQHandler+0x52>
 8005a6c:	6a3b      	ldr	r3, [r7, #32]
 8005a6e:	f003 0320 	and.w	r3, r3, #32
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d003      	beq.n	8005a7e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 fa7f 	bl	8005f7a <UART_Receive_IT>
      return;
 8005a7c:	e17b      	b.n	8005d76 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005a7e:	69bb      	ldr	r3, [r7, #24]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	f000 80b1 	beq.w	8005be8 <HAL_UART_IRQHandler+0x1bc>
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	f003 0301 	and.w	r3, r3, #1
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d105      	bne.n	8005a9c <HAL_UART_IRQHandler+0x70>
 8005a90:	6a3b      	ldr	r3, [r7, #32]
 8005a92:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	f000 80a6 	beq.w	8005be8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9e:	f003 0301 	and.w	r3, r3, #1
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d00a      	beq.n	8005abc <HAL_UART_IRQHandler+0x90>
 8005aa6:	6a3b      	ldr	r3, [r7, #32]
 8005aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d005      	beq.n	8005abc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab4:	f043 0201 	orr.w	r2, r3, #1
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005abe:	f003 0304 	and.w	r3, r3, #4
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d00a      	beq.n	8005adc <HAL_UART_IRQHandler+0xb0>
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	f003 0301 	and.w	r3, r3, #1
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d005      	beq.n	8005adc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad4:	f043 0202 	orr.w	r2, r3, #2
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ade:	f003 0302 	and.w	r3, r3, #2
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d00a      	beq.n	8005afc <HAL_UART_IRQHandler+0xd0>
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	f003 0301 	and.w	r3, r3, #1
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d005      	beq.n	8005afc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af4:	f043 0204 	orr.w	r2, r3, #4
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afe:	f003 0308 	and.w	r3, r3, #8
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d00f      	beq.n	8005b26 <HAL_UART_IRQHandler+0xfa>
 8005b06:	6a3b      	ldr	r3, [r7, #32]
 8005b08:	f003 0320 	and.w	r3, r3, #32
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d104      	bne.n	8005b1a <HAL_UART_IRQHandler+0xee>
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	f003 0301 	and.w	r3, r3, #1
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d005      	beq.n	8005b26 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1e:	f043 0208 	orr.w	r2, r3, #8
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	f000 811e 	beq.w	8005d6c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b32:	f003 0320 	and.w	r3, r3, #32
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d007      	beq.n	8005b4a <HAL_UART_IRQHandler+0x11e>
 8005b3a:	6a3b      	ldr	r3, [r7, #32]
 8005b3c:	f003 0320 	and.w	r3, r3, #32
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d002      	beq.n	8005b4a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f000 fa18 	bl	8005f7a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	695b      	ldr	r3, [r3, #20]
 8005b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	bf14      	ite	ne
 8005b58:	2301      	movne	r3, #1
 8005b5a:	2300      	moveq	r3, #0
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b64:	f003 0308 	and.w	r3, r3, #8
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d102      	bne.n	8005b72 <HAL_UART_IRQHandler+0x146>
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d031      	beq.n	8005bd6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 f95a 	bl	8005e2c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	695b      	ldr	r3, [r3, #20]
 8005b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d023      	beq.n	8005bce <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	695a      	ldr	r2, [r3, #20]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b94:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d013      	beq.n	8005bc6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba2:	4a76      	ldr	r2, [pc, #472]	; (8005d7c <HAL_UART_IRQHandler+0x350>)
 8005ba4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005baa:	4618      	mov	r0, r3
 8005bac:	f7fd fc80 	bl	80034b0 <HAL_DMA_Abort_IT>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d016      	beq.n	8005be4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005bc0:	4610      	mov	r0, r2
 8005bc2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bc4:	e00e      	b.n	8005be4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 f8e3 	bl	8005d92 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bcc:	e00a      	b.n	8005be4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 f8df 	bl	8005d92 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bd4:	e006      	b.n	8005be4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 f8db 	bl	8005d92 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005be2:	e0c3      	b.n	8005d6c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005be4:	bf00      	nop
    return;
 8005be6:	e0c1      	b.n	8005d6c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	f040 80a1 	bne.w	8005d34 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf4:	f003 0310 	and.w	r3, r3, #16
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	f000 809b 	beq.w	8005d34 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005bfe:	6a3b      	ldr	r3, [r7, #32]
 8005c00:	f003 0310 	and.w	r3, r3, #16
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	f000 8095 	beq.w	8005d34 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	60fb      	str	r3, [r7, #12]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	60fb      	str	r3, [r7, #12]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	60fb      	str	r3, [r7, #12]
 8005c1e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	695b      	ldr	r3, [r3, #20]
 8005c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d04e      	beq.n	8005ccc <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005c38:	8a3b      	ldrh	r3, [r7, #16]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	f000 8098 	beq.w	8005d70 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005c44:	8a3a      	ldrh	r2, [r7, #16]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	f080 8092 	bcs.w	8005d70 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	8a3a      	ldrh	r2, [r7, #16]
 8005c50:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c56:	699b      	ldr	r3, [r3, #24]
 8005c58:	2b20      	cmp	r3, #32
 8005c5a:	d02b      	beq.n	8005cb4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68da      	ldr	r2, [r3, #12]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c6a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	695a      	ldr	r2, [r3, #20]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f022 0201 	bic.w	r2, r2, #1
 8005c7a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	695a      	ldr	r2, [r3, #20]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c8a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2220      	movs	r2, #32
 8005c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	68da      	ldr	r2, [r3, #12]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f022 0210 	bic.w	r2, r2, #16
 8005ca8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f7fd fbc3 	bl	800343a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	1ad3      	subs	r3, r2, r3
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	4619      	mov	r1, r3
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f000 f86d 	bl	8005da4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005cca:	e051      	b.n	8005d70 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	1ad3      	subs	r3, r2, r3
 8005cd8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d047      	beq.n	8005d74 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8005ce4:	8a7b      	ldrh	r3, [r7, #18]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d044      	beq.n	8005d74 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	68da      	ldr	r2, [r3, #12]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005cf8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	695a      	ldr	r2, [r3, #20]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f022 0201 	bic.w	r2, r2, #1
 8005d08:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2220      	movs	r2, #32
 8005d0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	68da      	ldr	r2, [r3, #12]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f022 0210 	bic.w	r2, r2, #16
 8005d26:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d28:	8a7b      	ldrh	r3, [r7, #18]
 8005d2a:	4619      	mov	r1, r3
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f000 f839 	bl	8005da4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005d32:	e01f      	b.n	8005d74 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d008      	beq.n	8005d50 <HAL_UART_IRQHandler+0x324>
 8005d3e:	6a3b      	ldr	r3, [r7, #32]
 8005d40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d003      	beq.n	8005d50 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 f8af 	bl	8005eac <UART_Transmit_IT>
    return;
 8005d4e:	e012      	b.n	8005d76 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d00d      	beq.n	8005d76 <HAL_UART_IRQHandler+0x34a>
 8005d5a:	6a3b      	ldr	r3, [r7, #32]
 8005d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d008      	beq.n	8005d76 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f000 f8f0 	bl	8005f4a <UART_EndTransmit_IT>
    return;
 8005d6a:	e004      	b.n	8005d76 <HAL_UART_IRQHandler+0x34a>
    return;
 8005d6c:	bf00      	nop
 8005d6e:	e002      	b.n	8005d76 <HAL_UART_IRQHandler+0x34a>
      return;
 8005d70:	bf00      	nop
 8005d72:	e000      	b.n	8005d76 <HAL_UART_IRQHandler+0x34a>
      return;
 8005d74:	bf00      	nop
  }
}
 8005d76:	3728      	adds	r7, #40	; 0x28
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	08005e85 	.word	0x08005e85

08005d80 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b083      	sub	sp, #12
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005d88:	bf00      	nop
 8005d8a:	370c      	adds	r7, #12
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bc80      	pop	{r7}
 8005d90:	4770      	bx	lr

08005d92 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d92:	b480      	push	{r7}
 8005d94:	b083      	sub	sp, #12
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005d9a:	bf00      	nop
 8005d9c:	370c      	adds	r7, #12
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bc80      	pop	{r7}
 8005da2:	4770      	bx	lr

08005da4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	460b      	mov	r3, r1
 8005dae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005db0:	bf00      	nop
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bc80      	pop	{r7}
 8005db8:	4770      	bx	lr

08005dba <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005dba:	b480      	push	{r7}
 8005dbc:	b085      	sub	sp, #20
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	60f8      	str	r0, [r7, #12]
 8005dc2:	60b9      	str	r1, [r7, #8]
 8005dc4:	4613      	mov	r3, r2
 8005dc6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	68ba      	ldr	r2, [r7, #8]
 8005dcc:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	88fa      	ldrh	r2, [r7, #6]
 8005dd2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	88fa      	ldrh	r2, [r7, #6]
 8005dd8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2222      	movs	r2, #34	; 0x22
 8005de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2200      	movs	r2, #0
 8005dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	68da      	ldr	r2, [r3, #12]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005dfe:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	695a      	ldr	r2, [r3, #20]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f042 0201 	orr.w	r2, r2, #1
 8005e0e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	68da      	ldr	r2, [r3, #12]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f042 0220 	orr.w	r2, r2, #32
 8005e1e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3714      	adds	r7, #20
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bc80      	pop	{r7}
 8005e2a:	4770      	bx	lr

08005e2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b083      	sub	sp, #12
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	68da      	ldr	r2, [r3, #12]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005e42:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	695a      	ldr	r2, [r3, #20]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f022 0201 	bic.w	r2, r2, #1
 8005e52:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d107      	bne.n	8005e6c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	68da      	ldr	r2, [r3, #12]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f022 0210 	bic.w	r2, r2, #16
 8005e6a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2220      	movs	r2, #32
 8005e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005e7a:	bf00      	nop
 8005e7c:	370c      	adds	r7, #12
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bc80      	pop	{r7}
 8005e82:	4770      	bx	lr

08005e84 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b084      	sub	sp, #16
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e90:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2200      	movs	r2, #0
 8005e96:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e9e:	68f8      	ldr	r0, [r7, #12]
 8005ea0:	f7ff ff77 	bl	8005d92 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ea4:	bf00      	nop
 8005ea6:	3710      	adds	r7, #16
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b085      	sub	sp, #20
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	2b21      	cmp	r3, #33	; 0x21
 8005ebe:	d13e      	bne.n	8005f3e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ec8:	d114      	bne.n	8005ef4 <UART_Transmit_IT+0x48>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	691b      	ldr	r3, [r3, #16]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d110      	bne.n	8005ef4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6a1b      	ldr	r3, [r3, #32]
 8005ed6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	881b      	ldrh	r3, [r3, #0]
 8005edc:	461a      	mov	r2, r3
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ee6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6a1b      	ldr	r3, [r3, #32]
 8005eec:	1c9a      	adds	r2, r3, #2
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	621a      	str	r2, [r3, #32]
 8005ef2:	e008      	b.n	8005f06 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6a1b      	ldr	r3, [r3, #32]
 8005ef8:	1c59      	adds	r1, r3, #1
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	6211      	str	r1, [r2, #32]
 8005efe:	781a      	ldrb	r2, [r3, #0]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	3b01      	subs	r3, #1
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	4619      	mov	r1, r3
 8005f14:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d10f      	bne.n	8005f3a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	68da      	ldr	r2, [r3, #12]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f28:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	68da      	ldr	r2, [r3, #12]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f38:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	e000      	b.n	8005f40 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005f3e:	2302      	movs	r3, #2
  }
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3714      	adds	r7, #20
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bc80      	pop	{r7}
 8005f48:	4770      	bx	lr

08005f4a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f4a:	b580      	push	{r7, lr}
 8005f4c:	b082      	sub	sp, #8
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68da      	ldr	r2, [r3, #12]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f60:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2220      	movs	r2, #32
 8005f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f7ff ff08 	bl	8005d80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3708      	adds	r7, #8
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}

08005f7a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005f7a:	b580      	push	{r7, lr}
 8005f7c:	b086      	sub	sp, #24
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	2b22      	cmp	r3, #34	; 0x22
 8005f8c:	f040 8099 	bne.w	80060c2 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f98:	d117      	bne.n	8005fca <UART_Receive_IT+0x50>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	691b      	ldr	r3, [r3, #16]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d113      	bne.n	8005fca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005faa:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fb8:	b29a      	uxth	r2, r3
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fc2:	1c9a      	adds	r2, r3, #2
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	629a      	str	r2, [r3, #40]	; 0x28
 8005fc8:	e026      	b.n	8006018 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fce:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fdc:	d007      	beq.n	8005fee <UART_Receive_IT+0x74>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d10a      	bne.n	8005ffc <UART_Receive_IT+0x82>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	691b      	ldr	r3, [r3, #16]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d106      	bne.n	8005ffc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	b2da      	uxtb	r2, r3
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	701a      	strb	r2, [r3, #0]
 8005ffa:	e008      	b.n	800600e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	b2db      	uxtb	r3, r3
 8006004:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006008:	b2da      	uxtb	r2, r3
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006012:	1c5a      	adds	r2, r3, #1
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800601c:	b29b      	uxth	r3, r3
 800601e:	3b01      	subs	r3, #1
 8006020:	b29b      	uxth	r3, r3
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	4619      	mov	r1, r3
 8006026:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006028:	2b00      	cmp	r3, #0
 800602a:	d148      	bne.n	80060be <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	68da      	ldr	r2, [r3, #12]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f022 0220 	bic.w	r2, r2, #32
 800603a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	68da      	ldr	r2, [r3, #12]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800604a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	695a      	ldr	r2, [r3, #20]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f022 0201 	bic.w	r2, r2, #1
 800605a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2220      	movs	r2, #32
 8006060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006068:	2b01      	cmp	r3, #1
 800606a:	d123      	bne.n	80060b4 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	68da      	ldr	r2, [r3, #12]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f022 0210 	bic.w	r2, r2, #16
 8006080:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f003 0310 	and.w	r3, r3, #16
 800608c:	2b10      	cmp	r3, #16
 800608e:	d10a      	bne.n	80060a6 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006090:	2300      	movs	r3, #0
 8006092:	60fb      	str	r3, [r7, #12]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	60fb      	str	r3, [r7, #12]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	60fb      	str	r3, [r7, #12]
 80060a4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80060aa:	4619      	mov	r1, r3
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f7ff fe79 	bl	8005da4 <HAL_UARTEx_RxEventCallback>
 80060b2:	e002      	b.n	80060ba <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f7fc fbb9 	bl	800282c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80060ba:	2300      	movs	r3, #0
 80060bc:	e002      	b.n	80060c4 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80060be:	2300      	movs	r3, #0
 80060c0:	e000      	b.n	80060c4 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80060c2:	2302      	movs	r3, #2
  }
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3718      	adds	r7, #24
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b084      	sub	sp, #16
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	68da      	ldr	r2, [r3, #12]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	430a      	orrs	r2, r1
 80060e8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	689a      	ldr	r2, [r3, #8]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	431a      	orrs	r2, r3
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	695b      	ldr	r3, [r3, #20]
 80060f8:	4313      	orrs	r3, r2
 80060fa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006106:	f023 030c 	bic.w	r3, r3, #12
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	6812      	ldr	r2, [r2, #0]
 800610e:	68b9      	ldr	r1, [r7, #8]
 8006110:	430b      	orrs	r3, r1
 8006112:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	695b      	ldr	r3, [r3, #20]
 800611a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	699a      	ldr	r2, [r3, #24]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	430a      	orrs	r2, r1
 8006128:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a2c      	ldr	r2, [pc, #176]	; (80061e0 <UART_SetConfig+0x114>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d103      	bne.n	800613c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006134:	f7fe ffb4 	bl	80050a0 <HAL_RCC_GetPCLK2Freq>
 8006138:	60f8      	str	r0, [r7, #12]
 800613a:	e002      	b.n	8006142 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800613c:	f7fe ff9c 	bl	8005078 <HAL_RCC_GetPCLK1Freq>
 8006140:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006142:	68fa      	ldr	r2, [r7, #12]
 8006144:	4613      	mov	r3, r2
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	4413      	add	r3, r2
 800614a:	009a      	lsls	r2, r3, #2
 800614c:	441a      	add	r2, r3
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	fbb2 f3f3 	udiv	r3, r2, r3
 8006158:	4a22      	ldr	r2, [pc, #136]	; (80061e4 <UART_SetConfig+0x118>)
 800615a:	fba2 2303 	umull	r2, r3, r2, r3
 800615e:	095b      	lsrs	r3, r3, #5
 8006160:	0119      	lsls	r1, r3, #4
 8006162:	68fa      	ldr	r2, [r7, #12]
 8006164:	4613      	mov	r3, r2
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	4413      	add	r3, r2
 800616a:	009a      	lsls	r2, r3, #2
 800616c:	441a      	add	r2, r3
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	fbb2 f2f3 	udiv	r2, r2, r3
 8006178:	4b1a      	ldr	r3, [pc, #104]	; (80061e4 <UART_SetConfig+0x118>)
 800617a:	fba3 0302 	umull	r0, r3, r3, r2
 800617e:	095b      	lsrs	r3, r3, #5
 8006180:	2064      	movs	r0, #100	; 0x64
 8006182:	fb00 f303 	mul.w	r3, r0, r3
 8006186:	1ad3      	subs	r3, r2, r3
 8006188:	011b      	lsls	r3, r3, #4
 800618a:	3332      	adds	r3, #50	; 0x32
 800618c:	4a15      	ldr	r2, [pc, #84]	; (80061e4 <UART_SetConfig+0x118>)
 800618e:	fba2 2303 	umull	r2, r3, r2, r3
 8006192:	095b      	lsrs	r3, r3, #5
 8006194:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006198:	4419      	add	r1, r3
 800619a:	68fa      	ldr	r2, [r7, #12]
 800619c:	4613      	mov	r3, r2
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	4413      	add	r3, r2
 80061a2:	009a      	lsls	r2, r3, #2
 80061a4:	441a      	add	r2, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80061b0:	4b0c      	ldr	r3, [pc, #48]	; (80061e4 <UART_SetConfig+0x118>)
 80061b2:	fba3 0302 	umull	r0, r3, r3, r2
 80061b6:	095b      	lsrs	r3, r3, #5
 80061b8:	2064      	movs	r0, #100	; 0x64
 80061ba:	fb00 f303 	mul.w	r3, r0, r3
 80061be:	1ad3      	subs	r3, r2, r3
 80061c0:	011b      	lsls	r3, r3, #4
 80061c2:	3332      	adds	r3, #50	; 0x32
 80061c4:	4a07      	ldr	r2, [pc, #28]	; (80061e4 <UART_SetConfig+0x118>)
 80061c6:	fba2 2303 	umull	r2, r3, r2, r3
 80061ca:	095b      	lsrs	r3, r3, #5
 80061cc:	f003 020f 	and.w	r2, r3, #15
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	440a      	add	r2, r1
 80061d6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80061d8:	bf00      	nop
 80061da:	3710      	adds	r7, #16
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	40013800 	.word	0x40013800
 80061e4:	51eb851f 	.word	0x51eb851f

080061e8 <__errno>:
 80061e8:	4b01      	ldr	r3, [pc, #4]	; (80061f0 <__errno+0x8>)
 80061ea:	6818      	ldr	r0, [r3, #0]
 80061ec:	4770      	bx	lr
 80061ee:	bf00      	nop
 80061f0:	2000000c 	.word	0x2000000c

080061f4 <__libc_init_array>:
 80061f4:	b570      	push	{r4, r5, r6, lr}
 80061f6:	2600      	movs	r6, #0
 80061f8:	4d0c      	ldr	r5, [pc, #48]	; (800622c <__libc_init_array+0x38>)
 80061fa:	4c0d      	ldr	r4, [pc, #52]	; (8006230 <__libc_init_array+0x3c>)
 80061fc:	1b64      	subs	r4, r4, r5
 80061fe:	10a4      	asrs	r4, r4, #2
 8006200:	42a6      	cmp	r6, r4
 8006202:	d109      	bne.n	8006218 <__libc_init_array+0x24>
 8006204:	f003 f95e 	bl	80094c4 <_init>
 8006208:	2600      	movs	r6, #0
 800620a:	4d0a      	ldr	r5, [pc, #40]	; (8006234 <__libc_init_array+0x40>)
 800620c:	4c0a      	ldr	r4, [pc, #40]	; (8006238 <__libc_init_array+0x44>)
 800620e:	1b64      	subs	r4, r4, r5
 8006210:	10a4      	asrs	r4, r4, #2
 8006212:	42a6      	cmp	r6, r4
 8006214:	d105      	bne.n	8006222 <__libc_init_array+0x2e>
 8006216:	bd70      	pop	{r4, r5, r6, pc}
 8006218:	f855 3b04 	ldr.w	r3, [r5], #4
 800621c:	4798      	blx	r3
 800621e:	3601      	adds	r6, #1
 8006220:	e7ee      	b.n	8006200 <__libc_init_array+0xc>
 8006222:	f855 3b04 	ldr.w	r3, [r5], #4
 8006226:	4798      	blx	r3
 8006228:	3601      	adds	r6, #1
 800622a:	e7f2      	b.n	8006212 <__libc_init_array+0x1e>
 800622c:	080099f0 	.word	0x080099f0
 8006230:	080099f0 	.word	0x080099f0
 8006234:	080099f0 	.word	0x080099f0
 8006238:	080099f4 	.word	0x080099f4

0800623c <malloc>:
 800623c:	4b02      	ldr	r3, [pc, #8]	; (8006248 <malloc+0xc>)
 800623e:	4601      	mov	r1, r0
 8006240:	6818      	ldr	r0, [r3, #0]
 8006242:	f000 b881 	b.w	8006348 <_malloc_r>
 8006246:	bf00      	nop
 8006248:	2000000c 	.word	0x2000000c

0800624c <memcpy>:
 800624c:	440a      	add	r2, r1
 800624e:	4291      	cmp	r1, r2
 8006250:	f100 33ff 	add.w	r3, r0, #4294967295
 8006254:	d100      	bne.n	8006258 <memcpy+0xc>
 8006256:	4770      	bx	lr
 8006258:	b510      	push	{r4, lr}
 800625a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800625e:	4291      	cmp	r1, r2
 8006260:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006264:	d1f9      	bne.n	800625a <memcpy+0xe>
 8006266:	bd10      	pop	{r4, pc}

08006268 <memset>:
 8006268:	4603      	mov	r3, r0
 800626a:	4402      	add	r2, r0
 800626c:	4293      	cmp	r3, r2
 800626e:	d100      	bne.n	8006272 <memset+0xa>
 8006270:	4770      	bx	lr
 8006272:	f803 1b01 	strb.w	r1, [r3], #1
 8006276:	e7f9      	b.n	800626c <memset+0x4>

08006278 <_free_r>:
 8006278:	b538      	push	{r3, r4, r5, lr}
 800627a:	4605      	mov	r5, r0
 800627c:	2900      	cmp	r1, #0
 800627e:	d040      	beq.n	8006302 <_free_r+0x8a>
 8006280:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006284:	1f0c      	subs	r4, r1, #4
 8006286:	2b00      	cmp	r3, #0
 8006288:	bfb8      	it	lt
 800628a:	18e4      	addlt	r4, r4, r3
 800628c:	f001 fbec 	bl	8007a68 <__malloc_lock>
 8006290:	4a1c      	ldr	r2, [pc, #112]	; (8006304 <_free_r+0x8c>)
 8006292:	6813      	ldr	r3, [r2, #0]
 8006294:	b933      	cbnz	r3, 80062a4 <_free_r+0x2c>
 8006296:	6063      	str	r3, [r4, #4]
 8006298:	6014      	str	r4, [r2, #0]
 800629a:	4628      	mov	r0, r5
 800629c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062a0:	f001 bbe8 	b.w	8007a74 <__malloc_unlock>
 80062a4:	42a3      	cmp	r3, r4
 80062a6:	d908      	bls.n	80062ba <_free_r+0x42>
 80062a8:	6820      	ldr	r0, [r4, #0]
 80062aa:	1821      	adds	r1, r4, r0
 80062ac:	428b      	cmp	r3, r1
 80062ae:	bf01      	itttt	eq
 80062b0:	6819      	ldreq	r1, [r3, #0]
 80062b2:	685b      	ldreq	r3, [r3, #4]
 80062b4:	1809      	addeq	r1, r1, r0
 80062b6:	6021      	streq	r1, [r4, #0]
 80062b8:	e7ed      	b.n	8006296 <_free_r+0x1e>
 80062ba:	461a      	mov	r2, r3
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	b10b      	cbz	r3, 80062c4 <_free_r+0x4c>
 80062c0:	42a3      	cmp	r3, r4
 80062c2:	d9fa      	bls.n	80062ba <_free_r+0x42>
 80062c4:	6811      	ldr	r1, [r2, #0]
 80062c6:	1850      	adds	r0, r2, r1
 80062c8:	42a0      	cmp	r0, r4
 80062ca:	d10b      	bne.n	80062e4 <_free_r+0x6c>
 80062cc:	6820      	ldr	r0, [r4, #0]
 80062ce:	4401      	add	r1, r0
 80062d0:	1850      	adds	r0, r2, r1
 80062d2:	4283      	cmp	r3, r0
 80062d4:	6011      	str	r1, [r2, #0]
 80062d6:	d1e0      	bne.n	800629a <_free_r+0x22>
 80062d8:	6818      	ldr	r0, [r3, #0]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	4401      	add	r1, r0
 80062de:	6011      	str	r1, [r2, #0]
 80062e0:	6053      	str	r3, [r2, #4]
 80062e2:	e7da      	b.n	800629a <_free_r+0x22>
 80062e4:	d902      	bls.n	80062ec <_free_r+0x74>
 80062e6:	230c      	movs	r3, #12
 80062e8:	602b      	str	r3, [r5, #0]
 80062ea:	e7d6      	b.n	800629a <_free_r+0x22>
 80062ec:	6820      	ldr	r0, [r4, #0]
 80062ee:	1821      	adds	r1, r4, r0
 80062f0:	428b      	cmp	r3, r1
 80062f2:	bf01      	itttt	eq
 80062f4:	6819      	ldreq	r1, [r3, #0]
 80062f6:	685b      	ldreq	r3, [r3, #4]
 80062f8:	1809      	addeq	r1, r1, r0
 80062fa:	6021      	streq	r1, [r4, #0]
 80062fc:	6063      	str	r3, [r4, #4]
 80062fe:	6054      	str	r4, [r2, #4]
 8006300:	e7cb      	b.n	800629a <_free_r+0x22>
 8006302:	bd38      	pop	{r3, r4, r5, pc}
 8006304:	20000754 	.word	0x20000754

08006308 <sbrk_aligned>:
 8006308:	b570      	push	{r4, r5, r6, lr}
 800630a:	4e0e      	ldr	r6, [pc, #56]	; (8006344 <sbrk_aligned+0x3c>)
 800630c:	460c      	mov	r4, r1
 800630e:	6831      	ldr	r1, [r6, #0]
 8006310:	4605      	mov	r5, r0
 8006312:	b911      	cbnz	r1, 800631a <sbrk_aligned+0x12>
 8006314:	f000 fcec 	bl	8006cf0 <_sbrk_r>
 8006318:	6030      	str	r0, [r6, #0]
 800631a:	4621      	mov	r1, r4
 800631c:	4628      	mov	r0, r5
 800631e:	f000 fce7 	bl	8006cf0 <_sbrk_r>
 8006322:	1c43      	adds	r3, r0, #1
 8006324:	d00a      	beq.n	800633c <sbrk_aligned+0x34>
 8006326:	1cc4      	adds	r4, r0, #3
 8006328:	f024 0403 	bic.w	r4, r4, #3
 800632c:	42a0      	cmp	r0, r4
 800632e:	d007      	beq.n	8006340 <sbrk_aligned+0x38>
 8006330:	1a21      	subs	r1, r4, r0
 8006332:	4628      	mov	r0, r5
 8006334:	f000 fcdc 	bl	8006cf0 <_sbrk_r>
 8006338:	3001      	adds	r0, #1
 800633a:	d101      	bne.n	8006340 <sbrk_aligned+0x38>
 800633c:	f04f 34ff 	mov.w	r4, #4294967295
 8006340:	4620      	mov	r0, r4
 8006342:	bd70      	pop	{r4, r5, r6, pc}
 8006344:	20000758 	.word	0x20000758

08006348 <_malloc_r>:
 8006348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800634c:	1ccd      	adds	r5, r1, #3
 800634e:	f025 0503 	bic.w	r5, r5, #3
 8006352:	3508      	adds	r5, #8
 8006354:	2d0c      	cmp	r5, #12
 8006356:	bf38      	it	cc
 8006358:	250c      	movcc	r5, #12
 800635a:	2d00      	cmp	r5, #0
 800635c:	4607      	mov	r7, r0
 800635e:	db01      	blt.n	8006364 <_malloc_r+0x1c>
 8006360:	42a9      	cmp	r1, r5
 8006362:	d905      	bls.n	8006370 <_malloc_r+0x28>
 8006364:	230c      	movs	r3, #12
 8006366:	2600      	movs	r6, #0
 8006368:	603b      	str	r3, [r7, #0]
 800636a:	4630      	mov	r0, r6
 800636c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006370:	4e2e      	ldr	r6, [pc, #184]	; (800642c <_malloc_r+0xe4>)
 8006372:	f001 fb79 	bl	8007a68 <__malloc_lock>
 8006376:	6833      	ldr	r3, [r6, #0]
 8006378:	461c      	mov	r4, r3
 800637a:	bb34      	cbnz	r4, 80063ca <_malloc_r+0x82>
 800637c:	4629      	mov	r1, r5
 800637e:	4638      	mov	r0, r7
 8006380:	f7ff ffc2 	bl	8006308 <sbrk_aligned>
 8006384:	1c43      	adds	r3, r0, #1
 8006386:	4604      	mov	r4, r0
 8006388:	d14d      	bne.n	8006426 <_malloc_r+0xde>
 800638a:	6834      	ldr	r4, [r6, #0]
 800638c:	4626      	mov	r6, r4
 800638e:	2e00      	cmp	r6, #0
 8006390:	d140      	bne.n	8006414 <_malloc_r+0xcc>
 8006392:	6823      	ldr	r3, [r4, #0]
 8006394:	4631      	mov	r1, r6
 8006396:	4638      	mov	r0, r7
 8006398:	eb04 0803 	add.w	r8, r4, r3
 800639c:	f000 fca8 	bl	8006cf0 <_sbrk_r>
 80063a0:	4580      	cmp	r8, r0
 80063a2:	d13a      	bne.n	800641a <_malloc_r+0xd2>
 80063a4:	6821      	ldr	r1, [r4, #0]
 80063a6:	3503      	adds	r5, #3
 80063a8:	1a6d      	subs	r5, r5, r1
 80063aa:	f025 0503 	bic.w	r5, r5, #3
 80063ae:	3508      	adds	r5, #8
 80063b0:	2d0c      	cmp	r5, #12
 80063b2:	bf38      	it	cc
 80063b4:	250c      	movcc	r5, #12
 80063b6:	4638      	mov	r0, r7
 80063b8:	4629      	mov	r1, r5
 80063ba:	f7ff ffa5 	bl	8006308 <sbrk_aligned>
 80063be:	3001      	adds	r0, #1
 80063c0:	d02b      	beq.n	800641a <_malloc_r+0xd2>
 80063c2:	6823      	ldr	r3, [r4, #0]
 80063c4:	442b      	add	r3, r5
 80063c6:	6023      	str	r3, [r4, #0]
 80063c8:	e00e      	b.n	80063e8 <_malloc_r+0xa0>
 80063ca:	6822      	ldr	r2, [r4, #0]
 80063cc:	1b52      	subs	r2, r2, r5
 80063ce:	d41e      	bmi.n	800640e <_malloc_r+0xc6>
 80063d0:	2a0b      	cmp	r2, #11
 80063d2:	d916      	bls.n	8006402 <_malloc_r+0xba>
 80063d4:	1961      	adds	r1, r4, r5
 80063d6:	42a3      	cmp	r3, r4
 80063d8:	6025      	str	r5, [r4, #0]
 80063da:	bf18      	it	ne
 80063dc:	6059      	strne	r1, [r3, #4]
 80063de:	6863      	ldr	r3, [r4, #4]
 80063e0:	bf08      	it	eq
 80063e2:	6031      	streq	r1, [r6, #0]
 80063e4:	5162      	str	r2, [r4, r5]
 80063e6:	604b      	str	r3, [r1, #4]
 80063e8:	4638      	mov	r0, r7
 80063ea:	f104 060b 	add.w	r6, r4, #11
 80063ee:	f001 fb41 	bl	8007a74 <__malloc_unlock>
 80063f2:	f026 0607 	bic.w	r6, r6, #7
 80063f6:	1d23      	adds	r3, r4, #4
 80063f8:	1af2      	subs	r2, r6, r3
 80063fa:	d0b6      	beq.n	800636a <_malloc_r+0x22>
 80063fc:	1b9b      	subs	r3, r3, r6
 80063fe:	50a3      	str	r3, [r4, r2]
 8006400:	e7b3      	b.n	800636a <_malloc_r+0x22>
 8006402:	6862      	ldr	r2, [r4, #4]
 8006404:	42a3      	cmp	r3, r4
 8006406:	bf0c      	ite	eq
 8006408:	6032      	streq	r2, [r6, #0]
 800640a:	605a      	strne	r2, [r3, #4]
 800640c:	e7ec      	b.n	80063e8 <_malloc_r+0xa0>
 800640e:	4623      	mov	r3, r4
 8006410:	6864      	ldr	r4, [r4, #4]
 8006412:	e7b2      	b.n	800637a <_malloc_r+0x32>
 8006414:	4634      	mov	r4, r6
 8006416:	6876      	ldr	r6, [r6, #4]
 8006418:	e7b9      	b.n	800638e <_malloc_r+0x46>
 800641a:	230c      	movs	r3, #12
 800641c:	4638      	mov	r0, r7
 800641e:	603b      	str	r3, [r7, #0]
 8006420:	f001 fb28 	bl	8007a74 <__malloc_unlock>
 8006424:	e7a1      	b.n	800636a <_malloc_r+0x22>
 8006426:	6025      	str	r5, [r4, #0]
 8006428:	e7de      	b.n	80063e8 <_malloc_r+0xa0>
 800642a:	bf00      	nop
 800642c:	20000754 	.word	0x20000754

08006430 <__cvt>:
 8006430:	2b00      	cmp	r3, #0
 8006432:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006436:	461f      	mov	r7, r3
 8006438:	bfbb      	ittet	lt
 800643a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800643e:	461f      	movlt	r7, r3
 8006440:	2300      	movge	r3, #0
 8006442:	232d      	movlt	r3, #45	; 0x2d
 8006444:	b088      	sub	sp, #32
 8006446:	4614      	mov	r4, r2
 8006448:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800644a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800644c:	7013      	strb	r3, [r2, #0]
 800644e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006450:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006454:	f023 0820 	bic.w	r8, r3, #32
 8006458:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800645c:	d005      	beq.n	800646a <__cvt+0x3a>
 800645e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006462:	d100      	bne.n	8006466 <__cvt+0x36>
 8006464:	3501      	adds	r5, #1
 8006466:	2302      	movs	r3, #2
 8006468:	e000      	b.n	800646c <__cvt+0x3c>
 800646a:	2303      	movs	r3, #3
 800646c:	aa07      	add	r2, sp, #28
 800646e:	9204      	str	r2, [sp, #16]
 8006470:	aa06      	add	r2, sp, #24
 8006472:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006476:	e9cd 3500 	strd	r3, r5, [sp]
 800647a:	4622      	mov	r2, r4
 800647c:	463b      	mov	r3, r7
 800647e:	f000 fcf3 	bl	8006e68 <_dtoa_r>
 8006482:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006486:	4606      	mov	r6, r0
 8006488:	d102      	bne.n	8006490 <__cvt+0x60>
 800648a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800648c:	07db      	lsls	r3, r3, #31
 800648e:	d522      	bpl.n	80064d6 <__cvt+0xa6>
 8006490:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006494:	eb06 0905 	add.w	r9, r6, r5
 8006498:	d110      	bne.n	80064bc <__cvt+0x8c>
 800649a:	7833      	ldrb	r3, [r6, #0]
 800649c:	2b30      	cmp	r3, #48	; 0x30
 800649e:	d10a      	bne.n	80064b6 <__cvt+0x86>
 80064a0:	2200      	movs	r2, #0
 80064a2:	2300      	movs	r3, #0
 80064a4:	4620      	mov	r0, r4
 80064a6:	4639      	mov	r1, r7
 80064a8:	f7fa fa7e 	bl	80009a8 <__aeabi_dcmpeq>
 80064ac:	b918      	cbnz	r0, 80064b6 <__cvt+0x86>
 80064ae:	f1c5 0501 	rsb	r5, r5, #1
 80064b2:	f8ca 5000 	str.w	r5, [sl]
 80064b6:	f8da 3000 	ldr.w	r3, [sl]
 80064ba:	4499      	add	r9, r3
 80064bc:	2200      	movs	r2, #0
 80064be:	2300      	movs	r3, #0
 80064c0:	4620      	mov	r0, r4
 80064c2:	4639      	mov	r1, r7
 80064c4:	f7fa fa70 	bl	80009a8 <__aeabi_dcmpeq>
 80064c8:	b108      	cbz	r0, 80064ce <__cvt+0x9e>
 80064ca:	f8cd 901c 	str.w	r9, [sp, #28]
 80064ce:	2230      	movs	r2, #48	; 0x30
 80064d0:	9b07      	ldr	r3, [sp, #28]
 80064d2:	454b      	cmp	r3, r9
 80064d4:	d307      	bcc.n	80064e6 <__cvt+0xb6>
 80064d6:	4630      	mov	r0, r6
 80064d8:	9b07      	ldr	r3, [sp, #28]
 80064da:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80064dc:	1b9b      	subs	r3, r3, r6
 80064de:	6013      	str	r3, [r2, #0]
 80064e0:	b008      	add	sp, #32
 80064e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064e6:	1c59      	adds	r1, r3, #1
 80064e8:	9107      	str	r1, [sp, #28]
 80064ea:	701a      	strb	r2, [r3, #0]
 80064ec:	e7f0      	b.n	80064d0 <__cvt+0xa0>

080064ee <__exponent>:
 80064ee:	4603      	mov	r3, r0
 80064f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064f2:	2900      	cmp	r1, #0
 80064f4:	f803 2b02 	strb.w	r2, [r3], #2
 80064f8:	bfb6      	itet	lt
 80064fa:	222d      	movlt	r2, #45	; 0x2d
 80064fc:	222b      	movge	r2, #43	; 0x2b
 80064fe:	4249      	neglt	r1, r1
 8006500:	2909      	cmp	r1, #9
 8006502:	7042      	strb	r2, [r0, #1]
 8006504:	dd2b      	ble.n	800655e <__exponent+0x70>
 8006506:	f10d 0407 	add.w	r4, sp, #7
 800650a:	46a4      	mov	ip, r4
 800650c:	270a      	movs	r7, #10
 800650e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006512:	460a      	mov	r2, r1
 8006514:	46a6      	mov	lr, r4
 8006516:	fb07 1516 	mls	r5, r7, r6, r1
 800651a:	2a63      	cmp	r2, #99	; 0x63
 800651c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8006520:	4631      	mov	r1, r6
 8006522:	f104 34ff 	add.w	r4, r4, #4294967295
 8006526:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800652a:	dcf0      	bgt.n	800650e <__exponent+0x20>
 800652c:	3130      	adds	r1, #48	; 0x30
 800652e:	f1ae 0502 	sub.w	r5, lr, #2
 8006532:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006536:	4629      	mov	r1, r5
 8006538:	1c44      	adds	r4, r0, #1
 800653a:	4561      	cmp	r1, ip
 800653c:	d30a      	bcc.n	8006554 <__exponent+0x66>
 800653e:	f10d 0209 	add.w	r2, sp, #9
 8006542:	eba2 020e 	sub.w	r2, r2, lr
 8006546:	4565      	cmp	r5, ip
 8006548:	bf88      	it	hi
 800654a:	2200      	movhi	r2, #0
 800654c:	4413      	add	r3, r2
 800654e:	1a18      	subs	r0, r3, r0
 8006550:	b003      	add	sp, #12
 8006552:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006554:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006558:	f804 2f01 	strb.w	r2, [r4, #1]!
 800655c:	e7ed      	b.n	800653a <__exponent+0x4c>
 800655e:	2330      	movs	r3, #48	; 0x30
 8006560:	3130      	adds	r1, #48	; 0x30
 8006562:	7083      	strb	r3, [r0, #2]
 8006564:	70c1      	strb	r1, [r0, #3]
 8006566:	1d03      	adds	r3, r0, #4
 8006568:	e7f1      	b.n	800654e <__exponent+0x60>
	...

0800656c <_printf_float>:
 800656c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006570:	b091      	sub	sp, #68	; 0x44
 8006572:	460c      	mov	r4, r1
 8006574:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006578:	4616      	mov	r6, r2
 800657a:	461f      	mov	r7, r3
 800657c:	4605      	mov	r5, r0
 800657e:	f001 fa61 	bl	8007a44 <_localeconv_r>
 8006582:	6803      	ldr	r3, [r0, #0]
 8006584:	4618      	mov	r0, r3
 8006586:	9309      	str	r3, [sp, #36]	; 0x24
 8006588:	f7f9 fde2 	bl	8000150 <strlen>
 800658c:	2300      	movs	r3, #0
 800658e:	930e      	str	r3, [sp, #56]	; 0x38
 8006590:	f8d8 3000 	ldr.w	r3, [r8]
 8006594:	900a      	str	r0, [sp, #40]	; 0x28
 8006596:	3307      	adds	r3, #7
 8006598:	f023 0307 	bic.w	r3, r3, #7
 800659c:	f103 0208 	add.w	r2, r3, #8
 80065a0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80065a4:	f8d4 b000 	ldr.w	fp, [r4]
 80065a8:	f8c8 2000 	str.w	r2, [r8]
 80065ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80065b4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80065b8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80065bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80065be:	f04f 32ff 	mov.w	r2, #4294967295
 80065c2:	4640      	mov	r0, r8
 80065c4:	4b9c      	ldr	r3, [pc, #624]	; (8006838 <_printf_float+0x2cc>)
 80065c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80065c8:	f7fa fa20 	bl	8000a0c <__aeabi_dcmpun>
 80065cc:	bb70      	cbnz	r0, 800662c <_printf_float+0xc0>
 80065ce:	f04f 32ff 	mov.w	r2, #4294967295
 80065d2:	4640      	mov	r0, r8
 80065d4:	4b98      	ldr	r3, [pc, #608]	; (8006838 <_printf_float+0x2cc>)
 80065d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80065d8:	f7fa f9fa 	bl	80009d0 <__aeabi_dcmple>
 80065dc:	bb30      	cbnz	r0, 800662c <_printf_float+0xc0>
 80065de:	2200      	movs	r2, #0
 80065e0:	2300      	movs	r3, #0
 80065e2:	4640      	mov	r0, r8
 80065e4:	4651      	mov	r1, sl
 80065e6:	f7fa f9e9 	bl	80009bc <__aeabi_dcmplt>
 80065ea:	b110      	cbz	r0, 80065f2 <_printf_float+0x86>
 80065ec:	232d      	movs	r3, #45	; 0x2d
 80065ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065f2:	4b92      	ldr	r3, [pc, #584]	; (800683c <_printf_float+0x2d0>)
 80065f4:	4892      	ldr	r0, [pc, #584]	; (8006840 <_printf_float+0x2d4>)
 80065f6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80065fa:	bf94      	ite	ls
 80065fc:	4698      	movls	r8, r3
 80065fe:	4680      	movhi	r8, r0
 8006600:	2303      	movs	r3, #3
 8006602:	f04f 0a00 	mov.w	sl, #0
 8006606:	6123      	str	r3, [r4, #16]
 8006608:	f02b 0304 	bic.w	r3, fp, #4
 800660c:	6023      	str	r3, [r4, #0]
 800660e:	4633      	mov	r3, r6
 8006610:	4621      	mov	r1, r4
 8006612:	4628      	mov	r0, r5
 8006614:	9700      	str	r7, [sp, #0]
 8006616:	aa0f      	add	r2, sp, #60	; 0x3c
 8006618:	f000 f9d4 	bl	80069c4 <_printf_common>
 800661c:	3001      	adds	r0, #1
 800661e:	f040 8090 	bne.w	8006742 <_printf_float+0x1d6>
 8006622:	f04f 30ff 	mov.w	r0, #4294967295
 8006626:	b011      	add	sp, #68	; 0x44
 8006628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800662c:	4642      	mov	r2, r8
 800662e:	4653      	mov	r3, sl
 8006630:	4640      	mov	r0, r8
 8006632:	4651      	mov	r1, sl
 8006634:	f7fa f9ea 	bl	8000a0c <__aeabi_dcmpun>
 8006638:	b148      	cbz	r0, 800664e <_printf_float+0xe2>
 800663a:	f1ba 0f00 	cmp.w	sl, #0
 800663e:	bfb8      	it	lt
 8006640:	232d      	movlt	r3, #45	; 0x2d
 8006642:	4880      	ldr	r0, [pc, #512]	; (8006844 <_printf_float+0x2d8>)
 8006644:	bfb8      	it	lt
 8006646:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800664a:	4b7f      	ldr	r3, [pc, #508]	; (8006848 <_printf_float+0x2dc>)
 800664c:	e7d3      	b.n	80065f6 <_printf_float+0x8a>
 800664e:	6863      	ldr	r3, [r4, #4]
 8006650:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006654:	1c5a      	adds	r2, r3, #1
 8006656:	d142      	bne.n	80066de <_printf_float+0x172>
 8006658:	2306      	movs	r3, #6
 800665a:	6063      	str	r3, [r4, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	9206      	str	r2, [sp, #24]
 8006660:	aa0e      	add	r2, sp, #56	; 0x38
 8006662:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006666:	aa0d      	add	r2, sp, #52	; 0x34
 8006668:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800666c:	9203      	str	r2, [sp, #12]
 800666e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006672:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006676:	6023      	str	r3, [r4, #0]
 8006678:	6863      	ldr	r3, [r4, #4]
 800667a:	4642      	mov	r2, r8
 800667c:	9300      	str	r3, [sp, #0]
 800667e:	4628      	mov	r0, r5
 8006680:	4653      	mov	r3, sl
 8006682:	910b      	str	r1, [sp, #44]	; 0x2c
 8006684:	f7ff fed4 	bl	8006430 <__cvt>
 8006688:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800668a:	4680      	mov	r8, r0
 800668c:	2947      	cmp	r1, #71	; 0x47
 800668e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006690:	d108      	bne.n	80066a4 <_printf_float+0x138>
 8006692:	1cc8      	adds	r0, r1, #3
 8006694:	db02      	blt.n	800669c <_printf_float+0x130>
 8006696:	6863      	ldr	r3, [r4, #4]
 8006698:	4299      	cmp	r1, r3
 800669a:	dd40      	ble.n	800671e <_printf_float+0x1b2>
 800669c:	f1a9 0902 	sub.w	r9, r9, #2
 80066a0:	fa5f f989 	uxtb.w	r9, r9
 80066a4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80066a8:	d81f      	bhi.n	80066ea <_printf_float+0x17e>
 80066aa:	464a      	mov	r2, r9
 80066ac:	3901      	subs	r1, #1
 80066ae:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80066b2:	910d      	str	r1, [sp, #52]	; 0x34
 80066b4:	f7ff ff1b 	bl	80064ee <__exponent>
 80066b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80066ba:	4682      	mov	sl, r0
 80066bc:	1813      	adds	r3, r2, r0
 80066be:	2a01      	cmp	r2, #1
 80066c0:	6123      	str	r3, [r4, #16]
 80066c2:	dc02      	bgt.n	80066ca <_printf_float+0x15e>
 80066c4:	6822      	ldr	r2, [r4, #0]
 80066c6:	07d2      	lsls	r2, r2, #31
 80066c8:	d501      	bpl.n	80066ce <_printf_float+0x162>
 80066ca:	3301      	adds	r3, #1
 80066cc:	6123      	str	r3, [r4, #16]
 80066ce:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d09b      	beq.n	800660e <_printf_float+0xa2>
 80066d6:	232d      	movs	r3, #45	; 0x2d
 80066d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066dc:	e797      	b.n	800660e <_printf_float+0xa2>
 80066de:	2947      	cmp	r1, #71	; 0x47
 80066e0:	d1bc      	bne.n	800665c <_printf_float+0xf0>
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d1ba      	bne.n	800665c <_printf_float+0xf0>
 80066e6:	2301      	movs	r3, #1
 80066e8:	e7b7      	b.n	800665a <_printf_float+0xee>
 80066ea:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80066ee:	d118      	bne.n	8006722 <_printf_float+0x1b6>
 80066f0:	2900      	cmp	r1, #0
 80066f2:	6863      	ldr	r3, [r4, #4]
 80066f4:	dd0b      	ble.n	800670e <_printf_float+0x1a2>
 80066f6:	6121      	str	r1, [r4, #16]
 80066f8:	b913      	cbnz	r3, 8006700 <_printf_float+0x194>
 80066fa:	6822      	ldr	r2, [r4, #0]
 80066fc:	07d0      	lsls	r0, r2, #31
 80066fe:	d502      	bpl.n	8006706 <_printf_float+0x19a>
 8006700:	3301      	adds	r3, #1
 8006702:	440b      	add	r3, r1
 8006704:	6123      	str	r3, [r4, #16]
 8006706:	f04f 0a00 	mov.w	sl, #0
 800670a:	65a1      	str	r1, [r4, #88]	; 0x58
 800670c:	e7df      	b.n	80066ce <_printf_float+0x162>
 800670e:	b913      	cbnz	r3, 8006716 <_printf_float+0x1aa>
 8006710:	6822      	ldr	r2, [r4, #0]
 8006712:	07d2      	lsls	r2, r2, #31
 8006714:	d501      	bpl.n	800671a <_printf_float+0x1ae>
 8006716:	3302      	adds	r3, #2
 8006718:	e7f4      	b.n	8006704 <_printf_float+0x198>
 800671a:	2301      	movs	r3, #1
 800671c:	e7f2      	b.n	8006704 <_printf_float+0x198>
 800671e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006722:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006724:	4299      	cmp	r1, r3
 8006726:	db05      	blt.n	8006734 <_printf_float+0x1c8>
 8006728:	6823      	ldr	r3, [r4, #0]
 800672a:	6121      	str	r1, [r4, #16]
 800672c:	07d8      	lsls	r0, r3, #31
 800672e:	d5ea      	bpl.n	8006706 <_printf_float+0x19a>
 8006730:	1c4b      	adds	r3, r1, #1
 8006732:	e7e7      	b.n	8006704 <_printf_float+0x198>
 8006734:	2900      	cmp	r1, #0
 8006736:	bfcc      	ite	gt
 8006738:	2201      	movgt	r2, #1
 800673a:	f1c1 0202 	rsble	r2, r1, #2
 800673e:	4413      	add	r3, r2
 8006740:	e7e0      	b.n	8006704 <_printf_float+0x198>
 8006742:	6823      	ldr	r3, [r4, #0]
 8006744:	055a      	lsls	r2, r3, #21
 8006746:	d407      	bmi.n	8006758 <_printf_float+0x1ec>
 8006748:	6923      	ldr	r3, [r4, #16]
 800674a:	4642      	mov	r2, r8
 800674c:	4631      	mov	r1, r6
 800674e:	4628      	mov	r0, r5
 8006750:	47b8      	blx	r7
 8006752:	3001      	adds	r0, #1
 8006754:	d12b      	bne.n	80067ae <_printf_float+0x242>
 8006756:	e764      	b.n	8006622 <_printf_float+0xb6>
 8006758:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800675c:	f240 80dd 	bls.w	800691a <_printf_float+0x3ae>
 8006760:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006764:	2200      	movs	r2, #0
 8006766:	2300      	movs	r3, #0
 8006768:	f7fa f91e 	bl	80009a8 <__aeabi_dcmpeq>
 800676c:	2800      	cmp	r0, #0
 800676e:	d033      	beq.n	80067d8 <_printf_float+0x26c>
 8006770:	2301      	movs	r3, #1
 8006772:	4631      	mov	r1, r6
 8006774:	4628      	mov	r0, r5
 8006776:	4a35      	ldr	r2, [pc, #212]	; (800684c <_printf_float+0x2e0>)
 8006778:	47b8      	blx	r7
 800677a:	3001      	adds	r0, #1
 800677c:	f43f af51 	beq.w	8006622 <_printf_float+0xb6>
 8006780:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006784:	429a      	cmp	r2, r3
 8006786:	db02      	blt.n	800678e <_printf_float+0x222>
 8006788:	6823      	ldr	r3, [r4, #0]
 800678a:	07d8      	lsls	r0, r3, #31
 800678c:	d50f      	bpl.n	80067ae <_printf_float+0x242>
 800678e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006792:	4631      	mov	r1, r6
 8006794:	4628      	mov	r0, r5
 8006796:	47b8      	blx	r7
 8006798:	3001      	adds	r0, #1
 800679a:	f43f af42 	beq.w	8006622 <_printf_float+0xb6>
 800679e:	f04f 0800 	mov.w	r8, #0
 80067a2:	f104 091a 	add.w	r9, r4, #26
 80067a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80067a8:	3b01      	subs	r3, #1
 80067aa:	4543      	cmp	r3, r8
 80067ac:	dc09      	bgt.n	80067c2 <_printf_float+0x256>
 80067ae:	6823      	ldr	r3, [r4, #0]
 80067b0:	079b      	lsls	r3, r3, #30
 80067b2:	f100 8102 	bmi.w	80069ba <_printf_float+0x44e>
 80067b6:	68e0      	ldr	r0, [r4, #12]
 80067b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80067ba:	4298      	cmp	r0, r3
 80067bc:	bfb8      	it	lt
 80067be:	4618      	movlt	r0, r3
 80067c0:	e731      	b.n	8006626 <_printf_float+0xba>
 80067c2:	2301      	movs	r3, #1
 80067c4:	464a      	mov	r2, r9
 80067c6:	4631      	mov	r1, r6
 80067c8:	4628      	mov	r0, r5
 80067ca:	47b8      	blx	r7
 80067cc:	3001      	adds	r0, #1
 80067ce:	f43f af28 	beq.w	8006622 <_printf_float+0xb6>
 80067d2:	f108 0801 	add.w	r8, r8, #1
 80067d6:	e7e6      	b.n	80067a6 <_printf_float+0x23a>
 80067d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067da:	2b00      	cmp	r3, #0
 80067dc:	dc38      	bgt.n	8006850 <_printf_float+0x2e4>
 80067de:	2301      	movs	r3, #1
 80067e0:	4631      	mov	r1, r6
 80067e2:	4628      	mov	r0, r5
 80067e4:	4a19      	ldr	r2, [pc, #100]	; (800684c <_printf_float+0x2e0>)
 80067e6:	47b8      	blx	r7
 80067e8:	3001      	adds	r0, #1
 80067ea:	f43f af1a 	beq.w	8006622 <_printf_float+0xb6>
 80067ee:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80067f2:	4313      	orrs	r3, r2
 80067f4:	d102      	bne.n	80067fc <_printf_float+0x290>
 80067f6:	6823      	ldr	r3, [r4, #0]
 80067f8:	07d9      	lsls	r1, r3, #31
 80067fa:	d5d8      	bpl.n	80067ae <_printf_float+0x242>
 80067fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006800:	4631      	mov	r1, r6
 8006802:	4628      	mov	r0, r5
 8006804:	47b8      	blx	r7
 8006806:	3001      	adds	r0, #1
 8006808:	f43f af0b 	beq.w	8006622 <_printf_float+0xb6>
 800680c:	f04f 0900 	mov.w	r9, #0
 8006810:	f104 0a1a 	add.w	sl, r4, #26
 8006814:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006816:	425b      	negs	r3, r3
 8006818:	454b      	cmp	r3, r9
 800681a:	dc01      	bgt.n	8006820 <_printf_float+0x2b4>
 800681c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800681e:	e794      	b.n	800674a <_printf_float+0x1de>
 8006820:	2301      	movs	r3, #1
 8006822:	4652      	mov	r2, sl
 8006824:	4631      	mov	r1, r6
 8006826:	4628      	mov	r0, r5
 8006828:	47b8      	blx	r7
 800682a:	3001      	adds	r0, #1
 800682c:	f43f aef9 	beq.w	8006622 <_printf_float+0xb6>
 8006830:	f109 0901 	add.w	r9, r9, #1
 8006834:	e7ee      	b.n	8006814 <_printf_float+0x2a8>
 8006836:	bf00      	nop
 8006838:	7fefffff 	.word	0x7fefffff
 800683c:	080095d8 	.word	0x080095d8
 8006840:	080095dc 	.word	0x080095dc
 8006844:	080095e4 	.word	0x080095e4
 8006848:	080095e0 	.word	0x080095e0
 800684c:	080095e8 	.word	0x080095e8
 8006850:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006852:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006854:	429a      	cmp	r2, r3
 8006856:	bfa8      	it	ge
 8006858:	461a      	movge	r2, r3
 800685a:	2a00      	cmp	r2, #0
 800685c:	4691      	mov	r9, r2
 800685e:	dc37      	bgt.n	80068d0 <_printf_float+0x364>
 8006860:	f04f 0b00 	mov.w	fp, #0
 8006864:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006868:	f104 021a 	add.w	r2, r4, #26
 800686c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006870:	ebaa 0309 	sub.w	r3, sl, r9
 8006874:	455b      	cmp	r3, fp
 8006876:	dc33      	bgt.n	80068e0 <_printf_float+0x374>
 8006878:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800687c:	429a      	cmp	r2, r3
 800687e:	db3b      	blt.n	80068f8 <_printf_float+0x38c>
 8006880:	6823      	ldr	r3, [r4, #0]
 8006882:	07da      	lsls	r2, r3, #31
 8006884:	d438      	bmi.n	80068f8 <_printf_float+0x38c>
 8006886:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006888:	990d      	ldr	r1, [sp, #52]	; 0x34
 800688a:	eba3 020a 	sub.w	r2, r3, sl
 800688e:	eba3 0901 	sub.w	r9, r3, r1
 8006892:	4591      	cmp	r9, r2
 8006894:	bfa8      	it	ge
 8006896:	4691      	movge	r9, r2
 8006898:	f1b9 0f00 	cmp.w	r9, #0
 800689c:	dc34      	bgt.n	8006908 <_printf_float+0x39c>
 800689e:	f04f 0800 	mov.w	r8, #0
 80068a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80068a6:	f104 0a1a 	add.w	sl, r4, #26
 80068aa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80068ae:	1a9b      	subs	r3, r3, r2
 80068b0:	eba3 0309 	sub.w	r3, r3, r9
 80068b4:	4543      	cmp	r3, r8
 80068b6:	f77f af7a 	ble.w	80067ae <_printf_float+0x242>
 80068ba:	2301      	movs	r3, #1
 80068bc:	4652      	mov	r2, sl
 80068be:	4631      	mov	r1, r6
 80068c0:	4628      	mov	r0, r5
 80068c2:	47b8      	blx	r7
 80068c4:	3001      	adds	r0, #1
 80068c6:	f43f aeac 	beq.w	8006622 <_printf_float+0xb6>
 80068ca:	f108 0801 	add.w	r8, r8, #1
 80068ce:	e7ec      	b.n	80068aa <_printf_float+0x33e>
 80068d0:	4613      	mov	r3, r2
 80068d2:	4631      	mov	r1, r6
 80068d4:	4642      	mov	r2, r8
 80068d6:	4628      	mov	r0, r5
 80068d8:	47b8      	blx	r7
 80068da:	3001      	adds	r0, #1
 80068dc:	d1c0      	bne.n	8006860 <_printf_float+0x2f4>
 80068de:	e6a0      	b.n	8006622 <_printf_float+0xb6>
 80068e0:	2301      	movs	r3, #1
 80068e2:	4631      	mov	r1, r6
 80068e4:	4628      	mov	r0, r5
 80068e6:	920b      	str	r2, [sp, #44]	; 0x2c
 80068e8:	47b8      	blx	r7
 80068ea:	3001      	adds	r0, #1
 80068ec:	f43f ae99 	beq.w	8006622 <_printf_float+0xb6>
 80068f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80068f2:	f10b 0b01 	add.w	fp, fp, #1
 80068f6:	e7b9      	b.n	800686c <_printf_float+0x300>
 80068f8:	4631      	mov	r1, r6
 80068fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80068fe:	4628      	mov	r0, r5
 8006900:	47b8      	blx	r7
 8006902:	3001      	adds	r0, #1
 8006904:	d1bf      	bne.n	8006886 <_printf_float+0x31a>
 8006906:	e68c      	b.n	8006622 <_printf_float+0xb6>
 8006908:	464b      	mov	r3, r9
 800690a:	4631      	mov	r1, r6
 800690c:	4628      	mov	r0, r5
 800690e:	eb08 020a 	add.w	r2, r8, sl
 8006912:	47b8      	blx	r7
 8006914:	3001      	adds	r0, #1
 8006916:	d1c2      	bne.n	800689e <_printf_float+0x332>
 8006918:	e683      	b.n	8006622 <_printf_float+0xb6>
 800691a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800691c:	2a01      	cmp	r2, #1
 800691e:	dc01      	bgt.n	8006924 <_printf_float+0x3b8>
 8006920:	07db      	lsls	r3, r3, #31
 8006922:	d537      	bpl.n	8006994 <_printf_float+0x428>
 8006924:	2301      	movs	r3, #1
 8006926:	4642      	mov	r2, r8
 8006928:	4631      	mov	r1, r6
 800692a:	4628      	mov	r0, r5
 800692c:	47b8      	blx	r7
 800692e:	3001      	adds	r0, #1
 8006930:	f43f ae77 	beq.w	8006622 <_printf_float+0xb6>
 8006934:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006938:	4631      	mov	r1, r6
 800693a:	4628      	mov	r0, r5
 800693c:	47b8      	blx	r7
 800693e:	3001      	adds	r0, #1
 8006940:	f43f ae6f 	beq.w	8006622 <_printf_float+0xb6>
 8006944:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006948:	2200      	movs	r2, #0
 800694a:	2300      	movs	r3, #0
 800694c:	f7fa f82c 	bl	80009a8 <__aeabi_dcmpeq>
 8006950:	b9d8      	cbnz	r0, 800698a <_printf_float+0x41e>
 8006952:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006954:	f108 0201 	add.w	r2, r8, #1
 8006958:	3b01      	subs	r3, #1
 800695a:	4631      	mov	r1, r6
 800695c:	4628      	mov	r0, r5
 800695e:	47b8      	blx	r7
 8006960:	3001      	adds	r0, #1
 8006962:	d10e      	bne.n	8006982 <_printf_float+0x416>
 8006964:	e65d      	b.n	8006622 <_printf_float+0xb6>
 8006966:	2301      	movs	r3, #1
 8006968:	464a      	mov	r2, r9
 800696a:	4631      	mov	r1, r6
 800696c:	4628      	mov	r0, r5
 800696e:	47b8      	blx	r7
 8006970:	3001      	adds	r0, #1
 8006972:	f43f ae56 	beq.w	8006622 <_printf_float+0xb6>
 8006976:	f108 0801 	add.w	r8, r8, #1
 800697a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800697c:	3b01      	subs	r3, #1
 800697e:	4543      	cmp	r3, r8
 8006980:	dcf1      	bgt.n	8006966 <_printf_float+0x3fa>
 8006982:	4653      	mov	r3, sl
 8006984:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006988:	e6e0      	b.n	800674c <_printf_float+0x1e0>
 800698a:	f04f 0800 	mov.w	r8, #0
 800698e:	f104 091a 	add.w	r9, r4, #26
 8006992:	e7f2      	b.n	800697a <_printf_float+0x40e>
 8006994:	2301      	movs	r3, #1
 8006996:	4642      	mov	r2, r8
 8006998:	e7df      	b.n	800695a <_printf_float+0x3ee>
 800699a:	2301      	movs	r3, #1
 800699c:	464a      	mov	r2, r9
 800699e:	4631      	mov	r1, r6
 80069a0:	4628      	mov	r0, r5
 80069a2:	47b8      	blx	r7
 80069a4:	3001      	adds	r0, #1
 80069a6:	f43f ae3c 	beq.w	8006622 <_printf_float+0xb6>
 80069aa:	f108 0801 	add.w	r8, r8, #1
 80069ae:	68e3      	ldr	r3, [r4, #12]
 80069b0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80069b2:	1a5b      	subs	r3, r3, r1
 80069b4:	4543      	cmp	r3, r8
 80069b6:	dcf0      	bgt.n	800699a <_printf_float+0x42e>
 80069b8:	e6fd      	b.n	80067b6 <_printf_float+0x24a>
 80069ba:	f04f 0800 	mov.w	r8, #0
 80069be:	f104 0919 	add.w	r9, r4, #25
 80069c2:	e7f4      	b.n	80069ae <_printf_float+0x442>

080069c4 <_printf_common>:
 80069c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069c8:	4616      	mov	r6, r2
 80069ca:	4699      	mov	r9, r3
 80069cc:	688a      	ldr	r2, [r1, #8]
 80069ce:	690b      	ldr	r3, [r1, #16]
 80069d0:	4607      	mov	r7, r0
 80069d2:	4293      	cmp	r3, r2
 80069d4:	bfb8      	it	lt
 80069d6:	4613      	movlt	r3, r2
 80069d8:	6033      	str	r3, [r6, #0]
 80069da:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80069de:	460c      	mov	r4, r1
 80069e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80069e4:	b10a      	cbz	r2, 80069ea <_printf_common+0x26>
 80069e6:	3301      	adds	r3, #1
 80069e8:	6033      	str	r3, [r6, #0]
 80069ea:	6823      	ldr	r3, [r4, #0]
 80069ec:	0699      	lsls	r1, r3, #26
 80069ee:	bf42      	ittt	mi
 80069f0:	6833      	ldrmi	r3, [r6, #0]
 80069f2:	3302      	addmi	r3, #2
 80069f4:	6033      	strmi	r3, [r6, #0]
 80069f6:	6825      	ldr	r5, [r4, #0]
 80069f8:	f015 0506 	ands.w	r5, r5, #6
 80069fc:	d106      	bne.n	8006a0c <_printf_common+0x48>
 80069fe:	f104 0a19 	add.w	sl, r4, #25
 8006a02:	68e3      	ldr	r3, [r4, #12]
 8006a04:	6832      	ldr	r2, [r6, #0]
 8006a06:	1a9b      	subs	r3, r3, r2
 8006a08:	42ab      	cmp	r3, r5
 8006a0a:	dc28      	bgt.n	8006a5e <_printf_common+0x9a>
 8006a0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006a10:	1e13      	subs	r3, r2, #0
 8006a12:	6822      	ldr	r2, [r4, #0]
 8006a14:	bf18      	it	ne
 8006a16:	2301      	movne	r3, #1
 8006a18:	0692      	lsls	r2, r2, #26
 8006a1a:	d42d      	bmi.n	8006a78 <_printf_common+0xb4>
 8006a1c:	4649      	mov	r1, r9
 8006a1e:	4638      	mov	r0, r7
 8006a20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a24:	47c0      	blx	r8
 8006a26:	3001      	adds	r0, #1
 8006a28:	d020      	beq.n	8006a6c <_printf_common+0xa8>
 8006a2a:	6823      	ldr	r3, [r4, #0]
 8006a2c:	68e5      	ldr	r5, [r4, #12]
 8006a2e:	f003 0306 	and.w	r3, r3, #6
 8006a32:	2b04      	cmp	r3, #4
 8006a34:	bf18      	it	ne
 8006a36:	2500      	movne	r5, #0
 8006a38:	6832      	ldr	r2, [r6, #0]
 8006a3a:	f04f 0600 	mov.w	r6, #0
 8006a3e:	68a3      	ldr	r3, [r4, #8]
 8006a40:	bf08      	it	eq
 8006a42:	1aad      	subeq	r5, r5, r2
 8006a44:	6922      	ldr	r2, [r4, #16]
 8006a46:	bf08      	it	eq
 8006a48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	bfc4      	itt	gt
 8006a50:	1a9b      	subgt	r3, r3, r2
 8006a52:	18ed      	addgt	r5, r5, r3
 8006a54:	341a      	adds	r4, #26
 8006a56:	42b5      	cmp	r5, r6
 8006a58:	d11a      	bne.n	8006a90 <_printf_common+0xcc>
 8006a5a:	2000      	movs	r0, #0
 8006a5c:	e008      	b.n	8006a70 <_printf_common+0xac>
 8006a5e:	2301      	movs	r3, #1
 8006a60:	4652      	mov	r2, sl
 8006a62:	4649      	mov	r1, r9
 8006a64:	4638      	mov	r0, r7
 8006a66:	47c0      	blx	r8
 8006a68:	3001      	adds	r0, #1
 8006a6a:	d103      	bne.n	8006a74 <_printf_common+0xb0>
 8006a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a74:	3501      	adds	r5, #1
 8006a76:	e7c4      	b.n	8006a02 <_printf_common+0x3e>
 8006a78:	2030      	movs	r0, #48	; 0x30
 8006a7a:	18e1      	adds	r1, r4, r3
 8006a7c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a80:	1c5a      	adds	r2, r3, #1
 8006a82:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a86:	4422      	add	r2, r4
 8006a88:	3302      	adds	r3, #2
 8006a8a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006a8e:	e7c5      	b.n	8006a1c <_printf_common+0x58>
 8006a90:	2301      	movs	r3, #1
 8006a92:	4622      	mov	r2, r4
 8006a94:	4649      	mov	r1, r9
 8006a96:	4638      	mov	r0, r7
 8006a98:	47c0      	blx	r8
 8006a9a:	3001      	adds	r0, #1
 8006a9c:	d0e6      	beq.n	8006a6c <_printf_common+0xa8>
 8006a9e:	3601      	adds	r6, #1
 8006aa0:	e7d9      	b.n	8006a56 <_printf_common+0x92>
	...

08006aa4 <_printf_i>:
 8006aa4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006aa8:	7e0f      	ldrb	r7, [r1, #24]
 8006aaa:	4691      	mov	r9, r2
 8006aac:	2f78      	cmp	r7, #120	; 0x78
 8006aae:	4680      	mov	r8, r0
 8006ab0:	460c      	mov	r4, r1
 8006ab2:	469a      	mov	sl, r3
 8006ab4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006ab6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006aba:	d807      	bhi.n	8006acc <_printf_i+0x28>
 8006abc:	2f62      	cmp	r7, #98	; 0x62
 8006abe:	d80a      	bhi.n	8006ad6 <_printf_i+0x32>
 8006ac0:	2f00      	cmp	r7, #0
 8006ac2:	f000 80d9 	beq.w	8006c78 <_printf_i+0x1d4>
 8006ac6:	2f58      	cmp	r7, #88	; 0x58
 8006ac8:	f000 80a4 	beq.w	8006c14 <_printf_i+0x170>
 8006acc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ad0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006ad4:	e03a      	b.n	8006b4c <_printf_i+0xa8>
 8006ad6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006ada:	2b15      	cmp	r3, #21
 8006adc:	d8f6      	bhi.n	8006acc <_printf_i+0x28>
 8006ade:	a101      	add	r1, pc, #4	; (adr r1, 8006ae4 <_printf_i+0x40>)
 8006ae0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ae4:	08006b3d 	.word	0x08006b3d
 8006ae8:	08006b51 	.word	0x08006b51
 8006aec:	08006acd 	.word	0x08006acd
 8006af0:	08006acd 	.word	0x08006acd
 8006af4:	08006acd 	.word	0x08006acd
 8006af8:	08006acd 	.word	0x08006acd
 8006afc:	08006b51 	.word	0x08006b51
 8006b00:	08006acd 	.word	0x08006acd
 8006b04:	08006acd 	.word	0x08006acd
 8006b08:	08006acd 	.word	0x08006acd
 8006b0c:	08006acd 	.word	0x08006acd
 8006b10:	08006c5f 	.word	0x08006c5f
 8006b14:	08006b81 	.word	0x08006b81
 8006b18:	08006c41 	.word	0x08006c41
 8006b1c:	08006acd 	.word	0x08006acd
 8006b20:	08006acd 	.word	0x08006acd
 8006b24:	08006c81 	.word	0x08006c81
 8006b28:	08006acd 	.word	0x08006acd
 8006b2c:	08006b81 	.word	0x08006b81
 8006b30:	08006acd 	.word	0x08006acd
 8006b34:	08006acd 	.word	0x08006acd
 8006b38:	08006c49 	.word	0x08006c49
 8006b3c:	682b      	ldr	r3, [r5, #0]
 8006b3e:	1d1a      	adds	r2, r3, #4
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	602a      	str	r2, [r5, #0]
 8006b44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e0a4      	b.n	8006c9a <_printf_i+0x1f6>
 8006b50:	6820      	ldr	r0, [r4, #0]
 8006b52:	6829      	ldr	r1, [r5, #0]
 8006b54:	0606      	lsls	r6, r0, #24
 8006b56:	f101 0304 	add.w	r3, r1, #4
 8006b5a:	d50a      	bpl.n	8006b72 <_printf_i+0xce>
 8006b5c:	680e      	ldr	r6, [r1, #0]
 8006b5e:	602b      	str	r3, [r5, #0]
 8006b60:	2e00      	cmp	r6, #0
 8006b62:	da03      	bge.n	8006b6c <_printf_i+0xc8>
 8006b64:	232d      	movs	r3, #45	; 0x2d
 8006b66:	4276      	negs	r6, r6
 8006b68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b6c:	230a      	movs	r3, #10
 8006b6e:	485e      	ldr	r0, [pc, #376]	; (8006ce8 <_printf_i+0x244>)
 8006b70:	e019      	b.n	8006ba6 <_printf_i+0x102>
 8006b72:	680e      	ldr	r6, [r1, #0]
 8006b74:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006b78:	602b      	str	r3, [r5, #0]
 8006b7a:	bf18      	it	ne
 8006b7c:	b236      	sxthne	r6, r6
 8006b7e:	e7ef      	b.n	8006b60 <_printf_i+0xbc>
 8006b80:	682b      	ldr	r3, [r5, #0]
 8006b82:	6820      	ldr	r0, [r4, #0]
 8006b84:	1d19      	adds	r1, r3, #4
 8006b86:	6029      	str	r1, [r5, #0]
 8006b88:	0601      	lsls	r1, r0, #24
 8006b8a:	d501      	bpl.n	8006b90 <_printf_i+0xec>
 8006b8c:	681e      	ldr	r6, [r3, #0]
 8006b8e:	e002      	b.n	8006b96 <_printf_i+0xf2>
 8006b90:	0646      	lsls	r6, r0, #25
 8006b92:	d5fb      	bpl.n	8006b8c <_printf_i+0xe8>
 8006b94:	881e      	ldrh	r6, [r3, #0]
 8006b96:	2f6f      	cmp	r7, #111	; 0x6f
 8006b98:	bf0c      	ite	eq
 8006b9a:	2308      	moveq	r3, #8
 8006b9c:	230a      	movne	r3, #10
 8006b9e:	4852      	ldr	r0, [pc, #328]	; (8006ce8 <_printf_i+0x244>)
 8006ba0:	2100      	movs	r1, #0
 8006ba2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ba6:	6865      	ldr	r5, [r4, #4]
 8006ba8:	2d00      	cmp	r5, #0
 8006baa:	bfa8      	it	ge
 8006bac:	6821      	ldrge	r1, [r4, #0]
 8006bae:	60a5      	str	r5, [r4, #8]
 8006bb0:	bfa4      	itt	ge
 8006bb2:	f021 0104 	bicge.w	r1, r1, #4
 8006bb6:	6021      	strge	r1, [r4, #0]
 8006bb8:	b90e      	cbnz	r6, 8006bbe <_printf_i+0x11a>
 8006bba:	2d00      	cmp	r5, #0
 8006bbc:	d04d      	beq.n	8006c5a <_printf_i+0x1b6>
 8006bbe:	4615      	mov	r5, r2
 8006bc0:	fbb6 f1f3 	udiv	r1, r6, r3
 8006bc4:	fb03 6711 	mls	r7, r3, r1, r6
 8006bc8:	5dc7      	ldrb	r7, [r0, r7]
 8006bca:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006bce:	4637      	mov	r7, r6
 8006bd0:	42bb      	cmp	r3, r7
 8006bd2:	460e      	mov	r6, r1
 8006bd4:	d9f4      	bls.n	8006bc0 <_printf_i+0x11c>
 8006bd6:	2b08      	cmp	r3, #8
 8006bd8:	d10b      	bne.n	8006bf2 <_printf_i+0x14e>
 8006bda:	6823      	ldr	r3, [r4, #0]
 8006bdc:	07de      	lsls	r6, r3, #31
 8006bde:	d508      	bpl.n	8006bf2 <_printf_i+0x14e>
 8006be0:	6923      	ldr	r3, [r4, #16]
 8006be2:	6861      	ldr	r1, [r4, #4]
 8006be4:	4299      	cmp	r1, r3
 8006be6:	bfde      	ittt	le
 8006be8:	2330      	movle	r3, #48	; 0x30
 8006bea:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006bee:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006bf2:	1b52      	subs	r2, r2, r5
 8006bf4:	6122      	str	r2, [r4, #16]
 8006bf6:	464b      	mov	r3, r9
 8006bf8:	4621      	mov	r1, r4
 8006bfa:	4640      	mov	r0, r8
 8006bfc:	f8cd a000 	str.w	sl, [sp]
 8006c00:	aa03      	add	r2, sp, #12
 8006c02:	f7ff fedf 	bl	80069c4 <_printf_common>
 8006c06:	3001      	adds	r0, #1
 8006c08:	d14c      	bne.n	8006ca4 <_printf_i+0x200>
 8006c0a:	f04f 30ff 	mov.w	r0, #4294967295
 8006c0e:	b004      	add	sp, #16
 8006c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c14:	4834      	ldr	r0, [pc, #208]	; (8006ce8 <_printf_i+0x244>)
 8006c16:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006c1a:	6829      	ldr	r1, [r5, #0]
 8006c1c:	6823      	ldr	r3, [r4, #0]
 8006c1e:	f851 6b04 	ldr.w	r6, [r1], #4
 8006c22:	6029      	str	r1, [r5, #0]
 8006c24:	061d      	lsls	r5, r3, #24
 8006c26:	d514      	bpl.n	8006c52 <_printf_i+0x1ae>
 8006c28:	07df      	lsls	r7, r3, #31
 8006c2a:	bf44      	itt	mi
 8006c2c:	f043 0320 	orrmi.w	r3, r3, #32
 8006c30:	6023      	strmi	r3, [r4, #0]
 8006c32:	b91e      	cbnz	r6, 8006c3c <_printf_i+0x198>
 8006c34:	6823      	ldr	r3, [r4, #0]
 8006c36:	f023 0320 	bic.w	r3, r3, #32
 8006c3a:	6023      	str	r3, [r4, #0]
 8006c3c:	2310      	movs	r3, #16
 8006c3e:	e7af      	b.n	8006ba0 <_printf_i+0xfc>
 8006c40:	6823      	ldr	r3, [r4, #0]
 8006c42:	f043 0320 	orr.w	r3, r3, #32
 8006c46:	6023      	str	r3, [r4, #0]
 8006c48:	2378      	movs	r3, #120	; 0x78
 8006c4a:	4828      	ldr	r0, [pc, #160]	; (8006cec <_printf_i+0x248>)
 8006c4c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006c50:	e7e3      	b.n	8006c1a <_printf_i+0x176>
 8006c52:	0659      	lsls	r1, r3, #25
 8006c54:	bf48      	it	mi
 8006c56:	b2b6      	uxthmi	r6, r6
 8006c58:	e7e6      	b.n	8006c28 <_printf_i+0x184>
 8006c5a:	4615      	mov	r5, r2
 8006c5c:	e7bb      	b.n	8006bd6 <_printf_i+0x132>
 8006c5e:	682b      	ldr	r3, [r5, #0]
 8006c60:	6826      	ldr	r6, [r4, #0]
 8006c62:	1d18      	adds	r0, r3, #4
 8006c64:	6961      	ldr	r1, [r4, #20]
 8006c66:	6028      	str	r0, [r5, #0]
 8006c68:	0635      	lsls	r5, r6, #24
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	d501      	bpl.n	8006c72 <_printf_i+0x1ce>
 8006c6e:	6019      	str	r1, [r3, #0]
 8006c70:	e002      	b.n	8006c78 <_printf_i+0x1d4>
 8006c72:	0670      	lsls	r0, r6, #25
 8006c74:	d5fb      	bpl.n	8006c6e <_printf_i+0x1ca>
 8006c76:	8019      	strh	r1, [r3, #0]
 8006c78:	2300      	movs	r3, #0
 8006c7a:	4615      	mov	r5, r2
 8006c7c:	6123      	str	r3, [r4, #16]
 8006c7e:	e7ba      	b.n	8006bf6 <_printf_i+0x152>
 8006c80:	682b      	ldr	r3, [r5, #0]
 8006c82:	2100      	movs	r1, #0
 8006c84:	1d1a      	adds	r2, r3, #4
 8006c86:	602a      	str	r2, [r5, #0]
 8006c88:	681d      	ldr	r5, [r3, #0]
 8006c8a:	6862      	ldr	r2, [r4, #4]
 8006c8c:	4628      	mov	r0, r5
 8006c8e:	f000 fedd 	bl	8007a4c <memchr>
 8006c92:	b108      	cbz	r0, 8006c98 <_printf_i+0x1f4>
 8006c94:	1b40      	subs	r0, r0, r5
 8006c96:	6060      	str	r0, [r4, #4]
 8006c98:	6863      	ldr	r3, [r4, #4]
 8006c9a:	6123      	str	r3, [r4, #16]
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ca2:	e7a8      	b.n	8006bf6 <_printf_i+0x152>
 8006ca4:	462a      	mov	r2, r5
 8006ca6:	4649      	mov	r1, r9
 8006ca8:	4640      	mov	r0, r8
 8006caa:	6923      	ldr	r3, [r4, #16]
 8006cac:	47d0      	blx	sl
 8006cae:	3001      	adds	r0, #1
 8006cb0:	d0ab      	beq.n	8006c0a <_printf_i+0x166>
 8006cb2:	6823      	ldr	r3, [r4, #0]
 8006cb4:	079b      	lsls	r3, r3, #30
 8006cb6:	d413      	bmi.n	8006ce0 <_printf_i+0x23c>
 8006cb8:	68e0      	ldr	r0, [r4, #12]
 8006cba:	9b03      	ldr	r3, [sp, #12]
 8006cbc:	4298      	cmp	r0, r3
 8006cbe:	bfb8      	it	lt
 8006cc0:	4618      	movlt	r0, r3
 8006cc2:	e7a4      	b.n	8006c0e <_printf_i+0x16a>
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	4632      	mov	r2, r6
 8006cc8:	4649      	mov	r1, r9
 8006cca:	4640      	mov	r0, r8
 8006ccc:	47d0      	blx	sl
 8006cce:	3001      	adds	r0, #1
 8006cd0:	d09b      	beq.n	8006c0a <_printf_i+0x166>
 8006cd2:	3501      	adds	r5, #1
 8006cd4:	68e3      	ldr	r3, [r4, #12]
 8006cd6:	9903      	ldr	r1, [sp, #12]
 8006cd8:	1a5b      	subs	r3, r3, r1
 8006cda:	42ab      	cmp	r3, r5
 8006cdc:	dcf2      	bgt.n	8006cc4 <_printf_i+0x220>
 8006cde:	e7eb      	b.n	8006cb8 <_printf_i+0x214>
 8006ce0:	2500      	movs	r5, #0
 8006ce2:	f104 0619 	add.w	r6, r4, #25
 8006ce6:	e7f5      	b.n	8006cd4 <_printf_i+0x230>
 8006ce8:	080095ea 	.word	0x080095ea
 8006cec:	080095fb 	.word	0x080095fb

08006cf0 <_sbrk_r>:
 8006cf0:	b538      	push	{r3, r4, r5, lr}
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	4d05      	ldr	r5, [pc, #20]	; (8006d0c <_sbrk_r+0x1c>)
 8006cf6:	4604      	mov	r4, r0
 8006cf8:	4608      	mov	r0, r1
 8006cfa:	602b      	str	r3, [r5, #0]
 8006cfc:	f7fc f92c 	bl	8002f58 <_sbrk>
 8006d00:	1c43      	adds	r3, r0, #1
 8006d02:	d102      	bne.n	8006d0a <_sbrk_r+0x1a>
 8006d04:	682b      	ldr	r3, [r5, #0]
 8006d06:	b103      	cbz	r3, 8006d0a <_sbrk_r+0x1a>
 8006d08:	6023      	str	r3, [r4, #0]
 8006d0a:	bd38      	pop	{r3, r4, r5, pc}
 8006d0c:	2000075c 	.word	0x2000075c

08006d10 <siprintf>:
 8006d10:	b40e      	push	{r1, r2, r3}
 8006d12:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006d16:	b500      	push	{lr}
 8006d18:	b09c      	sub	sp, #112	; 0x70
 8006d1a:	ab1d      	add	r3, sp, #116	; 0x74
 8006d1c:	9002      	str	r0, [sp, #8]
 8006d1e:	9006      	str	r0, [sp, #24]
 8006d20:	9107      	str	r1, [sp, #28]
 8006d22:	9104      	str	r1, [sp, #16]
 8006d24:	4808      	ldr	r0, [pc, #32]	; (8006d48 <siprintf+0x38>)
 8006d26:	4909      	ldr	r1, [pc, #36]	; (8006d4c <siprintf+0x3c>)
 8006d28:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d2c:	9105      	str	r1, [sp, #20]
 8006d2e:	6800      	ldr	r0, [r0, #0]
 8006d30:	a902      	add	r1, sp, #8
 8006d32:	9301      	str	r3, [sp, #4]
 8006d34:	f001 fa96 	bl	8008264 <_svfiprintf_r>
 8006d38:	2200      	movs	r2, #0
 8006d3a:	9b02      	ldr	r3, [sp, #8]
 8006d3c:	701a      	strb	r2, [r3, #0]
 8006d3e:	b01c      	add	sp, #112	; 0x70
 8006d40:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d44:	b003      	add	sp, #12
 8006d46:	4770      	bx	lr
 8006d48:	2000000c 	.word	0x2000000c
 8006d4c:	ffff0208 	.word	0xffff0208

08006d50 <quorem>:
 8006d50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d54:	6903      	ldr	r3, [r0, #16]
 8006d56:	690c      	ldr	r4, [r1, #16]
 8006d58:	4607      	mov	r7, r0
 8006d5a:	42a3      	cmp	r3, r4
 8006d5c:	f2c0 8082 	blt.w	8006e64 <quorem+0x114>
 8006d60:	3c01      	subs	r4, #1
 8006d62:	f100 0514 	add.w	r5, r0, #20
 8006d66:	f101 0814 	add.w	r8, r1, #20
 8006d6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d6e:	9301      	str	r3, [sp, #4]
 8006d70:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006d74:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d78:	3301      	adds	r3, #1
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006d80:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006d84:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006d88:	d331      	bcc.n	8006dee <quorem+0x9e>
 8006d8a:	f04f 0e00 	mov.w	lr, #0
 8006d8e:	4640      	mov	r0, r8
 8006d90:	46ac      	mov	ip, r5
 8006d92:	46f2      	mov	sl, lr
 8006d94:	f850 2b04 	ldr.w	r2, [r0], #4
 8006d98:	b293      	uxth	r3, r2
 8006d9a:	fb06 e303 	mla	r3, r6, r3, lr
 8006d9e:	0c12      	lsrs	r2, r2, #16
 8006da0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	fb06 e202 	mla	r2, r6, r2, lr
 8006daa:	ebaa 0303 	sub.w	r3, sl, r3
 8006dae:	f8dc a000 	ldr.w	sl, [ip]
 8006db2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006db6:	fa1f fa8a 	uxth.w	sl, sl
 8006dba:	4453      	add	r3, sl
 8006dbc:	f8dc a000 	ldr.w	sl, [ip]
 8006dc0:	b292      	uxth	r2, r2
 8006dc2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006dc6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006dd0:	4581      	cmp	r9, r0
 8006dd2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006dd6:	f84c 3b04 	str.w	r3, [ip], #4
 8006dda:	d2db      	bcs.n	8006d94 <quorem+0x44>
 8006ddc:	f855 300b 	ldr.w	r3, [r5, fp]
 8006de0:	b92b      	cbnz	r3, 8006dee <quorem+0x9e>
 8006de2:	9b01      	ldr	r3, [sp, #4]
 8006de4:	3b04      	subs	r3, #4
 8006de6:	429d      	cmp	r5, r3
 8006de8:	461a      	mov	r2, r3
 8006dea:	d32f      	bcc.n	8006e4c <quorem+0xfc>
 8006dec:	613c      	str	r4, [r7, #16]
 8006dee:	4638      	mov	r0, r7
 8006df0:	f001 f8c4 	bl	8007f7c <__mcmp>
 8006df4:	2800      	cmp	r0, #0
 8006df6:	db25      	blt.n	8006e44 <quorem+0xf4>
 8006df8:	4628      	mov	r0, r5
 8006dfa:	f04f 0c00 	mov.w	ip, #0
 8006dfe:	3601      	adds	r6, #1
 8006e00:	f858 1b04 	ldr.w	r1, [r8], #4
 8006e04:	f8d0 e000 	ldr.w	lr, [r0]
 8006e08:	b28b      	uxth	r3, r1
 8006e0a:	ebac 0303 	sub.w	r3, ip, r3
 8006e0e:	fa1f f28e 	uxth.w	r2, lr
 8006e12:	4413      	add	r3, r2
 8006e14:	0c0a      	lsrs	r2, r1, #16
 8006e16:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006e1a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e24:	45c1      	cmp	r9, r8
 8006e26:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006e2a:	f840 3b04 	str.w	r3, [r0], #4
 8006e2e:	d2e7      	bcs.n	8006e00 <quorem+0xb0>
 8006e30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e34:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e38:	b922      	cbnz	r2, 8006e44 <quorem+0xf4>
 8006e3a:	3b04      	subs	r3, #4
 8006e3c:	429d      	cmp	r5, r3
 8006e3e:	461a      	mov	r2, r3
 8006e40:	d30a      	bcc.n	8006e58 <quorem+0x108>
 8006e42:	613c      	str	r4, [r7, #16]
 8006e44:	4630      	mov	r0, r6
 8006e46:	b003      	add	sp, #12
 8006e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e4c:	6812      	ldr	r2, [r2, #0]
 8006e4e:	3b04      	subs	r3, #4
 8006e50:	2a00      	cmp	r2, #0
 8006e52:	d1cb      	bne.n	8006dec <quorem+0x9c>
 8006e54:	3c01      	subs	r4, #1
 8006e56:	e7c6      	b.n	8006de6 <quorem+0x96>
 8006e58:	6812      	ldr	r2, [r2, #0]
 8006e5a:	3b04      	subs	r3, #4
 8006e5c:	2a00      	cmp	r2, #0
 8006e5e:	d1f0      	bne.n	8006e42 <quorem+0xf2>
 8006e60:	3c01      	subs	r4, #1
 8006e62:	e7eb      	b.n	8006e3c <quorem+0xec>
 8006e64:	2000      	movs	r0, #0
 8006e66:	e7ee      	b.n	8006e46 <quorem+0xf6>

08006e68 <_dtoa_r>:
 8006e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e6c:	4616      	mov	r6, r2
 8006e6e:	461f      	mov	r7, r3
 8006e70:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006e72:	b099      	sub	sp, #100	; 0x64
 8006e74:	4605      	mov	r5, r0
 8006e76:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006e7a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006e7e:	b974      	cbnz	r4, 8006e9e <_dtoa_r+0x36>
 8006e80:	2010      	movs	r0, #16
 8006e82:	f7ff f9db 	bl	800623c <malloc>
 8006e86:	4602      	mov	r2, r0
 8006e88:	6268      	str	r0, [r5, #36]	; 0x24
 8006e8a:	b920      	cbnz	r0, 8006e96 <_dtoa_r+0x2e>
 8006e8c:	21ea      	movs	r1, #234	; 0xea
 8006e8e:	4ba8      	ldr	r3, [pc, #672]	; (8007130 <_dtoa_r+0x2c8>)
 8006e90:	48a8      	ldr	r0, [pc, #672]	; (8007134 <_dtoa_r+0x2cc>)
 8006e92:	f001 fae7 	bl	8008464 <__assert_func>
 8006e96:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006e9a:	6004      	str	r4, [r0, #0]
 8006e9c:	60c4      	str	r4, [r0, #12]
 8006e9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006ea0:	6819      	ldr	r1, [r3, #0]
 8006ea2:	b151      	cbz	r1, 8006eba <_dtoa_r+0x52>
 8006ea4:	685a      	ldr	r2, [r3, #4]
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	4093      	lsls	r3, r2
 8006eaa:	604a      	str	r2, [r1, #4]
 8006eac:	608b      	str	r3, [r1, #8]
 8006eae:	4628      	mov	r0, r5
 8006eb0:	f000 fe26 	bl	8007b00 <_Bfree>
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006eb8:	601a      	str	r2, [r3, #0]
 8006eba:	1e3b      	subs	r3, r7, #0
 8006ebc:	bfaf      	iteee	ge
 8006ebe:	2300      	movge	r3, #0
 8006ec0:	2201      	movlt	r2, #1
 8006ec2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006ec6:	9305      	strlt	r3, [sp, #20]
 8006ec8:	bfa8      	it	ge
 8006eca:	f8c8 3000 	strge.w	r3, [r8]
 8006ece:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006ed2:	4b99      	ldr	r3, [pc, #612]	; (8007138 <_dtoa_r+0x2d0>)
 8006ed4:	bfb8      	it	lt
 8006ed6:	f8c8 2000 	strlt.w	r2, [r8]
 8006eda:	ea33 0309 	bics.w	r3, r3, r9
 8006ede:	d119      	bne.n	8006f14 <_dtoa_r+0xac>
 8006ee0:	f242 730f 	movw	r3, #9999	; 0x270f
 8006ee4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006ee6:	6013      	str	r3, [r2, #0]
 8006ee8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006eec:	4333      	orrs	r3, r6
 8006eee:	f000 857f 	beq.w	80079f0 <_dtoa_r+0xb88>
 8006ef2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006ef4:	b953      	cbnz	r3, 8006f0c <_dtoa_r+0xa4>
 8006ef6:	4b91      	ldr	r3, [pc, #580]	; (800713c <_dtoa_r+0x2d4>)
 8006ef8:	e022      	b.n	8006f40 <_dtoa_r+0xd8>
 8006efa:	4b91      	ldr	r3, [pc, #580]	; (8007140 <_dtoa_r+0x2d8>)
 8006efc:	9303      	str	r3, [sp, #12]
 8006efe:	3308      	adds	r3, #8
 8006f00:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006f02:	6013      	str	r3, [r2, #0]
 8006f04:	9803      	ldr	r0, [sp, #12]
 8006f06:	b019      	add	sp, #100	; 0x64
 8006f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f0c:	4b8b      	ldr	r3, [pc, #556]	; (800713c <_dtoa_r+0x2d4>)
 8006f0e:	9303      	str	r3, [sp, #12]
 8006f10:	3303      	adds	r3, #3
 8006f12:	e7f5      	b.n	8006f00 <_dtoa_r+0x98>
 8006f14:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006f18:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006f1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006f20:	2200      	movs	r2, #0
 8006f22:	2300      	movs	r3, #0
 8006f24:	f7f9 fd40 	bl	80009a8 <__aeabi_dcmpeq>
 8006f28:	4680      	mov	r8, r0
 8006f2a:	b158      	cbz	r0, 8006f44 <_dtoa_r+0xdc>
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006f30:	6013      	str	r3, [r2, #0]
 8006f32:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	f000 8558 	beq.w	80079ea <_dtoa_r+0xb82>
 8006f3a:	4882      	ldr	r0, [pc, #520]	; (8007144 <_dtoa_r+0x2dc>)
 8006f3c:	6018      	str	r0, [r3, #0]
 8006f3e:	1e43      	subs	r3, r0, #1
 8006f40:	9303      	str	r3, [sp, #12]
 8006f42:	e7df      	b.n	8006f04 <_dtoa_r+0x9c>
 8006f44:	ab16      	add	r3, sp, #88	; 0x58
 8006f46:	9301      	str	r3, [sp, #4]
 8006f48:	ab17      	add	r3, sp, #92	; 0x5c
 8006f4a:	9300      	str	r3, [sp, #0]
 8006f4c:	4628      	mov	r0, r5
 8006f4e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006f52:	f001 f8bb 	bl	80080cc <__d2b>
 8006f56:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006f5a:	4683      	mov	fp, r0
 8006f5c:	2c00      	cmp	r4, #0
 8006f5e:	d07f      	beq.n	8007060 <_dtoa_r+0x1f8>
 8006f60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006f64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f66:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006f6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f6e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006f72:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006f76:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	4b72      	ldr	r3, [pc, #456]	; (8007148 <_dtoa_r+0x2e0>)
 8006f7e:	f7f9 f8f3 	bl	8000168 <__aeabi_dsub>
 8006f82:	a365      	add	r3, pc, #404	; (adr r3, 8007118 <_dtoa_r+0x2b0>)
 8006f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f88:	f7f9 faa6 	bl	80004d8 <__aeabi_dmul>
 8006f8c:	a364      	add	r3, pc, #400	; (adr r3, 8007120 <_dtoa_r+0x2b8>)
 8006f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f92:	f7f9 f8eb 	bl	800016c <__adddf3>
 8006f96:	4606      	mov	r6, r0
 8006f98:	4620      	mov	r0, r4
 8006f9a:	460f      	mov	r7, r1
 8006f9c:	f7f9 fa32 	bl	8000404 <__aeabi_i2d>
 8006fa0:	a361      	add	r3, pc, #388	; (adr r3, 8007128 <_dtoa_r+0x2c0>)
 8006fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa6:	f7f9 fa97 	bl	80004d8 <__aeabi_dmul>
 8006faa:	4602      	mov	r2, r0
 8006fac:	460b      	mov	r3, r1
 8006fae:	4630      	mov	r0, r6
 8006fb0:	4639      	mov	r1, r7
 8006fb2:	f7f9 f8db 	bl	800016c <__adddf3>
 8006fb6:	4606      	mov	r6, r0
 8006fb8:	460f      	mov	r7, r1
 8006fba:	f7f9 fd3d 	bl	8000a38 <__aeabi_d2iz>
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	4682      	mov	sl, r0
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	4630      	mov	r0, r6
 8006fc6:	4639      	mov	r1, r7
 8006fc8:	f7f9 fcf8 	bl	80009bc <__aeabi_dcmplt>
 8006fcc:	b148      	cbz	r0, 8006fe2 <_dtoa_r+0x17a>
 8006fce:	4650      	mov	r0, sl
 8006fd0:	f7f9 fa18 	bl	8000404 <__aeabi_i2d>
 8006fd4:	4632      	mov	r2, r6
 8006fd6:	463b      	mov	r3, r7
 8006fd8:	f7f9 fce6 	bl	80009a8 <__aeabi_dcmpeq>
 8006fdc:	b908      	cbnz	r0, 8006fe2 <_dtoa_r+0x17a>
 8006fde:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006fe2:	f1ba 0f16 	cmp.w	sl, #22
 8006fe6:	d858      	bhi.n	800709a <_dtoa_r+0x232>
 8006fe8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006fec:	4b57      	ldr	r3, [pc, #348]	; (800714c <_dtoa_r+0x2e4>)
 8006fee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff6:	f7f9 fce1 	bl	80009bc <__aeabi_dcmplt>
 8006ffa:	2800      	cmp	r0, #0
 8006ffc:	d04f      	beq.n	800709e <_dtoa_r+0x236>
 8006ffe:	2300      	movs	r3, #0
 8007000:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007004:	930f      	str	r3, [sp, #60]	; 0x3c
 8007006:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007008:	1b1c      	subs	r4, r3, r4
 800700a:	1e63      	subs	r3, r4, #1
 800700c:	9309      	str	r3, [sp, #36]	; 0x24
 800700e:	bf49      	itett	mi
 8007010:	f1c4 0301 	rsbmi	r3, r4, #1
 8007014:	2300      	movpl	r3, #0
 8007016:	9306      	strmi	r3, [sp, #24]
 8007018:	2300      	movmi	r3, #0
 800701a:	bf54      	ite	pl
 800701c:	9306      	strpl	r3, [sp, #24]
 800701e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007020:	f1ba 0f00 	cmp.w	sl, #0
 8007024:	db3d      	blt.n	80070a2 <_dtoa_r+0x23a>
 8007026:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007028:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800702c:	4453      	add	r3, sl
 800702e:	9309      	str	r3, [sp, #36]	; 0x24
 8007030:	2300      	movs	r3, #0
 8007032:	930a      	str	r3, [sp, #40]	; 0x28
 8007034:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007036:	2b09      	cmp	r3, #9
 8007038:	f200 808c 	bhi.w	8007154 <_dtoa_r+0x2ec>
 800703c:	2b05      	cmp	r3, #5
 800703e:	bfc4      	itt	gt
 8007040:	3b04      	subgt	r3, #4
 8007042:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007044:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007046:	bfc8      	it	gt
 8007048:	2400      	movgt	r4, #0
 800704a:	f1a3 0302 	sub.w	r3, r3, #2
 800704e:	bfd8      	it	le
 8007050:	2401      	movle	r4, #1
 8007052:	2b03      	cmp	r3, #3
 8007054:	f200 808a 	bhi.w	800716c <_dtoa_r+0x304>
 8007058:	e8df f003 	tbb	[pc, r3]
 800705c:	5b4d4f2d 	.word	0x5b4d4f2d
 8007060:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007064:	441c      	add	r4, r3
 8007066:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800706a:	2b20      	cmp	r3, #32
 800706c:	bfc3      	ittte	gt
 800706e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007072:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8007076:	fa09 f303 	lslgt.w	r3, r9, r3
 800707a:	f1c3 0320 	rsble	r3, r3, #32
 800707e:	bfc6      	itte	gt
 8007080:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007084:	4318      	orrgt	r0, r3
 8007086:	fa06 f003 	lslle.w	r0, r6, r3
 800708a:	f7f9 f9ab 	bl	80003e4 <__aeabi_ui2d>
 800708e:	2301      	movs	r3, #1
 8007090:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007094:	3c01      	subs	r4, #1
 8007096:	9313      	str	r3, [sp, #76]	; 0x4c
 8007098:	e76f      	b.n	8006f7a <_dtoa_r+0x112>
 800709a:	2301      	movs	r3, #1
 800709c:	e7b2      	b.n	8007004 <_dtoa_r+0x19c>
 800709e:	900f      	str	r0, [sp, #60]	; 0x3c
 80070a0:	e7b1      	b.n	8007006 <_dtoa_r+0x19e>
 80070a2:	9b06      	ldr	r3, [sp, #24]
 80070a4:	eba3 030a 	sub.w	r3, r3, sl
 80070a8:	9306      	str	r3, [sp, #24]
 80070aa:	f1ca 0300 	rsb	r3, sl, #0
 80070ae:	930a      	str	r3, [sp, #40]	; 0x28
 80070b0:	2300      	movs	r3, #0
 80070b2:	930e      	str	r3, [sp, #56]	; 0x38
 80070b4:	e7be      	b.n	8007034 <_dtoa_r+0x1cc>
 80070b6:	2300      	movs	r3, #0
 80070b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80070ba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80070bc:	2b00      	cmp	r3, #0
 80070be:	dc58      	bgt.n	8007172 <_dtoa_r+0x30a>
 80070c0:	f04f 0901 	mov.w	r9, #1
 80070c4:	464b      	mov	r3, r9
 80070c6:	f8cd 9020 	str.w	r9, [sp, #32]
 80070ca:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80070ce:	2200      	movs	r2, #0
 80070d0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80070d2:	6042      	str	r2, [r0, #4]
 80070d4:	2204      	movs	r2, #4
 80070d6:	f102 0614 	add.w	r6, r2, #20
 80070da:	429e      	cmp	r6, r3
 80070dc:	6841      	ldr	r1, [r0, #4]
 80070de:	d94e      	bls.n	800717e <_dtoa_r+0x316>
 80070e0:	4628      	mov	r0, r5
 80070e2:	f000 fccd 	bl	8007a80 <_Balloc>
 80070e6:	9003      	str	r0, [sp, #12]
 80070e8:	2800      	cmp	r0, #0
 80070ea:	d14c      	bne.n	8007186 <_dtoa_r+0x31e>
 80070ec:	4602      	mov	r2, r0
 80070ee:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80070f2:	4b17      	ldr	r3, [pc, #92]	; (8007150 <_dtoa_r+0x2e8>)
 80070f4:	e6cc      	b.n	8006e90 <_dtoa_r+0x28>
 80070f6:	2301      	movs	r3, #1
 80070f8:	e7de      	b.n	80070b8 <_dtoa_r+0x250>
 80070fa:	2300      	movs	r3, #0
 80070fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80070fe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007100:	eb0a 0903 	add.w	r9, sl, r3
 8007104:	f109 0301 	add.w	r3, r9, #1
 8007108:	2b01      	cmp	r3, #1
 800710a:	9308      	str	r3, [sp, #32]
 800710c:	bfb8      	it	lt
 800710e:	2301      	movlt	r3, #1
 8007110:	e7dd      	b.n	80070ce <_dtoa_r+0x266>
 8007112:	2301      	movs	r3, #1
 8007114:	e7f2      	b.n	80070fc <_dtoa_r+0x294>
 8007116:	bf00      	nop
 8007118:	636f4361 	.word	0x636f4361
 800711c:	3fd287a7 	.word	0x3fd287a7
 8007120:	8b60c8b3 	.word	0x8b60c8b3
 8007124:	3fc68a28 	.word	0x3fc68a28
 8007128:	509f79fb 	.word	0x509f79fb
 800712c:	3fd34413 	.word	0x3fd34413
 8007130:	08009619 	.word	0x08009619
 8007134:	08009630 	.word	0x08009630
 8007138:	7ff00000 	.word	0x7ff00000
 800713c:	08009615 	.word	0x08009615
 8007140:	0800960c 	.word	0x0800960c
 8007144:	080095e9 	.word	0x080095e9
 8007148:	3ff80000 	.word	0x3ff80000
 800714c:	08009720 	.word	0x08009720
 8007150:	0800968b 	.word	0x0800968b
 8007154:	2401      	movs	r4, #1
 8007156:	2300      	movs	r3, #0
 8007158:	940b      	str	r4, [sp, #44]	; 0x2c
 800715a:	9322      	str	r3, [sp, #136]	; 0x88
 800715c:	f04f 39ff 	mov.w	r9, #4294967295
 8007160:	2200      	movs	r2, #0
 8007162:	2312      	movs	r3, #18
 8007164:	f8cd 9020 	str.w	r9, [sp, #32]
 8007168:	9223      	str	r2, [sp, #140]	; 0x8c
 800716a:	e7b0      	b.n	80070ce <_dtoa_r+0x266>
 800716c:	2301      	movs	r3, #1
 800716e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007170:	e7f4      	b.n	800715c <_dtoa_r+0x2f4>
 8007172:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8007176:	464b      	mov	r3, r9
 8007178:	f8cd 9020 	str.w	r9, [sp, #32]
 800717c:	e7a7      	b.n	80070ce <_dtoa_r+0x266>
 800717e:	3101      	adds	r1, #1
 8007180:	6041      	str	r1, [r0, #4]
 8007182:	0052      	lsls	r2, r2, #1
 8007184:	e7a7      	b.n	80070d6 <_dtoa_r+0x26e>
 8007186:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007188:	9a03      	ldr	r2, [sp, #12]
 800718a:	601a      	str	r2, [r3, #0]
 800718c:	9b08      	ldr	r3, [sp, #32]
 800718e:	2b0e      	cmp	r3, #14
 8007190:	f200 80a8 	bhi.w	80072e4 <_dtoa_r+0x47c>
 8007194:	2c00      	cmp	r4, #0
 8007196:	f000 80a5 	beq.w	80072e4 <_dtoa_r+0x47c>
 800719a:	f1ba 0f00 	cmp.w	sl, #0
 800719e:	dd34      	ble.n	800720a <_dtoa_r+0x3a2>
 80071a0:	4a9a      	ldr	r2, [pc, #616]	; (800740c <_dtoa_r+0x5a4>)
 80071a2:	f00a 030f 	and.w	r3, sl, #15
 80071a6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80071aa:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80071ae:	e9d3 3400 	ldrd	r3, r4, [r3]
 80071b2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80071b6:	ea4f 142a 	mov.w	r4, sl, asr #4
 80071ba:	d016      	beq.n	80071ea <_dtoa_r+0x382>
 80071bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80071c0:	4b93      	ldr	r3, [pc, #588]	; (8007410 <_dtoa_r+0x5a8>)
 80071c2:	2703      	movs	r7, #3
 80071c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80071c8:	f7f9 fab0 	bl	800072c <__aeabi_ddiv>
 80071cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80071d0:	f004 040f 	and.w	r4, r4, #15
 80071d4:	4e8e      	ldr	r6, [pc, #568]	; (8007410 <_dtoa_r+0x5a8>)
 80071d6:	b954      	cbnz	r4, 80071ee <_dtoa_r+0x386>
 80071d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80071dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80071e0:	f7f9 faa4 	bl	800072c <__aeabi_ddiv>
 80071e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80071e8:	e029      	b.n	800723e <_dtoa_r+0x3d6>
 80071ea:	2702      	movs	r7, #2
 80071ec:	e7f2      	b.n	80071d4 <_dtoa_r+0x36c>
 80071ee:	07e1      	lsls	r1, r4, #31
 80071f0:	d508      	bpl.n	8007204 <_dtoa_r+0x39c>
 80071f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80071f6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80071fa:	f7f9 f96d 	bl	80004d8 <__aeabi_dmul>
 80071fe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007202:	3701      	adds	r7, #1
 8007204:	1064      	asrs	r4, r4, #1
 8007206:	3608      	adds	r6, #8
 8007208:	e7e5      	b.n	80071d6 <_dtoa_r+0x36e>
 800720a:	f000 80a5 	beq.w	8007358 <_dtoa_r+0x4f0>
 800720e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007212:	f1ca 0400 	rsb	r4, sl, #0
 8007216:	4b7d      	ldr	r3, [pc, #500]	; (800740c <_dtoa_r+0x5a4>)
 8007218:	f004 020f 	and.w	r2, r4, #15
 800721c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007224:	f7f9 f958 	bl	80004d8 <__aeabi_dmul>
 8007228:	2702      	movs	r7, #2
 800722a:	2300      	movs	r3, #0
 800722c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007230:	4e77      	ldr	r6, [pc, #476]	; (8007410 <_dtoa_r+0x5a8>)
 8007232:	1124      	asrs	r4, r4, #4
 8007234:	2c00      	cmp	r4, #0
 8007236:	f040 8084 	bne.w	8007342 <_dtoa_r+0x4da>
 800723a:	2b00      	cmp	r3, #0
 800723c:	d1d2      	bne.n	80071e4 <_dtoa_r+0x37c>
 800723e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007240:	2b00      	cmp	r3, #0
 8007242:	f000 808b 	beq.w	800735c <_dtoa_r+0x4f4>
 8007246:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800724a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800724e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007252:	2200      	movs	r2, #0
 8007254:	4b6f      	ldr	r3, [pc, #444]	; (8007414 <_dtoa_r+0x5ac>)
 8007256:	f7f9 fbb1 	bl	80009bc <__aeabi_dcmplt>
 800725a:	2800      	cmp	r0, #0
 800725c:	d07e      	beq.n	800735c <_dtoa_r+0x4f4>
 800725e:	9b08      	ldr	r3, [sp, #32]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d07b      	beq.n	800735c <_dtoa_r+0x4f4>
 8007264:	f1b9 0f00 	cmp.w	r9, #0
 8007268:	dd38      	ble.n	80072dc <_dtoa_r+0x474>
 800726a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800726e:	2200      	movs	r2, #0
 8007270:	4b69      	ldr	r3, [pc, #420]	; (8007418 <_dtoa_r+0x5b0>)
 8007272:	f7f9 f931 	bl	80004d8 <__aeabi_dmul>
 8007276:	464c      	mov	r4, r9
 8007278:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800727c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8007280:	3701      	adds	r7, #1
 8007282:	4638      	mov	r0, r7
 8007284:	f7f9 f8be 	bl	8000404 <__aeabi_i2d>
 8007288:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800728c:	f7f9 f924 	bl	80004d8 <__aeabi_dmul>
 8007290:	2200      	movs	r2, #0
 8007292:	4b62      	ldr	r3, [pc, #392]	; (800741c <_dtoa_r+0x5b4>)
 8007294:	f7f8 ff6a 	bl	800016c <__adddf3>
 8007298:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800729c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80072a0:	9611      	str	r6, [sp, #68]	; 0x44
 80072a2:	2c00      	cmp	r4, #0
 80072a4:	d15d      	bne.n	8007362 <_dtoa_r+0x4fa>
 80072a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80072aa:	2200      	movs	r2, #0
 80072ac:	4b5c      	ldr	r3, [pc, #368]	; (8007420 <_dtoa_r+0x5b8>)
 80072ae:	f7f8 ff5b 	bl	8000168 <__aeabi_dsub>
 80072b2:	4602      	mov	r2, r0
 80072b4:	460b      	mov	r3, r1
 80072b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80072ba:	4633      	mov	r3, r6
 80072bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80072be:	f7f9 fb9b 	bl	80009f8 <__aeabi_dcmpgt>
 80072c2:	2800      	cmp	r0, #0
 80072c4:	f040 829c 	bne.w	8007800 <_dtoa_r+0x998>
 80072c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80072cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80072ce:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80072d2:	f7f9 fb73 	bl	80009bc <__aeabi_dcmplt>
 80072d6:	2800      	cmp	r0, #0
 80072d8:	f040 8290 	bne.w	80077fc <_dtoa_r+0x994>
 80072dc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80072e0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80072e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	f2c0 8152 	blt.w	8007590 <_dtoa_r+0x728>
 80072ec:	f1ba 0f0e 	cmp.w	sl, #14
 80072f0:	f300 814e 	bgt.w	8007590 <_dtoa_r+0x728>
 80072f4:	4b45      	ldr	r3, [pc, #276]	; (800740c <_dtoa_r+0x5a4>)
 80072f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80072fa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80072fe:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007302:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007304:	2b00      	cmp	r3, #0
 8007306:	f280 80db 	bge.w	80074c0 <_dtoa_r+0x658>
 800730a:	9b08      	ldr	r3, [sp, #32]
 800730c:	2b00      	cmp	r3, #0
 800730e:	f300 80d7 	bgt.w	80074c0 <_dtoa_r+0x658>
 8007312:	f040 8272 	bne.w	80077fa <_dtoa_r+0x992>
 8007316:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800731a:	2200      	movs	r2, #0
 800731c:	4b40      	ldr	r3, [pc, #256]	; (8007420 <_dtoa_r+0x5b8>)
 800731e:	f7f9 f8db 	bl	80004d8 <__aeabi_dmul>
 8007322:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007326:	f7f9 fb5d 	bl	80009e4 <__aeabi_dcmpge>
 800732a:	9c08      	ldr	r4, [sp, #32]
 800732c:	4626      	mov	r6, r4
 800732e:	2800      	cmp	r0, #0
 8007330:	f040 8248 	bne.w	80077c4 <_dtoa_r+0x95c>
 8007334:	2331      	movs	r3, #49	; 0x31
 8007336:	9f03      	ldr	r7, [sp, #12]
 8007338:	f10a 0a01 	add.w	sl, sl, #1
 800733c:	f807 3b01 	strb.w	r3, [r7], #1
 8007340:	e244      	b.n	80077cc <_dtoa_r+0x964>
 8007342:	07e2      	lsls	r2, r4, #31
 8007344:	d505      	bpl.n	8007352 <_dtoa_r+0x4ea>
 8007346:	e9d6 2300 	ldrd	r2, r3, [r6]
 800734a:	f7f9 f8c5 	bl	80004d8 <__aeabi_dmul>
 800734e:	2301      	movs	r3, #1
 8007350:	3701      	adds	r7, #1
 8007352:	1064      	asrs	r4, r4, #1
 8007354:	3608      	adds	r6, #8
 8007356:	e76d      	b.n	8007234 <_dtoa_r+0x3cc>
 8007358:	2702      	movs	r7, #2
 800735a:	e770      	b.n	800723e <_dtoa_r+0x3d6>
 800735c:	46d0      	mov	r8, sl
 800735e:	9c08      	ldr	r4, [sp, #32]
 8007360:	e78f      	b.n	8007282 <_dtoa_r+0x41a>
 8007362:	9903      	ldr	r1, [sp, #12]
 8007364:	4b29      	ldr	r3, [pc, #164]	; (800740c <_dtoa_r+0x5a4>)
 8007366:	4421      	add	r1, r4
 8007368:	9112      	str	r1, [sp, #72]	; 0x48
 800736a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800736c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007370:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007374:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007378:	2900      	cmp	r1, #0
 800737a:	d055      	beq.n	8007428 <_dtoa_r+0x5c0>
 800737c:	2000      	movs	r0, #0
 800737e:	4929      	ldr	r1, [pc, #164]	; (8007424 <_dtoa_r+0x5bc>)
 8007380:	f7f9 f9d4 	bl	800072c <__aeabi_ddiv>
 8007384:	463b      	mov	r3, r7
 8007386:	4632      	mov	r2, r6
 8007388:	f7f8 feee 	bl	8000168 <__aeabi_dsub>
 800738c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007390:	9f03      	ldr	r7, [sp, #12]
 8007392:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007396:	f7f9 fb4f 	bl	8000a38 <__aeabi_d2iz>
 800739a:	4604      	mov	r4, r0
 800739c:	f7f9 f832 	bl	8000404 <__aeabi_i2d>
 80073a0:	4602      	mov	r2, r0
 80073a2:	460b      	mov	r3, r1
 80073a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80073a8:	f7f8 fede 	bl	8000168 <__aeabi_dsub>
 80073ac:	4602      	mov	r2, r0
 80073ae:	460b      	mov	r3, r1
 80073b0:	3430      	adds	r4, #48	; 0x30
 80073b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80073b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80073ba:	f807 4b01 	strb.w	r4, [r7], #1
 80073be:	f7f9 fafd 	bl	80009bc <__aeabi_dcmplt>
 80073c2:	2800      	cmp	r0, #0
 80073c4:	d174      	bne.n	80074b0 <_dtoa_r+0x648>
 80073c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073ca:	2000      	movs	r0, #0
 80073cc:	4911      	ldr	r1, [pc, #68]	; (8007414 <_dtoa_r+0x5ac>)
 80073ce:	f7f8 fecb 	bl	8000168 <__aeabi_dsub>
 80073d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80073d6:	f7f9 faf1 	bl	80009bc <__aeabi_dcmplt>
 80073da:	2800      	cmp	r0, #0
 80073dc:	f040 80b7 	bne.w	800754e <_dtoa_r+0x6e6>
 80073e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80073e2:	429f      	cmp	r7, r3
 80073e4:	f43f af7a 	beq.w	80072dc <_dtoa_r+0x474>
 80073e8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80073ec:	2200      	movs	r2, #0
 80073ee:	4b0a      	ldr	r3, [pc, #40]	; (8007418 <_dtoa_r+0x5b0>)
 80073f0:	f7f9 f872 	bl	80004d8 <__aeabi_dmul>
 80073f4:	2200      	movs	r2, #0
 80073f6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80073fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80073fe:	4b06      	ldr	r3, [pc, #24]	; (8007418 <_dtoa_r+0x5b0>)
 8007400:	f7f9 f86a 	bl	80004d8 <__aeabi_dmul>
 8007404:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007408:	e7c3      	b.n	8007392 <_dtoa_r+0x52a>
 800740a:	bf00      	nop
 800740c:	08009720 	.word	0x08009720
 8007410:	080096f8 	.word	0x080096f8
 8007414:	3ff00000 	.word	0x3ff00000
 8007418:	40240000 	.word	0x40240000
 800741c:	401c0000 	.word	0x401c0000
 8007420:	40140000 	.word	0x40140000
 8007424:	3fe00000 	.word	0x3fe00000
 8007428:	4630      	mov	r0, r6
 800742a:	4639      	mov	r1, r7
 800742c:	f7f9 f854 	bl	80004d8 <__aeabi_dmul>
 8007430:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007432:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007436:	9c03      	ldr	r4, [sp, #12]
 8007438:	9314      	str	r3, [sp, #80]	; 0x50
 800743a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800743e:	f7f9 fafb 	bl	8000a38 <__aeabi_d2iz>
 8007442:	9015      	str	r0, [sp, #84]	; 0x54
 8007444:	f7f8 ffde 	bl	8000404 <__aeabi_i2d>
 8007448:	4602      	mov	r2, r0
 800744a:	460b      	mov	r3, r1
 800744c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007450:	f7f8 fe8a 	bl	8000168 <__aeabi_dsub>
 8007454:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007456:	4606      	mov	r6, r0
 8007458:	3330      	adds	r3, #48	; 0x30
 800745a:	f804 3b01 	strb.w	r3, [r4], #1
 800745e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007460:	460f      	mov	r7, r1
 8007462:	429c      	cmp	r4, r3
 8007464:	f04f 0200 	mov.w	r2, #0
 8007468:	d124      	bne.n	80074b4 <_dtoa_r+0x64c>
 800746a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800746e:	4bb0      	ldr	r3, [pc, #704]	; (8007730 <_dtoa_r+0x8c8>)
 8007470:	f7f8 fe7c 	bl	800016c <__adddf3>
 8007474:	4602      	mov	r2, r0
 8007476:	460b      	mov	r3, r1
 8007478:	4630      	mov	r0, r6
 800747a:	4639      	mov	r1, r7
 800747c:	f7f9 fabc 	bl	80009f8 <__aeabi_dcmpgt>
 8007480:	2800      	cmp	r0, #0
 8007482:	d163      	bne.n	800754c <_dtoa_r+0x6e4>
 8007484:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007488:	2000      	movs	r0, #0
 800748a:	49a9      	ldr	r1, [pc, #676]	; (8007730 <_dtoa_r+0x8c8>)
 800748c:	f7f8 fe6c 	bl	8000168 <__aeabi_dsub>
 8007490:	4602      	mov	r2, r0
 8007492:	460b      	mov	r3, r1
 8007494:	4630      	mov	r0, r6
 8007496:	4639      	mov	r1, r7
 8007498:	f7f9 fa90 	bl	80009bc <__aeabi_dcmplt>
 800749c:	2800      	cmp	r0, #0
 800749e:	f43f af1d 	beq.w	80072dc <_dtoa_r+0x474>
 80074a2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80074a4:	1e7b      	subs	r3, r7, #1
 80074a6:	9314      	str	r3, [sp, #80]	; 0x50
 80074a8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80074ac:	2b30      	cmp	r3, #48	; 0x30
 80074ae:	d0f8      	beq.n	80074a2 <_dtoa_r+0x63a>
 80074b0:	46c2      	mov	sl, r8
 80074b2:	e03b      	b.n	800752c <_dtoa_r+0x6c4>
 80074b4:	4b9f      	ldr	r3, [pc, #636]	; (8007734 <_dtoa_r+0x8cc>)
 80074b6:	f7f9 f80f 	bl	80004d8 <__aeabi_dmul>
 80074ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80074be:	e7bc      	b.n	800743a <_dtoa_r+0x5d2>
 80074c0:	9f03      	ldr	r7, [sp, #12]
 80074c2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80074c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80074ca:	4640      	mov	r0, r8
 80074cc:	4649      	mov	r1, r9
 80074ce:	f7f9 f92d 	bl	800072c <__aeabi_ddiv>
 80074d2:	f7f9 fab1 	bl	8000a38 <__aeabi_d2iz>
 80074d6:	4604      	mov	r4, r0
 80074d8:	f7f8 ff94 	bl	8000404 <__aeabi_i2d>
 80074dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80074e0:	f7f8 fffa 	bl	80004d8 <__aeabi_dmul>
 80074e4:	4602      	mov	r2, r0
 80074e6:	460b      	mov	r3, r1
 80074e8:	4640      	mov	r0, r8
 80074ea:	4649      	mov	r1, r9
 80074ec:	f7f8 fe3c 	bl	8000168 <__aeabi_dsub>
 80074f0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80074f4:	f807 6b01 	strb.w	r6, [r7], #1
 80074f8:	9e03      	ldr	r6, [sp, #12]
 80074fa:	f8dd c020 	ldr.w	ip, [sp, #32]
 80074fe:	1bbe      	subs	r6, r7, r6
 8007500:	45b4      	cmp	ip, r6
 8007502:	4602      	mov	r2, r0
 8007504:	460b      	mov	r3, r1
 8007506:	d136      	bne.n	8007576 <_dtoa_r+0x70e>
 8007508:	f7f8 fe30 	bl	800016c <__adddf3>
 800750c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007510:	4680      	mov	r8, r0
 8007512:	4689      	mov	r9, r1
 8007514:	f7f9 fa70 	bl	80009f8 <__aeabi_dcmpgt>
 8007518:	bb58      	cbnz	r0, 8007572 <_dtoa_r+0x70a>
 800751a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800751e:	4640      	mov	r0, r8
 8007520:	4649      	mov	r1, r9
 8007522:	f7f9 fa41 	bl	80009a8 <__aeabi_dcmpeq>
 8007526:	b108      	cbz	r0, 800752c <_dtoa_r+0x6c4>
 8007528:	07e1      	lsls	r1, r4, #31
 800752a:	d422      	bmi.n	8007572 <_dtoa_r+0x70a>
 800752c:	4628      	mov	r0, r5
 800752e:	4659      	mov	r1, fp
 8007530:	f000 fae6 	bl	8007b00 <_Bfree>
 8007534:	2300      	movs	r3, #0
 8007536:	703b      	strb	r3, [r7, #0]
 8007538:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800753a:	f10a 0001 	add.w	r0, sl, #1
 800753e:	6018      	str	r0, [r3, #0]
 8007540:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007542:	2b00      	cmp	r3, #0
 8007544:	f43f acde 	beq.w	8006f04 <_dtoa_r+0x9c>
 8007548:	601f      	str	r7, [r3, #0]
 800754a:	e4db      	b.n	8006f04 <_dtoa_r+0x9c>
 800754c:	4627      	mov	r7, r4
 800754e:	463b      	mov	r3, r7
 8007550:	461f      	mov	r7, r3
 8007552:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007556:	2a39      	cmp	r2, #57	; 0x39
 8007558:	d107      	bne.n	800756a <_dtoa_r+0x702>
 800755a:	9a03      	ldr	r2, [sp, #12]
 800755c:	429a      	cmp	r2, r3
 800755e:	d1f7      	bne.n	8007550 <_dtoa_r+0x6e8>
 8007560:	2230      	movs	r2, #48	; 0x30
 8007562:	9903      	ldr	r1, [sp, #12]
 8007564:	f108 0801 	add.w	r8, r8, #1
 8007568:	700a      	strb	r2, [r1, #0]
 800756a:	781a      	ldrb	r2, [r3, #0]
 800756c:	3201      	adds	r2, #1
 800756e:	701a      	strb	r2, [r3, #0]
 8007570:	e79e      	b.n	80074b0 <_dtoa_r+0x648>
 8007572:	46d0      	mov	r8, sl
 8007574:	e7eb      	b.n	800754e <_dtoa_r+0x6e6>
 8007576:	2200      	movs	r2, #0
 8007578:	4b6e      	ldr	r3, [pc, #440]	; (8007734 <_dtoa_r+0x8cc>)
 800757a:	f7f8 ffad 	bl	80004d8 <__aeabi_dmul>
 800757e:	2200      	movs	r2, #0
 8007580:	2300      	movs	r3, #0
 8007582:	4680      	mov	r8, r0
 8007584:	4689      	mov	r9, r1
 8007586:	f7f9 fa0f 	bl	80009a8 <__aeabi_dcmpeq>
 800758a:	2800      	cmp	r0, #0
 800758c:	d09b      	beq.n	80074c6 <_dtoa_r+0x65e>
 800758e:	e7cd      	b.n	800752c <_dtoa_r+0x6c4>
 8007590:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007592:	2a00      	cmp	r2, #0
 8007594:	f000 80d0 	beq.w	8007738 <_dtoa_r+0x8d0>
 8007598:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800759a:	2a01      	cmp	r2, #1
 800759c:	f300 80ae 	bgt.w	80076fc <_dtoa_r+0x894>
 80075a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80075a2:	2a00      	cmp	r2, #0
 80075a4:	f000 80a6 	beq.w	80076f4 <_dtoa_r+0x88c>
 80075a8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80075ac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80075ae:	9f06      	ldr	r7, [sp, #24]
 80075b0:	9a06      	ldr	r2, [sp, #24]
 80075b2:	2101      	movs	r1, #1
 80075b4:	441a      	add	r2, r3
 80075b6:	9206      	str	r2, [sp, #24]
 80075b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075ba:	4628      	mov	r0, r5
 80075bc:	441a      	add	r2, r3
 80075be:	9209      	str	r2, [sp, #36]	; 0x24
 80075c0:	f000 fb54 	bl	8007c6c <__i2b>
 80075c4:	4606      	mov	r6, r0
 80075c6:	2f00      	cmp	r7, #0
 80075c8:	dd0c      	ble.n	80075e4 <_dtoa_r+0x77c>
 80075ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	dd09      	ble.n	80075e4 <_dtoa_r+0x77c>
 80075d0:	42bb      	cmp	r3, r7
 80075d2:	bfa8      	it	ge
 80075d4:	463b      	movge	r3, r7
 80075d6:	9a06      	ldr	r2, [sp, #24]
 80075d8:	1aff      	subs	r7, r7, r3
 80075da:	1ad2      	subs	r2, r2, r3
 80075dc:	9206      	str	r2, [sp, #24]
 80075de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075e0:	1ad3      	subs	r3, r2, r3
 80075e2:	9309      	str	r3, [sp, #36]	; 0x24
 80075e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075e6:	b1f3      	cbz	r3, 8007626 <_dtoa_r+0x7be>
 80075e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	f000 80a8 	beq.w	8007740 <_dtoa_r+0x8d8>
 80075f0:	2c00      	cmp	r4, #0
 80075f2:	dd10      	ble.n	8007616 <_dtoa_r+0x7ae>
 80075f4:	4631      	mov	r1, r6
 80075f6:	4622      	mov	r2, r4
 80075f8:	4628      	mov	r0, r5
 80075fa:	f000 fbf5 	bl	8007de8 <__pow5mult>
 80075fe:	465a      	mov	r2, fp
 8007600:	4601      	mov	r1, r0
 8007602:	4606      	mov	r6, r0
 8007604:	4628      	mov	r0, r5
 8007606:	f000 fb47 	bl	8007c98 <__multiply>
 800760a:	4680      	mov	r8, r0
 800760c:	4659      	mov	r1, fp
 800760e:	4628      	mov	r0, r5
 8007610:	f000 fa76 	bl	8007b00 <_Bfree>
 8007614:	46c3      	mov	fp, r8
 8007616:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007618:	1b1a      	subs	r2, r3, r4
 800761a:	d004      	beq.n	8007626 <_dtoa_r+0x7be>
 800761c:	4659      	mov	r1, fp
 800761e:	4628      	mov	r0, r5
 8007620:	f000 fbe2 	bl	8007de8 <__pow5mult>
 8007624:	4683      	mov	fp, r0
 8007626:	2101      	movs	r1, #1
 8007628:	4628      	mov	r0, r5
 800762a:	f000 fb1f 	bl	8007c6c <__i2b>
 800762e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007630:	4604      	mov	r4, r0
 8007632:	2b00      	cmp	r3, #0
 8007634:	f340 8086 	ble.w	8007744 <_dtoa_r+0x8dc>
 8007638:	461a      	mov	r2, r3
 800763a:	4601      	mov	r1, r0
 800763c:	4628      	mov	r0, r5
 800763e:	f000 fbd3 	bl	8007de8 <__pow5mult>
 8007642:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007644:	4604      	mov	r4, r0
 8007646:	2b01      	cmp	r3, #1
 8007648:	dd7f      	ble.n	800774a <_dtoa_r+0x8e2>
 800764a:	f04f 0800 	mov.w	r8, #0
 800764e:	6923      	ldr	r3, [r4, #16]
 8007650:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007654:	6918      	ldr	r0, [r3, #16]
 8007656:	f000 fabb 	bl	8007bd0 <__hi0bits>
 800765a:	f1c0 0020 	rsb	r0, r0, #32
 800765e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007660:	4418      	add	r0, r3
 8007662:	f010 001f 	ands.w	r0, r0, #31
 8007666:	f000 8092 	beq.w	800778e <_dtoa_r+0x926>
 800766a:	f1c0 0320 	rsb	r3, r0, #32
 800766e:	2b04      	cmp	r3, #4
 8007670:	f340 808a 	ble.w	8007788 <_dtoa_r+0x920>
 8007674:	f1c0 001c 	rsb	r0, r0, #28
 8007678:	9b06      	ldr	r3, [sp, #24]
 800767a:	4407      	add	r7, r0
 800767c:	4403      	add	r3, r0
 800767e:	9306      	str	r3, [sp, #24]
 8007680:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007682:	4403      	add	r3, r0
 8007684:	9309      	str	r3, [sp, #36]	; 0x24
 8007686:	9b06      	ldr	r3, [sp, #24]
 8007688:	2b00      	cmp	r3, #0
 800768a:	dd05      	ble.n	8007698 <_dtoa_r+0x830>
 800768c:	4659      	mov	r1, fp
 800768e:	461a      	mov	r2, r3
 8007690:	4628      	mov	r0, r5
 8007692:	f000 fc03 	bl	8007e9c <__lshift>
 8007696:	4683      	mov	fp, r0
 8007698:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800769a:	2b00      	cmp	r3, #0
 800769c:	dd05      	ble.n	80076aa <_dtoa_r+0x842>
 800769e:	4621      	mov	r1, r4
 80076a0:	461a      	mov	r2, r3
 80076a2:	4628      	mov	r0, r5
 80076a4:	f000 fbfa 	bl	8007e9c <__lshift>
 80076a8:	4604      	mov	r4, r0
 80076aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d070      	beq.n	8007792 <_dtoa_r+0x92a>
 80076b0:	4621      	mov	r1, r4
 80076b2:	4658      	mov	r0, fp
 80076b4:	f000 fc62 	bl	8007f7c <__mcmp>
 80076b8:	2800      	cmp	r0, #0
 80076ba:	da6a      	bge.n	8007792 <_dtoa_r+0x92a>
 80076bc:	2300      	movs	r3, #0
 80076be:	4659      	mov	r1, fp
 80076c0:	220a      	movs	r2, #10
 80076c2:	4628      	mov	r0, r5
 80076c4:	f000 fa3e 	bl	8007b44 <__multadd>
 80076c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076ca:	4683      	mov	fp, r0
 80076cc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	f000 8194 	beq.w	80079fe <_dtoa_r+0xb96>
 80076d6:	4631      	mov	r1, r6
 80076d8:	2300      	movs	r3, #0
 80076da:	220a      	movs	r2, #10
 80076dc:	4628      	mov	r0, r5
 80076de:	f000 fa31 	bl	8007b44 <__multadd>
 80076e2:	f1b9 0f00 	cmp.w	r9, #0
 80076e6:	4606      	mov	r6, r0
 80076e8:	f300 8093 	bgt.w	8007812 <_dtoa_r+0x9aa>
 80076ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80076ee:	2b02      	cmp	r3, #2
 80076f0:	dc57      	bgt.n	80077a2 <_dtoa_r+0x93a>
 80076f2:	e08e      	b.n	8007812 <_dtoa_r+0x9aa>
 80076f4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80076f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80076fa:	e757      	b.n	80075ac <_dtoa_r+0x744>
 80076fc:	9b08      	ldr	r3, [sp, #32]
 80076fe:	1e5c      	subs	r4, r3, #1
 8007700:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007702:	42a3      	cmp	r3, r4
 8007704:	bfb7      	itett	lt
 8007706:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007708:	1b1c      	subge	r4, r3, r4
 800770a:	1ae2      	sublt	r2, r4, r3
 800770c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800770e:	bfbe      	ittt	lt
 8007710:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007712:	189b      	addlt	r3, r3, r2
 8007714:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007716:	9b08      	ldr	r3, [sp, #32]
 8007718:	bfb8      	it	lt
 800771a:	2400      	movlt	r4, #0
 800771c:	2b00      	cmp	r3, #0
 800771e:	bfbb      	ittet	lt
 8007720:	9b06      	ldrlt	r3, [sp, #24]
 8007722:	9a08      	ldrlt	r2, [sp, #32]
 8007724:	9f06      	ldrge	r7, [sp, #24]
 8007726:	1a9f      	sublt	r7, r3, r2
 8007728:	bfac      	ite	ge
 800772a:	9b08      	ldrge	r3, [sp, #32]
 800772c:	2300      	movlt	r3, #0
 800772e:	e73f      	b.n	80075b0 <_dtoa_r+0x748>
 8007730:	3fe00000 	.word	0x3fe00000
 8007734:	40240000 	.word	0x40240000
 8007738:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800773a:	9f06      	ldr	r7, [sp, #24]
 800773c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800773e:	e742      	b.n	80075c6 <_dtoa_r+0x75e>
 8007740:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007742:	e76b      	b.n	800761c <_dtoa_r+0x7b4>
 8007744:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007746:	2b01      	cmp	r3, #1
 8007748:	dc19      	bgt.n	800777e <_dtoa_r+0x916>
 800774a:	9b04      	ldr	r3, [sp, #16]
 800774c:	b9bb      	cbnz	r3, 800777e <_dtoa_r+0x916>
 800774e:	9b05      	ldr	r3, [sp, #20]
 8007750:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007754:	b99b      	cbnz	r3, 800777e <_dtoa_r+0x916>
 8007756:	9b05      	ldr	r3, [sp, #20]
 8007758:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800775c:	0d1b      	lsrs	r3, r3, #20
 800775e:	051b      	lsls	r3, r3, #20
 8007760:	b183      	cbz	r3, 8007784 <_dtoa_r+0x91c>
 8007762:	f04f 0801 	mov.w	r8, #1
 8007766:	9b06      	ldr	r3, [sp, #24]
 8007768:	3301      	adds	r3, #1
 800776a:	9306      	str	r3, [sp, #24]
 800776c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800776e:	3301      	adds	r3, #1
 8007770:	9309      	str	r3, [sp, #36]	; 0x24
 8007772:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007774:	2b00      	cmp	r3, #0
 8007776:	f47f af6a 	bne.w	800764e <_dtoa_r+0x7e6>
 800777a:	2001      	movs	r0, #1
 800777c:	e76f      	b.n	800765e <_dtoa_r+0x7f6>
 800777e:	f04f 0800 	mov.w	r8, #0
 8007782:	e7f6      	b.n	8007772 <_dtoa_r+0x90a>
 8007784:	4698      	mov	r8, r3
 8007786:	e7f4      	b.n	8007772 <_dtoa_r+0x90a>
 8007788:	f43f af7d 	beq.w	8007686 <_dtoa_r+0x81e>
 800778c:	4618      	mov	r0, r3
 800778e:	301c      	adds	r0, #28
 8007790:	e772      	b.n	8007678 <_dtoa_r+0x810>
 8007792:	9b08      	ldr	r3, [sp, #32]
 8007794:	2b00      	cmp	r3, #0
 8007796:	dc36      	bgt.n	8007806 <_dtoa_r+0x99e>
 8007798:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800779a:	2b02      	cmp	r3, #2
 800779c:	dd33      	ble.n	8007806 <_dtoa_r+0x99e>
 800779e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80077a2:	f1b9 0f00 	cmp.w	r9, #0
 80077a6:	d10d      	bne.n	80077c4 <_dtoa_r+0x95c>
 80077a8:	4621      	mov	r1, r4
 80077aa:	464b      	mov	r3, r9
 80077ac:	2205      	movs	r2, #5
 80077ae:	4628      	mov	r0, r5
 80077b0:	f000 f9c8 	bl	8007b44 <__multadd>
 80077b4:	4601      	mov	r1, r0
 80077b6:	4604      	mov	r4, r0
 80077b8:	4658      	mov	r0, fp
 80077ba:	f000 fbdf 	bl	8007f7c <__mcmp>
 80077be:	2800      	cmp	r0, #0
 80077c0:	f73f adb8 	bgt.w	8007334 <_dtoa_r+0x4cc>
 80077c4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80077c6:	9f03      	ldr	r7, [sp, #12]
 80077c8:	ea6f 0a03 	mvn.w	sl, r3
 80077cc:	f04f 0800 	mov.w	r8, #0
 80077d0:	4621      	mov	r1, r4
 80077d2:	4628      	mov	r0, r5
 80077d4:	f000 f994 	bl	8007b00 <_Bfree>
 80077d8:	2e00      	cmp	r6, #0
 80077da:	f43f aea7 	beq.w	800752c <_dtoa_r+0x6c4>
 80077de:	f1b8 0f00 	cmp.w	r8, #0
 80077e2:	d005      	beq.n	80077f0 <_dtoa_r+0x988>
 80077e4:	45b0      	cmp	r8, r6
 80077e6:	d003      	beq.n	80077f0 <_dtoa_r+0x988>
 80077e8:	4641      	mov	r1, r8
 80077ea:	4628      	mov	r0, r5
 80077ec:	f000 f988 	bl	8007b00 <_Bfree>
 80077f0:	4631      	mov	r1, r6
 80077f2:	4628      	mov	r0, r5
 80077f4:	f000 f984 	bl	8007b00 <_Bfree>
 80077f8:	e698      	b.n	800752c <_dtoa_r+0x6c4>
 80077fa:	2400      	movs	r4, #0
 80077fc:	4626      	mov	r6, r4
 80077fe:	e7e1      	b.n	80077c4 <_dtoa_r+0x95c>
 8007800:	46c2      	mov	sl, r8
 8007802:	4626      	mov	r6, r4
 8007804:	e596      	b.n	8007334 <_dtoa_r+0x4cc>
 8007806:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007808:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800780c:	2b00      	cmp	r3, #0
 800780e:	f000 80fd 	beq.w	8007a0c <_dtoa_r+0xba4>
 8007812:	2f00      	cmp	r7, #0
 8007814:	dd05      	ble.n	8007822 <_dtoa_r+0x9ba>
 8007816:	4631      	mov	r1, r6
 8007818:	463a      	mov	r2, r7
 800781a:	4628      	mov	r0, r5
 800781c:	f000 fb3e 	bl	8007e9c <__lshift>
 8007820:	4606      	mov	r6, r0
 8007822:	f1b8 0f00 	cmp.w	r8, #0
 8007826:	d05c      	beq.n	80078e2 <_dtoa_r+0xa7a>
 8007828:	4628      	mov	r0, r5
 800782a:	6871      	ldr	r1, [r6, #4]
 800782c:	f000 f928 	bl	8007a80 <_Balloc>
 8007830:	4607      	mov	r7, r0
 8007832:	b928      	cbnz	r0, 8007840 <_dtoa_r+0x9d8>
 8007834:	4602      	mov	r2, r0
 8007836:	f240 21ea 	movw	r1, #746	; 0x2ea
 800783a:	4b7f      	ldr	r3, [pc, #508]	; (8007a38 <_dtoa_r+0xbd0>)
 800783c:	f7ff bb28 	b.w	8006e90 <_dtoa_r+0x28>
 8007840:	6932      	ldr	r2, [r6, #16]
 8007842:	f106 010c 	add.w	r1, r6, #12
 8007846:	3202      	adds	r2, #2
 8007848:	0092      	lsls	r2, r2, #2
 800784a:	300c      	adds	r0, #12
 800784c:	f7fe fcfe 	bl	800624c <memcpy>
 8007850:	2201      	movs	r2, #1
 8007852:	4639      	mov	r1, r7
 8007854:	4628      	mov	r0, r5
 8007856:	f000 fb21 	bl	8007e9c <__lshift>
 800785a:	46b0      	mov	r8, r6
 800785c:	4606      	mov	r6, r0
 800785e:	9b03      	ldr	r3, [sp, #12]
 8007860:	3301      	adds	r3, #1
 8007862:	9308      	str	r3, [sp, #32]
 8007864:	9b03      	ldr	r3, [sp, #12]
 8007866:	444b      	add	r3, r9
 8007868:	930a      	str	r3, [sp, #40]	; 0x28
 800786a:	9b04      	ldr	r3, [sp, #16]
 800786c:	f003 0301 	and.w	r3, r3, #1
 8007870:	9309      	str	r3, [sp, #36]	; 0x24
 8007872:	9b08      	ldr	r3, [sp, #32]
 8007874:	4621      	mov	r1, r4
 8007876:	3b01      	subs	r3, #1
 8007878:	4658      	mov	r0, fp
 800787a:	9304      	str	r3, [sp, #16]
 800787c:	f7ff fa68 	bl	8006d50 <quorem>
 8007880:	4603      	mov	r3, r0
 8007882:	4641      	mov	r1, r8
 8007884:	3330      	adds	r3, #48	; 0x30
 8007886:	9006      	str	r0, [sp, #24]
 8007888:	4658      	mov	r0, fp
 800788a:	930b      	str	r3, [sp, #44]	; 0x2c
 800788c:	f000 fb76 	bl	8007f7c <__mcmp>
 8007890:	4632      	mov	r2, r6
 8007892:	4681      	mov	r9, r0
 8007894:	4621      	mov	r1, r4
 8007896:	4628      	mov	r0, r5
 8007898:	f000 fb8c 	bl	8007fb4 <__mdiff>
 800789c:	68c2      	ldr	r2, [r0, #12]
 800789e:	4607      	mov	r7, r0
 80078a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078a2:	bb02      	cbnz	r2, 80078e6 <_dtoa_r+0xa7e>
 80078a4:	4601      	mov	r1, r0
 80078a6:	4658      	mov	r0, fp
 80078a8:	f000 fb68 	bl	8007f7c <__mcmp>
 80078ac:	4602      	mov	r2, r0
 80078ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078b0:	4639      	mov	r1, r7
 80078b2:	4628      	mov	r0, r5
 80078b4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80078b8:	f000 f922 	bl	8007b00 <_Bfree>
 80078bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80078be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80078c0:	9f08      	ldr	r7, [sp, #32]
 80078c2:	ea43 0102 	orr.w	r1, r3, r2
 80078c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078c8:	430b      	orrs	r3, r1
 80078ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078cc:	d10d      	bne.n	80078ea <_dtoa_r+0xa82>
 80078ce:	2b39      	cmp	r3, #57	; 0x39
 80078d0:	d029      	beq.n	8007926 <_dtoa_r+0xabe>
 80078d2:	f1b9 0f00 	cmp.w	r9, #0
 80078d6:	dd01      	ble.n	80078dc <_dtoa_r+0xa74>
 80078d8:	9b06      	ldr	r3, [sp, #24]
 80078da:	3331      	adds	r3, #49	; 0x31
 80078dc:	9a04      	ldr	r2, [sp, #16]
 80078de:	7013      	strb	r3, [r2, #0]
 80078e0:	e776      	b.n	80077d0 <_dtoa_r+0x968>
 80078e2:	4630      	mov	r0, r6
 80078e4:	e7b9      	b.n	800785a <_dtoa_r+0x9f2>
 80078e6:	2201      	movs	r2, #1
 80078e8:	e7e2      	b.n	80078b0 <_dtoa_r+0xa48>
 80078ea:	f1b9 0f00 	cmp.w	r9, #0
 80078ee:	db06      	blt.n	80078fe <_dtoa_r+0xa96>
 80078f0:	9922      	ldr	r1, [sp, #136]	; 0x88
 80078f2:	ea41 0909 	orr.w	r9, r1, r9
 80078f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80078f8:	ea59 0101 	orrs.w	r1, r9, r1
 80078fc:	d120      	bne.n	8007940 <_dtoa_r+0xad8>
 80078fe:	2a00      	cmp	r2, #0
 8007900:	ddec      	ble.n	80078dc <_dtoa_r+0xa74>
 8007902:	4659      	mov	r1, fp
 8007904:	2201      	movs	r2, #1
 8007906:	4628      	mov	r0, r5
 8007908:	9308      	str	r3, [sp, #32]
 800790a:	f000 fac7 	bl	8007e9c <__lshift>
 800790e:	4621      	mov	r1, r4
 8007910:	4683      	mov	fp, r0
 8007912:	f000 fb33 	bl	8007f7c <__mcmp>
 8007916:	2800      	cmp	r0, #0
 8007918:	9b08      	ldr	r3, [sp, #32]
 800791a:	dc02      	bgt.n	8007922 <_dtoa_r+0xaba>
 800791c:	d1de      	bne.n	80078dc <_dtoa_r+0xa74>
 800791e:	07da      	lsls	r2, r3, #31
 8007920:	d5dc      	bpl.n	80078dc <_dtoa_r+0xa74>
 8007922:	2b39      	cmp	r3, #57	; 0x39
 8007924:	d1d8      	bne.n	80078d8 <_dtoa_r+0xa70>
 8007926:	2339      	movs	r3, #57	; 0x39
 8007928:	9a04      	ldr	r2, [sp, #16]
 800792a:	7013      	strb	r3, [r2, #0]
 800792c:	463b      	mov	r3, r7
 800792e:	461f      	mov	r7, r3
 8007930:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007934:	3b01      	subs	r3, #1
 8007936:	2a39      	cmp	r2, #57	; 0x39
 8007938:	d050      	beq.n	80079dc <_dtoa_r+0xb74>
 800793a:	3201      	adds	r2, #1
 800793c:	701a      	strb	r2, [r3, #0]
 800793e:	e747      	b.n	80077d0 <_dtoa_r+0x968>
 8007940:	2a00      	cmp	r2, #0
 8007942:	dd03      	ble.n	800794c <_dtoa_r+0xae4>
 8007944:	2b39      	cmp	r3, #57	; 0x39
 8007946:	d0ee      	beq.n	8007926 <_dtoa_r+0xabe>
 8007948:	3301      	adds	r3, #1
 800794a:	e7c7      	b.n	80078dc <_dtoa_r+0xa74>
 800794c:	9a08      	ldr	r2, [sp, #32]
 800794e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007950:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007954:	428a      	cmp	r2, r1
 8007956:	d02a      	beq.n	80079ae <_dtoa_r+0xb46>
 8007958:	4659      	mov	r1, fp
 800795a:	2300      	movs	r3, #0
 800795c:	220a      	movs	r2, #10
 800795e:	4628      	mov	r0, r5
 8007960:	f000 f8f0 	bl	8007b44 <__multadd>
 8007964:	45b0      	cmp	r8, r6
 8007966:	4683      	mov	fp, r0
 8007968:	f04f 0300 	mov.w	r3, #0
 800796c:	f04f 020a 	mov.w	r2, #10
 8007970:	4641      	mov	r1, r8
 8007972:	4628      	mov	r0, r5
 8007974:	d107      	bne.n	8007986 <_dtoa_r+0xb1e>
 8007976:	f000 f8e5 	bl	8007b44 <__multadd>
 800797a:	4680      	mov	r8, r0
 800797c:	4606      	mov	r6, r0
 800797e:	9b08      	ldr	r3, [sp, #32]
 8007980:	3301      	adds	r3, #1
 8007982:	9308      	str	r3, [sp, #32]
 8007984:	e775      	b.n	8007872 <_dtoa_r+0xa0a>
 8007986:	f000 f8dd 	bl	8007b44 <__multadd>
 800798a:	4631      	mov	r1, r6
 800798c:	4680      	mov	r8, r0
 800798e:	2300      	movs	r3, #0
 8007990:	220a      	movs	r2, #10
 8007992:	4628      	mov	r0, r5
 8007994:	f000 f8d6 	bl	8007b44 <__multadd>
 8007998:	4606      	mov	r6, r0
 800799a:	e7f0      	b.n	800797e <_dtoa_r+0xb16>
 800799c:	f1b9 0f00 	cmp.w	r9, #0
 80079a0:	bfcc      	ite	gt
 80079a2:	464f      	movgt	r7, r9
 80079a4:	2701      	movle	r7, #1
 80079a6:	f04f 0800 	mov.w	r8, #0
 80079aa:	9a03      	ldr	r2, [sp, #12]
 80079ac:	4417      	add	r7, r2
 80079ae:	4659      	mov	r1, fp
 80079b0:	2201      	movs	r2, #1
 80079b2:	4628      	mov	r0, r5
 80079b4:	9308      	str	r3, [sp, #32]
 80079b6:	f000 fa71 	bl	8007e9c <__lshift>
 80079ba:	4621      	mov	r1, r4
 80079bc:	4683      	mov	fp, r0
 80079be:	f000 fadd 	bl	8007f7c <__mcmp>
 80079c2:	2800      	cmp	r0, #0
 80079c4:	dcb2      	bgt.n	800792c <_dtoa_r+0xac4>
 80079c6:	d102      	bne.n	80079ce <_dtoa_r+0xb66>
 80079c8:	9b08      	ldr	r3, [sp, #32]
 80079ca:	07db      	lsls	r3, r3, #31
 80079cc:	d4ae      	bmi.n	800792c <_dtoa_r+0xac4>
 80079ce:	463b      	mov	r3, r7
 80079d0:	461f      	mov	r7, r3
 80079d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80079d6:	2a30      	cmp	r2, #48	; 0x30
 80079d8:	d0fa      	beq.n	80079d0 <_dtoa_r+0xb68>
 80079da:	e6f9      	b.n	80077d0 <_dtoa_r+0x968>
 80079dc:	9a03      	ldr	r2, [sp, #12]
 80079de:	429a      	cmp	r2, r3
 80079e0:	d1a5      	bne.n	800792e <_dtoa_r+0xac6>
 80079e2:	2331      	movs	r3, #49	; 0x31
 80079e4:	f10a 0a01 	add.w	sl, sl, #1
 80079e8:	e779      	b.n	80078de <_dtoa_r+0xa76>
 80079ea:	4b14      	ldr	r3, [pc, #80]	; (8007a3c <_dtoa_r+0xbd4>)
 80079ec:	f7ff baa8 	b.w	8006f40 <_dtoa_r+0xd8>
 80079f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	f47f aa81 	bne.w	8006efa <_dtoa_r+0x92>
 80079f8:	4b11      	ldr	r3, [pc, #68]	; (8007a40 <_dtoa_r+0xbd8>)
 80079fa:	f7ff baa1 	b.w	8006f40 <_dtoa_r+0xd8>
 80079fe:	f1b9 0f00 	cmp.w	r9, #0
 8007a02:	dc03      	bgt.n	8007a0c <_dtoa_r+0xba4>
 8007a04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a06:	2b02      	cmp	r3, #2
 8007a08:	f73f aecb 	bgt.w	80077a2 <_dtoa_r+0x93a>
 8007a0c:	9f03      	ldr	r7, [sp, #12]
 8007a0e:	4621      	mov	r1, r4
 8007a10:	4658      	mov	r0, fp
 8007a12:	f7ff f99d 	bl	8006d50 <quorem>
 8007a16:	9a03      	ldr	r2, [sp, #12]
 8007a18:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007a1c:	f807 3b01 	strb.w	r3, [r7], #1
 8007a20:	1aba      	subs	r2, r7, r2
 8007a22:	4591      	cmp	r9, r2
 8007a24:	ddba      	ble.n	800799c <_dtoa_r+0xb34>
 8007a26:	4659      	mov	r1, fp
 8007a28:	2300      	movs	r3, #0
 8007a2a:	220a      	movs	r2, #10
 8007a2c:	4628      	mov	r0, r5
 8007a2e:	f000 f889 	bl	8007b44 <__multadd>
 8007a32:	4683      	mov	fp, r0
 8007a34:	e7eb      	b.n	8007a0e <_dtoa_r+0xba6>
 8007a36:	bf00      	nop
 8007a38:	0800968b 	.word	0x0800968b
 8007a3c:	080095e8 	.word	0x080095e8
 8007a40:	0800960c 	.word	0x0800960c

08007a44 <_localeconv_r>:
 8007a44:	4800      	ldr	r0, [pc, #0]	; (8007a48 <_localeconv_r+0x4>)
 8007a46:	4770      	bx	lr
 8007a48:	20000160 	.word	0x20000160

08007a4c <memchr>:
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	b510      	push	{r4, lr}
 8007a50:	b2c9      	uxtb	r1, r1
 8007a52:	4402      	add	r2, r0
 8007a54:	4293      	cmp	r3, r2
 8007a56:	4618      	mov	r0, r3
 8007a58:	d101      	bne.n	8007a5e <memchr+0x12>
 8007a5a:	2000      	movs	r0, #0
 8007a5c:	e003      	b.n	8007a66 <memchr+0x1a>
 8007a5e:	7804      	ldrb	r4, [r0, #0]
 8007a60:	3301      	adds	r3, #1
 8007a62:	428c      	cmp	r4, r1
 8007a64:	d1f6      	bne.n	8007a54 <memchr+0x8>
 8007a66:	bd10      	pop	{r4, pc}

08007a68 <__malloc_lock>:
 8007a68:	4801      	ldr	r0, [pc, #4]	; (8007a70 <__malloc_lock+0x8>)
 8007a6a:	f000 bd2c 	b.w	80084c6 <__retarget_lock_acquire_recursive>
 8007a6e:	bf00      	nop
 8007a70:	20000760 	.word	0x20000760

08007a74 <__malloc_unlock>:
 8007a74:	4801      	ldr	r0, [pc, #4]	; (8007a7c <__malloc_unlock+0x8>)
 8007a76:	f000 bd27 	b.w	80084c8 <__retarget_lock_release_recursive>
 8007a7a:	bf00      	nop
 8007a7c:	20000760 	.word	0x20000760

08007a80 <_Balloc>:
 8007a80:	b570      	push	{r4, r5, r6, lr}
 8007a82:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007a84:	4604      	mov	r4, r0
 8007a86:	460d      	mov	r5, r1
 8007a88:	b976      	cbnz	r6, 8007aa8 <_Balloc+0x28>
 8007a8a:	2010      	movs	r0, #16
 8007a8c:	f7fe fbd6 	bl	800623c <malloc>
 8007a90:	4602      	mov	r2, r0
 8007a92:	6260      	str	r0, [r4, #36]	; 0x24
 8007a94:	b920      	cbnz	r0, 8007aa0 <_Balloc+0x20>
 8007a96:	2166      	movs	r1, #102	; 0x66
 8007a98:	4b17      	ldr	r3, [pc, #92]	; (8007af8 <_Balloc+0x78>)
 8007a9a:	4818      	ldr	r0, [pc, #96]	; (8007afc <_Balloc+0x7c>)
 8007a9c:	f000 fce2 	bl	8008464 <__assert_func>
 8007aa0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007aa4:	6006      	str	r6, [r0, #0]
 8007aa6:	60c6      	str	r6, [r0, #12]
 8007aa8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007aaa:	68f3      	ldr	r3, [r6, #12]
 8007aac:	b183      	cbz	r3, 8007ad0 <_Balloc+0x50>
 8007aae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ab0:	68db      	ldr	r3, [r3, #12]
 8007ab2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007ab6:	b9b8      	cbnz	r0, 8007ae8 <_Balloc+0x68>
 8007ab8:	2101      	movs	r1, #1
 8007aba:	fa01 f605 	lsl.w	r6, r1, r5
 8007abe:	1d72      	adds	r2, r6, #5
 8007ac0:	4620      	mov	r0, r4
 8007ac2:	0092      	lsls	r2, r2, #2
 8007ac4:	f000 fb5e 	bl	8008184 <_calloc_r>
 8007ac8:	b160      	cbz	r0, 8007ae4 <_Balloc+0x64>
 8007aca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007ace:	e00e      	b.n	8007aee <_Balloc+0x6e>
 8007ad0:	2221      	movs	r2, #33	; 0x21
 8007ad2:	2104      	movs	r1, #4
 8007ad4:	4620      	mov	r0, r4
 8007ad6:	f000 fb55 	bl	8008184 <_calloc_r>
 8007ada:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007adc:	60f0      	str	r0, [r6, #12]
 8007ade:	68db      	ldr	r3, [r3, #12]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d1e4      	bne.n	8007aae <_Balloc+0x2e>
 8007ae4:	2000      	movs	r0, #0
 8007ae6:	bd70      	pop	{r4, r5, r6, pc}
 8007ae8:	6802      	ldr	r2, [r0, #0]
 8007aea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007aee:	2300      	movs	r3, #0
 8007af0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007af4:	e7f7      	b.n	8007ae6 <_Balloc+0x66>
 8007af6:	bf00      	nop
 8007af8:	08009619 	.word	0x08009619
 8007afc:	0800969c 	.word	0x0800969c

08007b00 <_Bfree>:
 8007b00:	b570      	push	{r4, r5, r6, lr}
 8007b02:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007b04:	4605      	mov	r5, r0
 8007b06:	460c      	mov	r4, r1
 8007b08:	b976      	cbnz	r6, 8007b28 <_Bfree+0x28>
 8007b0a:	2010      	movs	r0, #16
 8007b0c:	f7fe fb96 	bl	800623c <malloc>
 8007b10:	4602      	mov	r2, r0
 8007b12:	6268      	str	r0, [r5, #36]	; 0x24
 8007b14:	b920      	cbnz	r0, 8007b20 <_Bfree+0x20>
 8007b16:	218a      	movs	r1, #138	; 0x8a
 8007b18:	4b08      	ldr	r3, [pc, #32]	; (8007b3c <_Bfree+0x3c>)
 8007b1a:	4809      	ldr	r0, [pc, #36]	; (8007b40 <_Bfree+0x40>)
 8007b1c:	f000 fca2 	bl	8008464 <__assert_func>
 8007b20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b24:	6006      	str	r6, [r0, #0]
 8007b26:	60c6      	str	r6, [r0, #12]
 8007b28:	b13c      	cbz	r4, 8007b3a <_Bfree+0x3a>
 8007b2a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007b2c:	6862      	ldr	r2, [r4, #4]
 8007b2e:	68db      	ldr	r3, [r3, #12]
 8007b30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007b34:	6021      	str	r1, [r4, #0]
 8007b36:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007b3a:	bd70      	pop	{r4, r5, r6, pc}
 8007b3c:	08009619 	.word	0x08009619
 8007b40:	0800969c 	.word	0x0800969c

08007b44 <__multadd>:
 8007b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b48:	4607      	mov	r7, r0
 8007b4a:	460c      	mov	r4, r1
 8007b4c:	461e      	mov	r6, r3
 8007b4e:	2000      	movs	r0, #0
 8007b50:	690d      	ldr	r5, [r1, #16]
 8007b52:	f101 0c14 	add.w	ip, r1, #20
 8007b56:	f8dc 3000 	ldr.w	r3, [ip]
 8007b5a:	3001      	adds	r0, #1
 8007b5c:	b299      	uxth	r1, r3
 8007b5e:	fb02 6101 	mla	r1, r2, r1, r6
 8007b62:	0c1e      	lsrs	r6, r3, #16
 8007b64:	0c0b      	lsrs	r3, r1, #16
 8007b66:	fb02 3306 	mla	r3, r2, r6, r3
 8007b6a:	b289      	uxth	r1, r1
 8007b6c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007b70:	4285      	cmp	r5, r0
 8007b72:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007b76:	f84c 1b04 	str.w	r1, [ip], #4
 8007b7a:	dcec      	bgt.n	8007b56 <__multadd+0x12>
 8007b7c:	b30e      	cbz	r6, 8007bc2 <__multadd+0x7e>
 8007b7e:	68a3      	ldr	r3, [r4, #8]
 8007b80:	42ab      	cmp	r3, r5
 8007b82:	dc19      	bgt.n	8007bb8 <__multadd+0x74>
 8007b84:	6861      	ldr	r1, [r4, #4]
 8007b86:	4638      	mov	r0, r7
 8007b88:	3101      	adds	r1, #1
 8007b8a:	f7ff ff79 	bl	8007a80 <_Balloc>
 8007b8e:	4680      	mov	r8, r0
 8007b90:	b928      	cbnz	r0, 8007b9e <__multadd+0x5a>
 8007b92:	4602      	mov	r2, r0
 8007b94:	21b5      	movs	r1, #181	; 0xb5
 8007b96:	4b0c      	ldr	r3, [pc, #48]	; (8007bc8 <__multadd+0x84>)
 8007b98:	480c      	ldr	r0, [pc, #48]	; (8007bcc <__multadd+0x88>)
 8007b9a:	f000 fc63 	bl	8008464 <__assert_func>
 8007b9e:	6922      	ldr	r2, [r4, #16]
 8007ba0:	f104 010c 	add.w	r1, r4, #12
 8007ba4:	3202      	adds	r2, #2
 8007ba6:	0092      	lsls	r2, r2, #2
 8007ba8:	300c      	adds	r0, #12
 8007baa:	f7fe fb4f 	bl	800624c <memcpy>
 8007bae:	4621      	mov	r1, r4
 8007bb0:	4638      	mov	r0, r7
 8007bb2:	f7ff ffa5 	bl	8007b00 <_Bfree>
 8007bb6:	4644      	mov	r4, r8
 8007bb8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007bbc:	3501      	adds	r5, #1
 8007bbe:	615e      	str	r6, [r3, #20]
 8007bc0:	6125      	str	r5, [r4, #16]
 8007bc2:	4620      	mov	r0, r4
 8007bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bc8:	0800968b 	.word	0x0800968b
 8007bcc:	0800969c 	.word	0x0800969c

08007bd0 <__hi0bits>:
 8007bd0:	0c02      	lsrs	r2, r0, #16
 8007bd2:	0412      	lsls	r2, r2, #16
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	b9ca      	cbnz	r2, 8007c0c <__hi0bits+0x3c>
 8007bd8:	0403      	lsls	r3, r0, #16
 8007bda:	2010      	movs	r0, #16
 8007bdc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007be0:	bf04      	itt	eq
 8007be2:	021b      	lsleq	r3, r3, #8
 8007be4:	3008      	addeq	r0, #8
 8007be6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007bea:	bf04      	itt	eq
 8007bec:	011b      	lsleq	r3, r3, #4
 8007bee:	3004      	addeq	r0, #4
 8007bf0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007bf4:	bf04      	itt	eq
 8007bf6:	009b      	lsleq	r3, r3, #2
 8007bf8:	3002      	addeq	r0, #2
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	db05      	blt.n	8007c0a <__hi0bits+0x3a>
 8007bfe:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007c02:	f100 0001 	add.w	r0, r0, #1
 8007c06:	bf08      	it	eq
 8007c08:	2020      	moveq	r0, #32
 8007c0a:	4770      	bx	lr
 8007c0c:	2000      	movs	r0, #0
 8007c0e:	e7e5      	b.n	8007bdc <__hi0bits+0xc>

08007c10 <__lo0bits>:
 8007c10:	6803      	ldr	r3, [r0, #0]
 8007c12:	4602      	mov	r2, r0
 8007c14:	f013 0007 	ands.w	r0, r3, #7
 8007c18:	d00b      	beq.n	8007c32 <__lo0bits+0x22>
 8007c1a:	07d9      	lsls	r1, r3, #31
 8007c1c:	d421      	bmi.n	8007c62 <__lo0bits+0x52>
 8007c1e:	0798      	lsls	r0, r3, #30
 8007c20:	bf49      	itett	mi
 8007c22:	085b      	lsrmi	r3, r3, #1
 8007c24:	089b      	lsrpl	r3, r3, #2
 8007c26:	2001      	movmi	r0, #1
 8007c28:	6013      	strmi	r3, [r2, #0]
 8007c2a:	bf5c      	itt	pl
 8007c2c:	2002      	movpl	r0, #2
 8007c2e:	6013      	strpl	r3, [r2, #0]
 8007c30:	4770      	bx	lr
 8007c32:	b299      	uxth	r1, r3
 8007c34:	b909      	cbnz	r1, 8007c3a <__lo0bits+0x2a>
 8007c36:	2010      	movs	r0, #16
 8007c38:	0c1b      	lsrs	r3, r3, #16
 8007c3a:	b2d9      	uxtb	r1, r3
 8007c3c:	b909      	cbnz	r1, 8007c42 <__lo0bits+0x32>
 8007c3e:	3008      	adds	r0, #8
 8007c40:	0a1b      	lsrs	r3, r3, #8
 8007c42:	0719      	lsls	r1, r3, #28
 8007c44:	bf04      	itt	eq
 8007c46:	091b      	lsreq	r3, r3, #4
 8007c48:	3004      	addeq	r0, #4
 8007c4a:	0799      	lsls	r1, r3, #30
 8007c4c:	bf04      	itt	eq
 8007c4e:	089b      	lsreq	r3, r3, #2
 8007c50:	3002      	addeq	r0, #2
 8007c52:	07d9      	lsls	r1, r3, #31
 8007c54:	d403      	bmi.n	8007c5e <__lo0bits+0x4e>
 8007c56:	085b      	lsrs	r3, r3, #1
 8007c58:	f100 0001 	add.w	r0, r0, #1
 8007c5c:	d003      	beq.n	8007c66 <__lo0bits+0x56>
 8007c5e:	6013      	str	r3, [r2, #0]
 8007c60:	4770      	bx	lr
 8007c62:	2000      	movs	r0, #0
 8007c64:	4770      	bx	lr
 8007c66:	2020      	movs	r0, #32
 8007c68:	4770      	bx	lr
	...

08007c6c <__i2b>:
 8007c6c:	b510      	push	{r4, lr}
 8007c6e:	460c      	mov	r4, r1
 8007c70:	2101      	movs	r1, #1
 8007c72:	f7ff ff05 	bl	8007a80 <_Balloc>
 8007c76:	4602      	mov	r2, r0
 8007c78:	b928      	cbnz	r0, 8007c86 <__i2b+0x1a>
 8007c7a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007c7e:	4b04      	ldr	r3, [pc, #16]	; (8007c90 <__i2b+0x24>)
 8007c80:	4804      	ldr	r0, [pc, #16]	; (8007c94 <__i2b+0x28>)
 8007c82:	f000 fbef 	bl	8008464 <__assert_func>
 8007c86:	2301      	movs	r3, #1
 8007c88:	6144      	str	r4, [r0, #20]
 8007c8a:	6103      	str	r3, [r0, #16]
 8007c8c:	bd10      	pop	{r4, pc}
 8007c8e:	bf00      	nop
 8007c90:	0800968b 	.word	0x0800968b
 8007c94:	0800969c 	.word	0x0800969c

08007c98 <__multiply>:
 8007c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c9c:	4691      	mov	r9, r2
 8007c9e:	690a      	ldr	r2, [r1, #16]
 8007ca0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007ca4:	460c      	mov	r4, r1
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	bfbe      	ittt	lt
 8007caa:	460b      	movlt	r3, r1
 8007cac:	464c      	movlt	r4, r9
 8007cae:	4699      	movlt	r9, r3
 8007cb0:	6927      	ldr	r7, [r4, #16]
 8007cb2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007cb6:	68a3      	ldr	r3, [r4, #8]
 8007cb8:	6861      	ldr	r1, [r4, #4]
 8007cba:	eb07 060a 	add.w	r6, r7, sl
 8007cbe:	42b3      	cmp	r3, r6
 8007cc0:	b085      	sub	sp, #20
 8007cc2:	bfb8      	it	lt
 8007cc4:	3101      	addlt	r1, #1
 8007cc6:	f7ff fedb 	bl	8007a80 <_Balloc>
 8007cca:	b930      	cbnz	r0, 8007cda <__multiply+0x42>
 8007ccc:	4602      	mov	r2, r0
 8007cce:	f240 115d 	movw	r1, #349	; 0x15d
 8007cd2:	4b43      	ldr	r3, [pc, #268]	; (8007de0 <__multiply+0x148>)
 8007cd4:	4843      	ldr	r0, [pc, #268]	; (8007de4 <__multiply+0x14c>)
 8007cd6:	f000 fbc5 	bl	8008464 <__assert_func>
 8007cda:	f100 0514 	add.w	r5, r0, #20
 8007cde:	462b      	mov	r3, r5
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007ce6:	4543      	cmp	r3, r8
 8007ce8:	d321      	bcc.n	8007d2e <__multiply+0x96>
 8007cea:	f104 0314 	add.w	r3, r4, #20
 8007cee:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007cf2:	f109 0314 	add.w	r3, r9, #20
 8007cf6:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007cfa:	9202      	str	r2, [sp, #8]
 8007cfc:	1b3a      	subs	r2, r7, r4
 8007cfe:	3a15      	subs	r2, #21
 8007d00:	f022 0203 	bic.w	r2, r2, #3
 8007d04:	3204      	adds	r2, #4
 8007d06:	f104 0115 	add.w	r1, r4, #21
 8007d0a:	428f      	cmp	r7, r1
 8007d0c:	bf38      	it	cc
 8007d0e:	2204      	movcc	r2, #4
 8007d10:	9201      	str	r2, [sp, #4]
 8007d12:	9a02      	ldr	r2, [sp, #8]
 8007d14:	9303      	str	r3, [sp, #12]
 8007d16:	429a      	cmp	r2, r3
 8007d18:	d80c      	bhi.n	8007d34 <__multiply+0x9c>
 8007d1a:	2e00      	cmp	r6, #0
 8007d1c:	dd03      	ble.n	8007d26 <__multiply+0x8e>
 8007d1e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d059      	beq.n	8007dda <__multiply+0x142>
 8007d26:	6106      	str	r6, [r0, #16]
 8007d28:	b005      	add	sp, #20
 8007d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d2e:	f843 2b04 	str.w	r2, [r3], #4
 8007d32:	e7d8      	b.n	8007ce6 <__multiply+0x4e>
 8007d34:	f8b3 a000 	ldrh.w	sl, [r3]
 8007d38:	f1ba 0f00 	cmp.w	sl, #0
 8007d3c:	d023      	beq.n	8007d86 <__multiply+0xee>
 8007d3e:	46a9      	mov	r9, r5
 8007d40:	f04f 0c00 	mov.w	ip, #0
 8007d44:	f104 0e14 	add.w	lr, r4, #20
 8007d48:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007d4c:	f8d9 1000 	ldr.w	r1, [r9]
 8007d50:	fa1f fb82 	uxth.w	fp, r2
 8007d54:	b289      	uxth	r1, r1
 8007d56:	fb0a 110b 	mla	r1, sl, fp, r1
 8007d5a:	4461      	add	r1, ip
 8007d5c:	f8d9 c000 	ldr.w	ip, [r9]
 8007d60:	0c12      	lsrs	r2, r2, #16
 8007d62:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007d66:	fb0a c202 	mla	r2, sl, r2, ip
 8007d6a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007d6e:	b289      	uxth	r1, r1
 8007d70:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007d74:	4577      	cmp	r7, lr
 8007d76:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007d7a:	f849 1b04 	str.w	r1, [r9], #4
 8007d7e:	d8e3      	bhi.n	8007d48 <__multiply+0xb0>
 8007d80:	9a01      	ldr	r2, [sp, #4]
 8007d82:	f845 c002 	str.w	ip, [r5, r2]
 8007d86:	9a03      	ldr	r2, [sp, #12]
 8007d88:	3304      	adds	r3, #4
 8007d8a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007d8e:	f1b9 0f00 	cmp.w	r9, #0
 8007d92:	d020      	beq.n	8007dd6 <__multiply+0x13e>
 8007d94:	46ae      	mov	lr, r5
 8007d96:	f04f 0a00 	mov.w	sl, #0
 8007d9a:	6829      	ldr	r1, [r5, #0]
 8007d9c:	f104 0c14 	add.w	ip, r4, #20
 8007da0:	f8bc b000 	ldrh.w	fp, [ip]
 8007da4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007da8:	b289      	uxth	r1, r1
 8007daa:	fb09 220b 	mla	r2, r9, fp, r2
 8007dae:	4492      	add	sl, r2
 8007db0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007db4:	f84e 1b04 	str.w	r1, [lr], #4
 8007db8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007dbc:	f8be 1000 	ldrh.w	r1, [lr]
 8007dc0:	0c12      	lsrs	r2, r2, #16
 8007dc2:	fb09 1102 	mla	r1, r9, r2, r1
 8007dc6:	4567      	cmp	r7, ip
 8007dc8:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007dcc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007dd0:	d8e6      	bhi.n	8007da0 <__multiply+0x108>
 8007dd2:	9a01      	ldr	r2, [sp, #4]
 8007dd4:	50a9      	str	r1, [r5, r2]
 8007dd6:	3504      	adds	r5, #4
 8007dd8:	e79b      	b.n	8007d12 <__multiply+0x7a>
 8007dda:	3e01      	subs	r6, #1
 8007ddc:	e79d      	b.n	8007d1a <__multiply+0x82>
 8007dde:	bf00      	nop
 8007de0:	0800968b 	.word	0x0800968b
 8007de4:	0800969c 	.word	0x0800969c

08007de8 <__pow5mult>:
 8007de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007dec:	4615      	mov	r5, r2
 8007dee:	f012 0203 	ands.w	r2, r2, #3
 8007df2:	4606      	mov	r6, r0
 8007df4:	460f      	mov	r7, r1
 8007df6:	d007      	beq.n	8007e08 <__pow5mult+0x20>
 8007df8:	4c25      	ldr	r4, [pc, #148]	; (8007e90 <__pow5mult+0xa8>)
 8007dfa:	3a01      	subs	r2, #1
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007e02:	f7ff fe9f 	bl	8007b44 <__multadd>
 8007e06:	4607      	mov	r7, r0
 8007e08:	10ad      	asrs	r5, r5, #2
 8007e0a:	d03d      	beq.n	8007e88 <__pow5mult+0xa0>
 8007e0c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007e0e:	b97c      	cbnz	r4, 8007e30 <__pow5mult+0x48>
 8007e10:	2010      	movs	r0, #16
 8007e12:	f7fe fa13 	bl	800623c <malloc>
 8007e16:	4602      	mov	r2, r0
 8007e18:	6270      	str	r0, [r6, #36]	; 0x24
 8007e1a:	b928      	cbnz	r0, 8007e28 <__pow5mult+0x40>
 8007e1c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007e20:	4b1c      	ldr	r3, [pc, #112]	; (8007e94 <__pow5mult+0xac>)
 8007e22:	481d      	ldr	r0, [pc, #116]	; (8007e98 <__pow5mult+0xb0>)
 8007e24:	f000 fb1e 	bl	8008464 <__assert_func>
 8007e28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007e2c:	6004      	str	r4, [r0, #0]
 8007e2e:	60c4      	str	r4, [r0, #12]
 8007e30:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007e34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007e38:	b94c      	cbnz	r4, 8007e4e <__pow5mult+0x66>
 8007e3a:	f240 2171 	movw	r1, #625	; 0x271
 8007e3e:	4630      	mov	r0, r6
 8007e40:	f7ff ff14 	bl	8007c6c <__i2b>
 8007e44:	2300      	movs	r3, #0
 8007e46:	4604      	mov	r4, r0
 8007e48:	f8c8 0008 	str.w	r0, [r8, #8]
 8007e4c:	6003      	str	r3, [r0, #0]
 8007e4e:	f04f 0900 	mov.w	r9, #0
 8007e52:	07eb      	lsls	r3, r5, #31
 8007e54:	d50a      	bpl.n	8007e6c <__pow5mult+0x84>
 8007e56:	4639      	mov	r1, r7
 8007e58:	4622      	mov	r2, r4
 8007e5a:	4630      	mov	r0, r6
 8007e5c:	f7ff ff1c 	bl	8007c98 <__multiply>
 8007e60:	4680      	mov	r8, r0
 8007e62:	4639      	mov	r1, r7
 8007e64:	4630      	mov	r0, r6
 8007e66:	f7ff fe4b 	bl	8007b00 <_Bfree>
 8007e6a:	4647      	mov	r7, r8
 8007e6c:	106d      	asrs	r5, r5, #1
 8007e6e:	d00b      	beq.n	8007e88 <__pow5mult+0xa0>
 8007e70:	6820      	ldr	r0, [r4, #0]
 8007e72:	b938      	cbnz	r0, 8007e84 <__pow5mult+0x9c>
 8007e74:	4622      	mov	r2, r4
 8007e76:	4621      	mov	r1, r4
 8007e78:	4630      	mov	r0, r6
 8007e7a:	f7ff ff0d 	bl	8007c98 <__multiply>
 8007e7e:	6020      	str	r0, [r4, #0]
 8007e80:	f8c0 9000 	str.w	r9, [r0]
 8007e84:	4604      	mov	r4, r0
 8007e86:	e7e4      	b.n	8007e52 <__pow5mult+0x6a>
 8007e88:	4638      	mov	r0, r7
 8007e8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e8e:	bf00      	nop
 8007e90:	080097e8 	.word	0x080097e8
 8007e94:	08009619 	.word	0x08009619
 8007e98:	0800969c 	.word	0x0800969c

08007e9c <__lshift>:
 8007e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ea0:	460c      	mov	r4, r1
 8007ea2:	4607      	mov	r7, r0
 8007ea4:	4691      	mov	r9, r2
 8007ea6:	6923      	ldr	r3, [r4, #16]
 8007ea8:	6849      	ldr	r1, [r1, #4]
 8007eaa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007eae:	68a3      	ldr	r3, [r4, #8]
 8007eb0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007eb4:	f108 0601 	add.w	r6, r8, #1
 8007eb8:	42b3      	cmp	r3, r6
 8007eba:	db0b      	blt.n	8007ed4 <__lshift+0x38>
 8007ebc:	4638      	mov	r0, r7
 8007ebe:	f7ff fddf 	bl	8007a80 <_Balloc>
 8007ec2:	4605      	mov	r5, r0
 8007ec4:	b948      	cbnz	r0, 8007eda <__lshift+0x3e>
 8007ec6:	4602      	mov	r2, r0
 8007ec8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007ecc:	4b29      	ldr	r3, [pc, #164]	; (8007f74 <__lshift+0xd8>)
 8007ece:	482a      	ldr	r0, [pc, #168]	; (8007f78 <__lshift+0xdc>)
 8007ed0:	f000 fac8 	bl	8008464 <__assert_func>
 8007ed4:	3101      	adds	r1, #1
 8007ed6:	005b      	lsls	r3, r3, #1
 8007ed8:	e7ee      	b.n	8007eb8 <__lshift+0x1c>
 8007eda:	2300      	movs	r3, #0
 8007edc:	f100 0114 	add.w	r1, r0, #20
 8007ee0:	f100 0210 	add.w	r2, r0, #16
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	4553      	cmp	r3, sl
 8007ee8:	db37      	blt.n	8007f5a <__lshift+0xbe>
 8007eea:	6920      	ldr	r0, [r4, #16]
 8007eec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007ef0:	f104 0314 	add.w	r3, r4, #20
 8007ef4:	f019 091f 	ands.w	r9, r9, #31
 8007ef8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007efc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007f00:	d02f      	beq.n	8007f62 <__lshift+0xc6>
 8007f02:	468a      	mov	sl, r1
 8007f04:	f04f 0c00 	mov.w	ip, #0
 8007f08:	f1c9 0e20 	rsb	lr, r9, #32
 8007f0c:	681a      	ldr	r2, [r3, #0]
 8007f0e:	fa02 f209 	lsl.w	r2, r2, r9
 8007f12:	ea42 020c 	orr.w	r2, r2, ip
 8007f16:	f84a 2b04 	str.w	r2, [sl], #4
 8007f1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f1e:	4298      	cmp	r0, r3
 8007f20:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007f24:	d8f2      	bhi.n	8007f0c <__lshift+0x70>
 8007f26:	1b03      	subs	r3, r0, r4
 8007f28:	3b15      	subs	r3, #21
 8007f2a:	f023 0303 	bic.w	r3, r3, #3
 8007f2e:	3304      	adds	r3, #4
 8007f30:	f104 0215 	add.w	r2, r4, #21
 8007f34:	4290      	cmp	r0, r2
 8007f36:	bf38      	it	cc
 8007f38:	2304      	movcc	r3, #4
 8007f3a:	f841 c003 	str.w	ip, [r1, r3]
 8007f3e:	f1bc 0f00 	cmp.w	ip, #0
 8007f42:	d001      	beq.n	8007f48 <__lshift+0xac>
 8007f44:	f108 0602 	add.w	r6, r8, #2
 8007f48:	3e01      	subs	r6, #1
 8007f4a:	4638      	mov	r0, r7
 8007f4c:	4621      	mov	r1, r4
 8007f4e:	612e      	str	r6, [r5, #16]
 8007f50:	f7ff fdd6 	bl	8007b00 <_Bfree>
 8007f54:	4628      	mov	r0, r5
 8007f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f5a:	f842 0f04 	str.w	r0, [r2, #4]!
 8007f5e:	3301      	adds	r3, #1
 8007f60:	e7c1      	b.n	8007ee6 <__lshift+0x4a>
 8007f62:	3904      	subs	r1, #4
 8007f64:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f68:	4298      	cmp	r0, r3
 8007f6a:	f841 2f04 	str.w	r2, [r1, #4]!
 8007f6e:	d8f9      	bhi.n	8007f64 <__lshift+0xc8>
 8007f70:	e7ea      	b.n	8007f48 <__lshift+0xac>
 8007f72:	bf00      	nop
 8007f74:	0800968b 	.word	0x0800968b
 8007f78:	0800969c 	.word	0x0800969c

08007f7c <__mcmp>:
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	690a      	ldr	r2, [r1, #16]
 8007f80:	6900      	ldr	r0, [r0, #16]
 8007f82:	b530      	push	{r4, r5, lr}
 8007f84:	1a80      	subs	r0, r0, r2
 8007f86:	d10d      	bne.n	8007fa4 <__mcmp+0x28>
 8007f88:	3314      	adds	r3, #20
 8007f8a:	3114      	adds	r1, #20
 8007f8c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007f90:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007f94:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007f98:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007f9c:	4295      	cmp	r5, r2
 8007f9e:	d002      	beq.n	8007fa6 <__mcmp+0x2a>
 8007fa0:	d304      	bcc.n	8007fac <__mcmp+0x30>
 8007fa2:	2001      	movs	r0, #1
 8007fa4:	bd30      	pop	{r4, r5, pc}
 8007fa6:	42a3      	cmp	r3, r4
 8007fa8:	d3f4      	bcc.n	8007f94 <__mcmp+0x18>
 8007faa:	e7fb      	b.n	8007fa4 <__mcmp+0x28>
 8007fac:	f04f 30ff 	mov.w	r0, #4294967295
 8007fb0:	e7f8      	b.n	8007fa4 <__mcmp+0x28>
	...

08007fb4 <__mdiff>:
 8007fb4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fb8:	460d      	mov	r5, r1
 8007fba:	4607      	mov	r7, r0
 8007fbc:	4611      	mov	r1, r2
 8007fbe:	4628      	mov	r0, r5
 8007fc0:	4614      	mov	r4, r2
 8007fc2:	f7ff ffdb 	bl	8007f7c <__mcmp>
 8007fc6:	1e06      	subs	r6, r0, #0
 8007fc8:	d111      	bne.n	8007fee <__mdiff+0x3a>
 8007fca:	4631      	mov	r1, r6
 8007fcc:	4638      	mov	r0, r7
 8007fce:	f7ff fd57 	bl	8007a80 <_Balloc>
 8007fd2:	4602      	mov	r2, r0
 8007fd4:	b928      	cbnz	r0, 8007fe2 <__mdiff+0x2e>
 8007fd6:	f240 2132 	movw	r1, #562	; 0x232
 8007fda:	4b3a      	ldr	r3, [pc, #232]	; (80080c4 <__mdiff+0x110>)
 8007fdc:	483a      	ldr	r0, [pc, #232]	; (80080c8 <__mdiff+0x114>)
 8007fde:	f000 fa41 	bl	8008464 <__assert_func>
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007fe8:	4610      	mov	r0, r2
 8007fea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fee:	bfa4      	itt	ge
 8007ff0:	4623      	movge	r3, r4
 8007ff2:	462c      	movge	r4, r5
 8007ff4:	4638      	mov	r0, r7
 8007ff6:	6861      	ldr	r1, [r4, #4]
 8007ff8:	bfa6      	itte	ge
 8007ffa:	461d      	movge	r5, r3
 8007ffc:	2600      	movge	r6, #0
 8007ffe:	2601      	movlt	r6, #1
 8008000:	f7ff fd3e 	bl	8007a80 <_Balloc>
 8008004:	4602      	mov	r2, r0
 8008006:	b918      	cbnz	r0, 8008010 <__mdiff+0x5c>
 8008008:	f44f 7110 	mov.w	r1, #576	; 0x240
 800800c:	4b2d      	ldr	r3, [pc, #180]	; (80080c4 <__mdiff+0x110>)
 800800e:	e7e5      	b.n	8007fdc <__mdiff+0x28>
 8008010:	f102 0814 	add.w	r8, r2, #20
 8008014:	46c2      	mov	sl, r8
 8008016:	f04f 0c00 	mov.w	ip, #0
 800801a:	6927      	ldr	r7, [r4, #16]
 800801c:	60c6      	str	r6, [r0, #12]
 800801e:	692e      	ldr	r6, [r5, #16]
 8008020:	f104 0014 	add.w	r0, r4, #20
 8008024:	f105 0914 	add.w	r9, r5, #20
 8008028:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800802c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008030:	3410      	adds	r4, #16
 8008032:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8008036:	f859 3b04 	ldr.w	r3, [r9], #4
 800803a:	fa1f f18b 	uxth.w	r1, fp
 800803e:	448c      	add	ip, r1
 8008040:	b299      	uxth	r1, r3
 8008042:	0c1b      	lsrs	r3, r3, #16
 8008044:	ebac 0101 	sub.w	r1, ip, r1
 8008048:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800804c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008050:	b289      	uxth	r1, r1
 8008052:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008056:	454e      	cmp	r6, r9
 8008058:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800805c:	f84a 3b04 	str.w	r3, [sl], #4
 8008060:	d8e7      	bhi.n	8008032 <__mdiff+0x7e>
 8008062:	1b73      	subs	r3, r6, r5
 8008064:	3b15      	subs	r3, #21
 8008066:	f023 0303 	bic.w	r3, r3, #3
 800806a:	3515      	adds	r5, #21
 800806c:	3304      	adds	r3, #4
 800806e:	42ae      	cmp	r6, r5
 8008070:	bf38      	it	cc
 8008072:	2304      	movcc	r3, #4
 8008074:	4418      	add	r0, r3
 8008076:	4443      	add	r3, r8
 8008078:	461e      	mov	r6, r3
 800807a:	4605      	mov	r5, r0
 800807c:	4575      	cmp	r5, lr
 800807e:	d30e      	bcc.n	800809e <__mdiff+0xea>
 8008080:	f10e 0103 	add.w	r1, lr, #3
 8008084:	1a09      	subs	r1, r1, r0
 8008086:	f021 0103 	bic.w	r1, r1, #3
 800808a:	3803      	subs	r0, #3
 800808c:	4586      	cmp	lr, r0
 800808e:	bf38      	it	cc
 8008090:	2100      	movcc	r1, #0
 8008092:	4419      	add	r1, r3
 8008094:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008098:	b18b      	cbz	r3, 80080be <__mdiff+0x10a>
 800809a:	6117      	str	r7, [r2, #16]
 800809c:	e7a4      	b.n	8007fe8 <__mdiff+0x34>
 800809e:	f855 8b04 	ldr.w	r8, [r5], #4
 80080a2:	fa1f f188 	uxth.w	r1, r8
 80080a6:	4461      	add	r1, ip
 80080a8:	140c      	asrs	r4, r1, #16
 80080aa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80080ae:	b289      	uxth	r1, r1
 80080b0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80080b4:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80080b8:	f846 1b04 	str.w	r1, [r6], #4
 80080bc:	e7de      	b.n	800807c <__mdiff+0xc8>
 80080be:	3f01      	subs	r7, #1
 80080c0:	e7e8      	b.n	8008094 <__mdiff+0xe0>
 80080c2:	bf00      	nop
 80080c4:	0800968b 	.word	0x0800968b
 80080c8:	0800969c 	.word	0x0800969c

080080cc <__d2b>:
 80080cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80080d0:	2101      	movs	r1, #1
 80080d2:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80080d6:	4690      	mov	r8, r2
 80080d8:	461d      	mov	r5, r3
 80080da:	f7ff fcd1 	bl	8007a80 <_Balloc>
 80080de:	4604      	mov	r4, r0
 80080e0:	b930      	cbnz	r0, 80080f0 <__d2b+0x24>
 80080e2:	4602      	mov	r2, r0
 80080e4:	f240 310a 	movw	r1, #778	; 0x30a
 80080e8:	4b24      	ldr	r3, [pc, #144]	; (800817c <__d2b+0xb0>)
 80080ea:	4825      	ldr	r0, [pc, #148]	; (8008180 <__d2b+0xb4>)
 80080ec:	f000 f9ba 	bl	8008464 <__assert_func>
 80080f0:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80080f4:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80080f8:	bb2d      	cbnz	r5, 8008146 <__d2b+0x7a>
 80080fa:	9301      	str	r3, [sp, #4]
 80080fc:	f1b8 0300 	subs.w	r3, r8, #0
 8008100:	d026      	beq.n	8008150 <__d2b+0x84>
 8008102:	4668      	mov	r0, sp
 8008104:	9300      	str	r3, [sp, #0]
 8008106:	f7ff fd83 	bl	8007c10 <__lo0bits>
 800810a:	9900      	ldr	r1, [sp, #0]
 800810c:	b1f0      	cbz	r0, 800814c <__d2b+0x80>
 800810e:	9a01      	ldr	r2, [sp, #4]
 8008110:	f1c0 0320 	rsb	r3, r0, #32
 8008114:	fa02 f303 	lsl.w	r3, r2, r3
 8008118:	430b      	orrs	r3, r1
 800811a:	40c2      	lsrs	r2, r0
 800811c:	6163      	str	r3, [r4, #20]
 800811e:	9201      	str	r2, [sp, #4]
 8008120:	9b01      	ldr	r3, [sp, #4]
 8008122:	2b00      	cmp	r3, #0
 8008124:	bf14      	ite	ne
 8008126:	2102      	movne	r1, #2
 8008128:	2101      	moveq	r1, #1
 800812a:	61a3      	str	r3, [r4, #24]
 800812c:	6121      	str	r1, [r4, #16]
 800812e:	b1c5      	cbz	r5, 8008162 <__d2b+0x96>
 8008130:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008134:	4405      	add	r5, r0
 8008136:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800813a:	603d      	str	r5, [r7, #0]
 800813c:	6030      	str	r0, [r6, #0]
 800813e:	4620      	mov	r0, r4
 8008140:	b002      	add	sp, #8
 8008142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008146:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800814a:	e7d6      	b.n	80080fa <__d2b+0x2e>
 800814c:	6161      	str	r1, [r4, #20]
 800814e:	e7e7      	b.n	8008120 <__d2b+0x54>
 8008150:	a801      	add	r0, sp, #4
 8008152:	f7ff fd5d 	bl	8007c10 <__lo0bits>
 8008156:	2101      	movs	r1, #1
 8008158:	9b01      	ldr	r3, [sp, #4]
 800815a:	6121      	str	r1, [r4, #16]
 800815c:	6163      	str	r3, [r4, #20]
 800815e:	3020      	adds	r0, #32
 8008160:	e7e5      	b.n	800812e <__d2b+0x62>
 8008162:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8008166:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800816a:	6038      	str	r0, [r7, #0]
 800816c:	6918      	ldr	r0, [r3, #16]
 800816e:	f7ff fd2f 	bl	8007bd0 <__hi0bits>
 8008172:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8008176:	6031      	str	r1, [r6, #0]
 8008178:	e7e1      	b.n	800813e <__d2b+0x72>
 800817a:	bf00      	nop
 800817c:	0800968b 	.word	0x0800968b
 8008180:	0800969c 	.word	0x0800969c

08008184 <_calloc_r>:
 8008184:	b570      	push	{r4, r5, r6, lr}
 8008186:	fba1 5402 	umull	r5, r4, r1, r2
 800818a:	b934      	cbnz	r4, 800819a <_calloc_r+0x16>
 800818c:	4629      	mov	r1, r5
 800818e:	f7fe f8db 	bl	8006348 <_malloc_r>
 8008192:	4606      	mov	r6, r0
 8008194:	b928      	cbnz	r0, 80081a2 <_calloc_r+0x1e>
 8008196:	4630      	mov	r0, r6
 8008198:	bd70      	pop	{r4, r5, r6, pc}
 800819a:	220c      	movs	r2, #12
 800819c:	2600      	movs	r6, #0
 800819e:	6002      	str	r2, [r0, #0]
 80081a0:	e7f9      	b.n	8008196 <_calloc_r+0x12>
 80081a2:	462a      	mov	r2, r5
 80081a4:	4621      	mov	r1, r4
 80081a6:	f7fe f85f 	bl	8006268 <memset>
 80081aa:	e7f4      	b.n	8008196 <_calloc_r+0x12>

080081ac <__ssputs_r>:
 80081ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081b0:	688e      	ldr	r6, [r1, #8]
 80081b2:	4682      	mov	sl, r0
 80081b4:	429e      	cmp	r6, r3
 80081b6:	460c      	mov	r4, r1
 80081b8:	4690      	mov	r8, r2
 80081ba:	461f      	mov	r7, r3
 80081bc:	d838      	bhi.n	8008230 <__ssputs_r+0x84>
 80081be:	898a      	ldrh	r2, [r1, #12]
 80081c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80081c4:	d032      	beq.n	800822c <__ssputs_r+0x80>
 80081c6:	6825      	ldr	r5, [r4, #0]
 80081c8:	6909      	ldr	r1, [r1, #16]
 80081ca:	3301      	adds	r3, #1
 80081cc:	eba5 0901 	sub.w	r9, r5, r1
 80081d0:	6965      	ldr	r5, [r4, #20]
 80081d2:	444b      	add	r3, r9
 80081d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80081d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80081dc:	106d      	asrs	r5, r5, #1
 80081de:	429d      	cmp	r5, r3
 80081e0:	bf38      	it	cc
 80081e2:	461d      	movcc	r5, r3
 80081e4:	0553      	lsls	r3, r2, #21
 80081e6:	d531      	bpl.n	800824c <__ssputs_r+0xa0>
 80081e8:	4629      	mov	r1, r5
 80081ea:	f7fe f8ad 	bl	8006348 <_malloc_r>
 80081ee:	4606      	mov	r6, r0
 80081f0:	b950      	cbnz	r0, 8008208 <__ssputs_r+0x5c>
 80081f2:	230c      	movs	r3, #12
 80081f4:	f04f 30ff 	mov.w	r0, #4294967295
 80081f8:	f8ca 3000 	str.w	r3, [sl]
 80081fc:	89a3      	ldrh	r3, [r4, #12]
 80081fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008202:	81a3      	strh	r3, [r4, #12]
 8008204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008208:	464a      	mov	r2, r9
 800820a:	6921      	ldr	r1, [r4, #16]
 800820c:	f7fe f81e 	bl	800624c <memcpy>
 8008210:	89a3      	ldrh	r3, [r4, #12]
 8008212:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008216:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800821a:	81a3      	strh	r3, [r4, #12]
 800821c:	6126      	str	r6, [r4, #16]
 800821e:	444e      	add	r6, r9
 8008220:	6026      	str	r6, [r4, #0]
 8008222:	463e      	mov	r6, r7
 8008224:	6165      	str	r5, [r4, #20]
 8008226:	eba5 0509 	sub.w	r5, r5, r9
 800822a:	60a5      	str	r5, [r4, #8]
 800822c:	42be      	cmp	r6, r7
 800822e:	d900      	bls.n	8008232 <__ssputs_r+0x86>
 8008230:	463e      	mov	r6, r7
 8008232:	4632      	mov	r2, r6
 8008234:	4641      	mov	r1, r8
 8008236:	6820      	ldr	r0, [r4, #0]
 8008238:	f000 f959 	bl	80084ee <memmove>
 800823c:	68a3      	ldr	r3, [r4, #8]
 800823e:	2000      	movs	r0, #0
 8008240:	1b9b      	subs	r3, r3, r6
 8008242:	60a3      	str	r3, [r4, #8]
 8008244:	6823      	ldr	r3, [r4, #0]
 8008246:	4433      	add	r3, r6
 8008248:	6023      	str	r3, [r4, #0]
 800824a:	e7db      	b.n	8008204 <__ssputs_r+0x58>
 800824c:	462a      	mov	r2, r5
 800824e:	f000 f968 	bl	8008522 <_realloc_r>
 8008252:	4606      	mov	r6, r0
 8008254:	2800      	cmp	r0, #0
 8008256:	d1e1      	bne.n	800821c <__ssputs_r+0x70>
 8008258:	4650      	mov	r0, sl
 800825a:	6921      	ldr	r1, [r4, #16]
 800825c:	f7fe f80c 	bl	8006278 <_free_r>
 8008260:	e7c7      	b.n	80081f2 <__ssputs_r+0x46>
	...

08008264 <_svfiprintf_r>:
 8008264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008268:	4698      	mov	r8, r3
 800826a:	898b      	ldrh	r3, [r1, #12]
 800826c:	4607      	mov	r7, r0
 800826e:	061b      	lsls	r3, r3, #24
 8008270:	460d      	mov	r5, r1
 8008272:	4614      	mov	r4, r2
 8008274:	b09d      	sub	sp, #116	; 0x74
 8008276:	d50e      	bpl.n	8008296 <_svfiprintf_r+0x32>
 8008278:	690b      	ldr	r3, [r1, #16]
 800827a:	b963      	cbnz	r3, 8008296 <_svfiprintf_r+0x32>
 800827c:	2140      	movs	r1, #64	; 0x40
 800827e:	f7fe f863 	bl	8006348 <_malloc_r>
 8008282:	6028      	str	r0, [r5, #0]
 8008284:	6128      	str	r0, [r5, #16]
 8008286:	b920      	cbnz	r0, 8008292 <_svfiprintf_r+0x2e>
 8008288:	230c      	movs	r3, #12
 800828a:	603b      	str	r3, [r7, #0]
 800828c:	f04f 30ff 	mov.w	r0, #4294967295
 8008290:	e0d1      	b.n	8008436 <_svfiprintf_r+0x1d2>
 8008292:	2340      	movs	r3, #64	; 0x40
 8008294:	616b      	str	r3, [r5, #20]
 8008296:	2300      	movs	r3, #0
 8008298:	9309      	str	r3, [sp, #36]	; 0x24
 800829a:	2320      	movs	r3, #32
 800829c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80082a0:	2330      	movs	r3, #48	; 0x30
 80082a2:	f04f 0901 	mov.w	r9, #1
 80082a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80082aa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008450 <_svfiprintf_r+0x1ec>
 80082ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80082b2:	4623      	mov	r3, r4
 80082b4:	469a      	mov	sl, r3
 80082b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082ba:	b10a      	cbz	r2, 80082c0 <_svfiprintf_r+0x5c>
 80082bc:	2a25      	cmp	r2, #37	; 0x25
 80082be:	d1f9      	bne.n	80082b4 <_svfiprintf_r+0x50>
 80082c0:	ebba 0b04 	subs.w	fp, sl, r4
 80082c4:	d00b      	beq.n	80082de <_svfiprintf_r+0x7a>
 80082c6:	465b      	mov	r3, fp
 80082c8:	4622      	mov	r2, r4
 80082ca:	4629      	mov	r1, r5
 80082cc:	4638      	mov	r0, r7
 80082ce:	f7ff ff6d 	bl	80081ac <__ssputs_r>
 80082d2:	3001      	adds	r0, #1
 80082d4:	f000 80aa 	beq.w	800842c <_svfiprintf_r+0x1c8>
 80082d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082da:	445a      	add	r2, fp
 80082dc:	9209      	str	r2, [sp, #36]	; 0x24
 80082de:	f89a 3000 	ldrb.w	r3, [sl]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	f000 80a2 	beq.w	800842c <_svfiprintf_r+0x1c8>
 80082e8:	2300      	movs	r3, #0
 80082ea:	f04f 32ff 	mov.w	r2, #4294967295
 80082ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082f2:	f10a 0a01 	add.w	sl, sl, #1
 80082f6:	9304      	str	r3, [sp, #16]
 80082f8:	9307      	str	r3, [sp, #28]
 80082fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80082fe:	931a      	str	r3, [sp, #104]	; 0x68
 8008300:	4654      	mov	r4, sl
 8008302:	2205      	movs	r2, #5
 8008304:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008308:	4851      	ldr	r0, [pc, #324]	; (8008450 <_svfiprintf_r+0x1ec>)
 800830a:	f7ff fb9f 	bl	8007a4c <memchr>
 800830e:	9a04      	ldr	r2, [sp, #16]
 8008310:	b9d8      	cbnz	r0, 800834a <_svfiprintf_r+0xe6>
 8008312:	06d0      	lsls	r0, r2, #27
 8008314:	bf44      	itt	mi
 8008316:	2320      	movmi	r3, #32
 8008318:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800831c:	0711      	lsls	r1, r2, #28
 800831e:	bf44      	itt	mi
 8008320:	232b      	movmi	r3, #43	; 0x2b
 8008322:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008326:	f89a 3000 	ldrb.w	r3, [sl]
 800832a:	2b2a      	cmp	r3, #42	; 0x2a
 800832c:	d015      	beq.n	800835a <_svfiprintf_r+0xf6>
 800832e:	4654      	mov	r4, sl
 8008330:	2000      	movs	r0, #0
 8008332:	f04f 0c0a 	mov.w	ip, #10
 8008336:	9a07      	ldr	r2, [sp, #28]
 8008338:	4621      	mov	r1, r4
 800833a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800833e:	3b30      	subs	r3, #48	; 0x30
 8008340:	2b09      	cmp	r3, #9
 8008342:	d94e      	bls.n	80083e2 <_svfiprintf_r+0x17e>
 8008344:	b1b0      	cbz	r0, 8008374 <_svfiprintf_r+0x110>
 8008346:	9207      	str	r2, [sp, #28]
 8008348:	e014      	b.n	8008374 <_svfiprintf_r+0x110>
 800834a:	eba0 0308 	sub.w	r3, r0, r8
 800834e:	fa09 f303 	lsl.w	r3, r9, r3
 8008352:	4313      	orrs	r3, r2
 8008354:	46a2      	mov	sl, r4
 8008356:	9304      	str	r3, [sp, #16]
 8008358:	e7d2      	b.n	8008300 <_svfiprintf_r+0x9c>
 800835a:	9b03      	ldr	r3, [sp, #12]
 800835c:	1d19      	adds	r1, r3, #4
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	9103      	str	r1, [sp, #12]
 8008362:	2b00      	cmp	r3, #0
 8008364:	bfbb      	ittet	lt
 8008366:	425b      	neglt	r3, r3
 8008368:	f042 0202 	orrlt.w	r2, r2, #2
 800836c:	9307      	strge	r3, [sp, #28]
 800836e:	9307      	strlt	r3, [sp, #28]
 8008370:	bfb8      	it	lt
 8008372:	9204      	strlt	r2, [sp, #16]
 8008374:	7823      	ldrb	r3, [r4, #0]
 8008376:	2b2e      	cmp	r3, #46	; 0x2e
 8008378:	d10c      	bne.n	8008394 <_svfiprintf_r+0x130>
 800837a:	7863      	ldrb	r3, [r4, #1]
 800837c:	2b2a      	cmp	r3, #42	; 0x2a
 800837e:	d135      	bne.n	80083ec <_svfiprintf_r+0x188>
 8008380:	9b03      	ldr	r3, [sp, #12]
 8008382:	3402      	adds	r4, #2
 8008384:	1d1a      	adds	r2, r3, #4
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	9203      	str	r2, [sp, #12]
 800838a:	2b00      	cmp	r3, #0
 800838c:	bfb8      	it	lt
 800838e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008392:	9305      	str	r3, [sp, #20]
 8008394:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8008454 <_svfiprintf_r+0x1f0>
 8008398:	2203      	movs	r2, #3
 800839a:	4650      	mov	r0, sl
 800839c:	7821      	ldrb	r1, [r4, #0]
 800839e:	f7ff fb55 	bl	8007a4c <memchr>
 80083a2:	b140      	cbz	r0, 80083b6 <_svfiprintf_r+0x152>
 80083a4:	2340      	movs	r3, #64	; 0x40
 80083a6:	eba0 000a 	sub.w	r0, r0, sl
 80083aa:	fa03 f000 	lsl.w	r0, r3, r0
 80083ae:	9b04      	ldr	r3, [sp, #16]
 80083b0:	3401      	adds	r4, #1
 80083b2:	4303      	orrs	r3, r0
 80083b4:	9304      	str	r3, [sp, #16]
 80083b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083ba:	2206      	movs	r2, #6
 80083bc:	4826      	ldr	r0, [pc, #152]	; (8008458 <_svfiprintf_r+0x1f4>)
 80083be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80083c2:	f7ff fb43 	bl	8007a4c <memchr>
 80083c6:	2800      	cmp	r0, #0
 80083c8:	d038      	beq.n	800843c <_svfiprintf_r+0x1d8>
 80083ca:	4b24      	ldr	r3, [pc, #144]	; (800845c <_svfiprintf_r+0x1f8>)
 80083cc:	bb1b      	cbnz	r3, 8008416 <_svfiprintf_r+0x1b2>
 80083ce:	9b03      	ldr	r3, [sp, #12]
 80083d0:	3307      	adds	r3, #7
 80083d2:	f023 0307 	bic.w	r3, r3, #7
 80083d6:	3308      	adds	r3, #8
 80083d8:	9303      	str	r3, [sp, #12]
 80083da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083dc:	4433      	add	r3, r6
 80083de:	9309      	str	r3, [sp, #36]	; 0x24
 80083e0:	e767      	b.n	80082b2 <_svfiprintf_r+0x4e>
 80083e2:	460c      	mov	r4, r1
 80083e4:	2001      	movs	r0, #1
 80083e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80083ea:	e7a5      	b.n	8008338 <_svfiprintf_r+0xd4>
 80083ec:	2300      	movs	r3, #0
 80083ee:	f04f 0c0a 	mov.w	ip, #10
 80083f2:	4619      	mov	r1, r3
 80083f4:	3401      	adds	r4, #1
 80083f6:	9305      	str	r3, [sp, #20]
 80083f8:	4620      	mov	r0, r4
 80083fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083fe:	3a30      	subs	r2, #48	; 0x30
 8008400:	2a09      	cmp	r2, #9
 8008402:	d903      	bls.n	800840c <_svfiprintf_r+0x1a8>
 8008404:	2b00      	cmp	r3, #0
 8008406:	d0c5      	beq.n	8008394 <_svfiprintf_r+0x130>
 8008408:	9105      	str	r1, [sp, #20]
 800840a:	e7c3      	b.n	8008394 <_svfiprintf_r+0x130>
 800840c:	4604      	mov	r4, r0
 800840e:	2301      	movs	r3, #1
 8008410:	fb0c 2101 	mla	r1, ip, r1, r2
 8008414:	e7f0      	b.n	80083f8 <_svfiprintf_r+0x194>
 8008416:	ab03      	add	r3, sp, #12
 8008418:	9300      	str	r3, [sp, #0]
 800841a:	462a      	mov	r2, r5
 800841c:	4638      	mov	r0, r7
 800841e:	4b10      	ldr	r3, [pc, #64]	; (8008460 <_svfiprintf_r+0x1fc>)
 8008420:	a904      	add	r1, sp, #16
 8008422:	f7fe f8a3 	bl	800656c <_printf_float>
 8008426:	1c42      	adds	r2, r0, #1
 8008428:	4606      	mov	r6, r0
 800842a:	d1d6      	bne.n	80083da <_svfiprintf_r+0x176>
 800842c:	89ab      	ldrh	r3, [r5, #12]
 800842e:	065b      	lsls	r3, r3, #25
 8008430:	f53f af2c 	bmi.w	800828c <_svfiprintf_r+0x28>
 8008434:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008436:	b01d      	add	sp, #116	; 0x74
 8008438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800843c:	ab03      	add	r3, sp, #12
 800843e:	9300      	str	r3, [sp, #0]
 8008440:	462a      	mov	r2, r5
 8008442:	4638      	mov	r0, r7
 8008444:	4b06      	ldr	r3, [pc, #24]	; (8008460 <_svfiprintf_r+0x1fc>)
 8008446:	a904      	add	r1, sp, #16
 8008448:	f7fe fb2c 	bl	8006aa4 <_printf_i>
 800844c:	e7eb      	b.n	8008426 <_svfiprintf_r+0x1c2>
 800844e:	bf00      	nop
 8008450:	080097f4 	.word	0x080097f4
 8008454:	080097fa 	.word	0x080097fa
 8008458:	080097fe 	.word	0x080097fe
 800845c:	0800656d 	.word	0x0800656d
 8008460:	080081ad 	.word	0x080081ad

08008464 <__assert_func>:
 8008464:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008466:	4614      	mov	r4, r2
 8008468:	461a      	mov	r2, r3
 800846a:	4b09      	ldr	r3, [pc, #36]	; (8008490 <__assert_func+0x2c>)
 800846c:	4605      	mov	r5, r0
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	68d8      	ldr	r0, [r3, #12]
 8008472:	b14c      	cbz	r4, 8008488 <__assert_func+0x24>
 8008474:	4b07      	ldr	r3, [pc, #28]	; (8008494 <__assert_func+0x30>)
 8008476:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800847a:	9100      	str	r1, [sp, #0]
 800847c:	462b      	mov	r3, r5
 800847e:	4906      	ldr	r1, [pc, #24]	; (8008498 <__assert_func+0x34>)
 8008480:	f000 f80e 	bl	80084a0 <fiprintf>
 8008484:	f000 faa2 	bl	80089cc <abort>
 8008488:	4b04      	ldr	r3, [pc, #16]	; (800849c <__assert_func+0x38>)
 800848a:	461c      	mov	r4, r3
 800848c:	e7f3      	b.n	8008476 <__assert_func+0x12>
 800848e:	bf00      	nop
 8008490:	2000000c 	.word	0x2000000c
 8008494:	08009805 	.word	0x08009805
 8008498:	08009812 	.word	0x08009812
 800849c:	08009840 	.word	0x08009840

080084a0 <fiprintf>:
 80084a0:	b40e      	push	{r1, r2, r3}
 80084a2:	b503      	push	{r0, r1, lr}
 80084a4:	4601      	mov	r1, r0
 80084a6:	ab03      	add	r3, sp, #12
 80084a8:	4805      	ldr	r0, [pc, #20]	; (80084c0 <fiprintf+0x20>)
 80084aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80084ae:	6800      	ldr	r0, [r0, #0]
 80084b0:	9301      	str	r3, [sp, #4]
 80084b2:	f000 f88d 	bl	80085d0 <_vfiprintf_r>
 80084b6:	b002      	add	sp, #8
 80084b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80084bc:	b003      	add	sp, #12
 80084be:	4770      	bx	lr
 80084c0:	2000000c 	.word	0x2000000c

080084c4 <__retarget_lock_init_recursive>:
 80084c4:	4770      	bx	lr

080084c6 <__retarget_lock_acquire_recursive>:
 80084c6:	4770      	bx	lr

080084c8 <__retarget_lock_release_recursive>:
 80084c8:	4770      	bx	lr

080084ca <__ascii_mbtowc>:
 80084ca:	b082      	sub	sp, #8
 80084cc:	b901      	cbnz	r1, 80084d0 <__ascii_mbtowc+0x6>
 80084ce:	a901      	add	r1, sp, #4
 80084d0:	b142      	cbz	r2, 80084e4 <__ascii_mbtowc+0x1a>
 80084d2:	b14b      	cbz	r3, 80084e8 <__ascii_mbtowc+0x1e>
 80084d4:	7813      	ldrb	r3, [r2, #0]
 80084d6:	600b      	str	r3, [r1, #0]
 80084d8:	7812      	ldrb	r2, [r2, #0]
 80084da:	1e10      	subs	r0, r2, #0
 80084dc:	bf18      	it	ne
 80084de:	2001      	movne	r0, #1
 80084e0:	b002      	add	sp, #8
 80084e2:	4770      	bx	lr
 80084e4:	4610      	mov	r0, r2
 80084e6:	e7fb      	b.n	80084e0 <__ascii_mbtowc+0x16>
 80084e8:	f06f 0001 	mvn.w	r0, #1
 80084ec:	e7f8      	b.n	80084e0 <__ascii_mbtowc+0x16>

080084ee <memmove>:
 80084ee:	4288      	cmp	r0, r1
 80084f0:	b510      	push	{r4, lr}
 80084f2:	eb01 0402 	add.w	r4, r1, r2
 80084f6:	d902      	bls.n	80084fe <memmove+0x10>
 80084f8:	4284      	cmp	r4, r0
 80084fa:	4623      	mov	r3, r4
 80084fc:	d807      	bhi.n	800850e <memmove+0x20>
 80084fe:	1e43      	subs	r3, r0, #1
 8008500:	42a1      	cmp	r1, r4
 8008502:	d008      	beq.n	8008516 <memmove+0x28>
 8008504:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008508:	f803 2f01 	strb.w	r2, [r3, #1]!
 800850c:	e7f8      	b.n	8008500 <memmove+0x12>
 800850e:	4601      	mov	r1, r0
 8008510:	4402      	add	r2, r0
 8008512:	428a      	cmp	r2, r1
 8008514:	d100      	bne.n	8008518 <memmove+0x2a>
 8008516:	bd10      	pop	{r4, pc}
 8008518:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800851c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008520:	e7f7      	b.n	8008512 <memmove+0x24>

08008522 <_realloc_r>:
 8008522:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008526:	4680      	mov	r8, r0
 8008528:	4614      	mov	r4, r2
 800852a:	460e      	mov	r6, r1
 800852c:	b921      	cbnz	r1, 8008538 <_realloc_r+0x16>
 800852e:	4611      	mov	r1, r2
 8008530:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008534:	f7fd bf08 	b.w	8006348 <_malloc_r>
 8008538:	b92a      	cbnz	r2, 8008546 <_realloc_r+0x24>
 800853a:	f7fd fe9d 	bl	8006278 <_free_r>
 800853e:	4625      	mov	r5, r4
 8008540:	4628      	mov	r0, r5
 8008542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008546:	f000 fc61 	bl	8008e0c <_malloc_usable_size_r>
 800854a:	4284      	cmp	r4, r0
 800854c:	4607      	mov	r7, r0
 800854e:	d802      	bhi.n	8008556 <_realloc_r+0x34>
 8008550:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008554:	d812      	bhi.n	800857c <_realloc_r+0x5a>
 8008556:	4621      	mov	r1, r4
 8008558:	4640      	mov	r0, r8
 800855a:	f7fd fef5 	bl	8006348 <_malloc_r>
 800855e:	4605      	mov	r5, r0
 8008560:	2800      	cmp	r0, #0
 8008562:	d0ed      	beq.n	8008540 <_realloc_r+0x1e>
 8008564:	42bc      	cmp	r4, r7
 8008566:	4622      	mov	r2, r4
 8008568:	4631      	mov	r1, r6
 800856a:	bf28      	it	cs
 800856c:	463a      	movcs	r2, r7
 800856e:	f7fd fe6d 	bl	800624c <memcpy>
 8008572:	4631      	mov	r1, r6
 8008574:	4640      	mov	r0, r8
 8008576:	f7fd fe7f 	bl	8006278 <_free_r>
 800857a:	e7e1      	b.n	8008540 <_realloc_r+0x1e>
 800857c:	4635      	mov	r5, r6
 800857e:	e7df      	b.n	8008540 <_realloc_r+0x1e>

08008580 <__sfputc_r>:
 8008580:	6893      	ldr	r3, [r2, #8]
 8008582:	b410      	push	{r4}
 8008584:	3b01      	subs	r3, #1
 8008586:	2b00      	cmp	r3, #0
 8008588:	6093      	str	r3, [r2, #8]
 800858a:	da07      	bge.n	800859c <__sfputc_r+0x1c>
 800858c:	6994      	ldr	r4, [r2, #24]
 800858e:	42a3      	cmp	r3, r4
 8008590:	db01      	blt.n	8008596 <__sfputc_r+0x16>
 8008592:	290a      	cmp	r1, #10
 8008594:	d102      	bne.n	800859c <__sfputc_r+0x1c>
 8008596:	bc10      	pop	{r4}
 8008598:	f000 b94a 	b.w	8008830 <__swbuf_r>
 800859c:	6813      	ldr	r3, [r2, #0]
 800859e:	1c58      	adds	r0, r3, #1
 80085a0:	6010      	str	r0, [r2, #0]
 80085a2:	7019      	strb	r1, [r3, #0]
 80085a4:	4608      	mov	r0, r1
 80085a6:	bc10      	pop	{r4}
 80085a8:	4770      	bx	lr

080085aa <__sfputs_r>:
 80085aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ac:	4606      	mov	r6, r0
 80085ae:	460f      	mov	r7, r1
 80085b0:	4614      	mov	r4, r2
 80085b2:	18d5      	adds	r5, r2, r3
 80085b4:	42ac      	cmp	r4, r5
 80085b6:	d101      	bne.n	80085bc <__sfputs_r+0x12>
 80085b8:	2000      	movs	r0, #0
 80085ba:	e007      	b.n	80085cc <__sfputs_r+0x22>
 80085bc:	463a      	mov	r2, r7
 80085be:	4630      	mov	r0, r6
 80085c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085c4:	f7ff ffdc 	bl	8008580 <__sfputc_r>
 80085c8:	1c43      	adds	r3, r0, #1
 80085ca:	d1f3      	bne.n	80085b4 <__sfputs_r+0xa>
 80085cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080085d0 <_vfiprintf_r>:
 80085d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085d4:	460d      	mov	r5, r1
 80085d6:	4614      	mov	r4, r2
 80085d8:	4698      	mov	r8, r3
 80085da:	4606      	mov	r6, r0
 80085dc:	b09d      	sub	sp, #116	; 0x74
 80085de:	b118      	cbz	r0, 80085e8 <_vfiprintf_r+0x18>
 80085e0:	6983      	ldr	r3, [r0, #24]
 80085e2:	b90b      	cbnz	r3, 80085e8 <_vfiprintf_r+0x18>
 80085e4:	f000 fb10 	bl	8008c08 <__sinit>
 80085e8:	4b89      	ldr	r3, [pc, #548]	; (8008810 <_vfiprintf_r+0x240>)
 80085ea:	429d      	cmp	r5, r3
 80085ec:	d11b      	bne.n	8008626 <_vfiprintf_r+0x56>
 80085ee:	6875      	ldr	r5, [r6, #4]
 80085f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80085f2:	07d9      	lsls	r1, r3, #31
 80085f4:	d405      	bmi.n	8008602 <_vfiprintf_r+0x32>
 80085f6:	89ab      	ldrh	r3, [r5, #12]
 80085f8:	059a      	lsls	r2, r3, #22
 80085fa:	d402      	bmi.n	8008602 <_vfiprintf_r+0x32>
 80085fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80085fe:	f7ff ff62 	bl	80084c6 <__retarget_lock_acquire_recursive>
 8008602:	89ab      	ldrh	r3, [r5, #12]
 8008604:	071b      	lsls	r3, r3, #28
 8008606:	d501      	bpl.n	800860c <_vfiprintf_r+0x3c>
 8008608:	692b      	ldr	r3, [r5, #16]
 800860a:	b9eb      	cbnz	r3, 8008648 <_vfiprintf_r+0x78>
 800860c:	4629      	mov	r1, r5
 800860e:	4630      	mov	r0, r6
 8008610:	f000 f96e 	bl	80088f0 <__swsetup_r>
 8008614:	b1c0      	cbz	r0, 8008648 <_vfiprintf_r+0x78>
 8008616:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008618:	07dc      	lsls	r4, r3, #31
 800861a:	d50e      	bpl.n	800863a <_vfiprintf_r+0x6a>
 800861c:	f04f 30ff 	mov.w	r0, #4294967295
 8008620:	b01d      	add	sp, #116	; 0x74
 8008622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008626:	4b7b      	ldr	r3, [pc, #492]	; (8008814 <_vfiprintf_r+0x244>)
 8008628:	429d      	cmp	r5, r3
 800862a:	d101      	bne.n	8008630 <_vfiprintf_r+0x60>
 800862c:	68b5      	ldr	r5, [r6, #8]
 800862e:	e7df      	b.n	80085f0 <_vfiprintf_r+0x20>
 8008630:	4b79      	ldr	r3, [pc, #484]	; (8008818 <_vfiprintf_r+0x248>)
 8008632:	429d      	cmp	r5, r3
 8008634:	bf08      	it	eq
 8008636:	68f5      	ldreq	r5, [r6, #12]
 8008638:	e7da      	b.n	80085f0 <_vfiprintf_r+0x20>
 800863a:	89ab      	ldrh	r3, [r5, #12]
 800863c:	0598      	lsls	r0, r3, #22
 800863e:	d4ed      	bmi.n	800861c <_vfiprintf_r+0x4c>
 8008640:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008642:	f7ff ff41 	bl	80084c8 <__retarget_lock_release_recursive>
 8008646:	e7e9      	b.n	800861c <_vfiprintf_r+0x4c>
 8008648:	2300      	movs	r3, #0
 800864a:	9309      	str	r3, [sp, #36]	; 0x24
 800864c:	2320      	movs	r3, #32
 800864e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008652:	2330      	movs	r3, #48	; 0x30
 8008654:	f04f 0901 	mov.w	r9, #1
 8008658:	f8cd 800c 	str.w	r8, [sp, #12]
 800865c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800881c <_vfiprintf_r+0x24c>
 8008660:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008664:	4623      	mov	r3, r4
 8008666:	469a      	mov	sl, r3
 8008668:	f813 2b01 	ldrb.w	r2, [r3], #1
 800866c:	b10a      	cbz	r2, 8008672 <_vfiprintf_r+0xa2>
 800866e:	2a25      	cmp	r2, #37	; 0x25
 8008670:	d1f9      	bne.n	8008666 <_vfiprintf_r+0x96>
 8008672:	ebba 0b04 	subs.w	fp, sl, r4
 8008676:	d00b      	beq.n	8008690 <_vfiprintf_r+0xc0>
 8008678:	465b      	mov	r3, fp
 800867a:	4622      	mov	r2, r4
 800867c:	4629      	mov	r1, r5
 800867e:	4630      	mov	r0, r6
 8008680:	f7ff ff93 	bl	80085aa <__sfputs_r>
 8008684:	3001      	adds	r0, #1
 8008686:	f000 80aa 	beq.w	80087de <_vfiprintf_r+0x20e>
 800868a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800868c:	445a      	add	r2, fp
 800868e:	9209      	str	r2, [sp, #36]	; 0x24
 8008690:	f89a 3000 	ldrb.w	r3, [sl]
 8008694:	2b00      	cmp	r3, #0
 8008696:	f000 80a2 	beq.w	80087de <_vfiprintf_r+0x20e>
 800869a:	2300      	movs	r3, #0
 800869c:	f04f 32ff 	mov.w	r2, #4294967295
 80086a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086a4:	f10a 0a01 	add.w	sl, sl, #1
 80086a8:	9304      	str	r3, [sp, #16]
 80086aa:	9307      	str	r3, [sp, #28]
 80086ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80086b0:	931a      	str	r3, [sp, #104]	; 0x68
 80086b2:	4654      	mov	r4, sl
 80086b4:	2205      	movs	r2, #5
 80086b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086ba:	4858      	ldr	r0, [pc, #352]	; (800881c <_vfiprintf_r+0x24c>)
 80086bc:	f7ff f9c6 	bl	8007a4c <memchr>
 80086c0:	9a04      	ldr	r2, [sp, #16]
 80086c2:	b9d8      	cbnz	r0, 80086fc <_vfiprintf_r+0x12c>
 80086c4:	06d1      	lsls	r1, r2, #27
 80086c6:	bf44      	itt	mi
 80086c8:	2320      	movmi	r3, #32
 80086ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086ce:	0713      	lsls	r3, r2, #28
 80086d0:	bf44      	itt	mi
 80086d2:	232b      	movmi	r3, #43	; 0x2b
 80086d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086d8:	f89a 3000 	ldrb.w	r3, [sl]
 80086dc:	2b2a      	cmp	r3, #42	; 0x2a
 80086de:	d015      	beq.n	800870c <_vfiprintf_r+0x13c>
 80086e0:	4654      	mov	r4, sl
 80086e2:	2000      	movs	r0, #0
 80086e4:	f04f 0c0a 	mov.w	ip, #10
 80086e8:	9a07      	ldr	r2, [sp, #28]
 80086ea:	4621      	mov	r1, r4
 80086ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086f0:	3b30      	subs	r3, #48	; 0x30
 80086f2:	2b09      	cmp	r3, #9
 80086f4:	d94e      	bls.n	8008794 <_vfiprintf_r+0x1c4>
 80086f6:	b1b0      	cbz	r0, 8008726 <_vfiprintf_r+0x156>
 80086f8:	9207      	str	r2, [sp, #28]
 80086fa:	e014      	b.n	8008726 <_vfiprintf_r+0x156>
 80086fc:	eba0 0308 	sub.w	r3, r0, r8
 8008700:	fa09 f303 	lsl.w	r3, r9, r3
 8008704:	4313      	orrs	r3, r2
 8008706:	46a2      	mov	sl, r4
 8008708:	9304      	str	r3, [sp, #16]
 800870a:	e7d2      	b.n	80086b2 <_vfiprintf_r+0xe2>
 800870c:	9b03      	ldr	r3, [sp, #12]
 800870e:	1d19      	adds	r1, r3, #4
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	9103      	str	r1, [sp, #12]
 8008714:	2b00      	cmp	r3, #0
 8008716:	bfbb      	ittet	lt
 8008718:	425b      	neglt	r3, r3
 800871a:	f042 0202 	orrlt.w	r2, r2, #2
 800871e:	9307      	strge	r3, [sp, #28]
 8008720:	9307      	strlt	r3, [sp, #28]
 8008722:	bfb8      	it	lt
 8008724:	9204      	strlt	r2, [sp, #16]
 8008726:	7823      	ldrb	r3, [r4, #0]
 8008728:	2b2e      	cmp	r3, #46	; 0x2e
 800872a:	d10c      	bne.n	8008746 <_vfiprintf_r+0x176>
 800872c:	7863      	ldrb	r3, [r4, #1]
 800872e:	2b2a      	cmp	r3, #42	; 0x2a
 8008730:	d135      	bne.n	800879e <_vfiprintf_r+0x1ce>
 8008732:	9b03      	ldr	r3, [sp, #12]
 8008734:	3402      	adds	r4, #2
 8008736:	1d1a      	adds	r2, r3, #4
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	9203      	str	r2, [sp, #12]
 800873c:	2b00      	cmp	r3, #0
 800873e:	bfb8      	it	lt
 8008740:	f04f 33ff 	movlt.w	r3, #4294967295
 8008744:	9305      	str	r3, [sp, #20]
 8008746:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8008820 <_vfiprintf_r+0x250>
 800874a:	2203      	movs	r2, #3
 800874c:	4650      	mov	r0, sl
 800874e:	7821      	ldrb	r1, [r4, #0]
 8008750:	f7ff f97c 	bl	8007a4c <memchr>
 8008754:	b140      	cbz	r0, 8008768 <_vfiprintf_r+0x198>
 8008756:	2340      	movs	r3, #64	; 0x40
 8008758:	eba0 000a 	sub.w	r0, r0, sl
 800875c:	fa03 f000 	lsl.w	r0, r3, r0
 8008760:	9b04      	ldr	r3, [sp, #16]
 8008762:	3401      	adds	r4, #1
 8008764:	4303      	orrs	r3, r0
 8008766:	9304      	str	r3, [sp, #16]
 8008768:	f814 1b01 	ldrb.w	r1, [r4], #1
 800876c:	2206      	movs	r2, #6
 800876e:	482d      	ldr	r0, [pc, #180]	; (8008824 <_vfiprintf_r+0x254>)
 8008770:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008774:	f7ff f96a 	bl	8007a4c <memchr>
 8008778:	2800      	cmp	r0, #0
 800877a:	d03f      	beq.n	80087fc <_vfiprintf_r+0x22c>
 800877c:	4b2a      	ldr	r3, [pc, #168]	; (8008828 <_vfiprintf_r+0x258>)
 800877e:	bb1b      	cbnz	r3, 80087c8 <_vfiprintf_r+0x1f8>
 8008780:	9b03      	ldr	r3, [sp, #12]
 8008782:	3307      	adds	r3, #7
 8008784:	f023 0307 	bic.w	r3, r3, #7
 8008788:	3308      	adds	r3, #8
 800878a:	9303      	str	r3, [sp, #12]
 800878c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800878e:	443b      	add	r3, r7
 8008790:	9309      	str	r3, [sp, #36]	; 0x24
 8008792:	e767      	b.n	8008664 <_vfiprintf_r+0x94>
 8008794:	460c      	mov	r4, r1
 8008796:	2001      	movs	r0, #1
 8008798:	fb0c 3202 	mla	r2, ip, r2, r3
 800879c:	e7a5      	b.n	80086ea <_vfiprintf_r+0x11a>
 800879e:	2300      	movs	r3, #0
 80087a0:	f04f 0c0a 	mov.w	ip, #10
 80087a4:	4619      	mov	r1, r3
 80087a6:	3401      	adds	r4, #1
 80087a8:	9305      	str	r3, [sp, #20]
 80087aa:	4620      	mov	r0, r4
 80087ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087b0:	3a30      	subs	r2, #48	; 0x30
 80087b2:	2a09      	cmp	r2, #9
 80087b4:	d903      	bls.n	80087be <_vfiprintf_r+0x1ee>
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d0c5      	beq.n	8008746 <_vfiprintf_r+0x176>
 80087ba:	9105      	str	r1, [sp, #20]
 80087bc:	e7c3      	b.n	8008746 <_vfiprintf_r+0x176>
 80087be:	4604      	mov	r4, r0
 80087c0:	2301      	movs	r3, #1
 80087c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80087c6:	e7f0      	b.n	80087aa <_vfiprintf_r+0x1da>
 80087c8:	ab03      	add	r3, sp, #12
 80087ca:	9300      	str	r3, [sp, #0]
 80087cc:	462a      	mov	r2, r5
 80087ce:	4630      	mov	r0, r6
 80087d0:	4b16      	ldr	r3, [pc, #88]	; (800882c <_vfiprintf_r+0x25c>)
 80087d2:	a904      	add	r1, sp, #16
 80087d4:	f7fd feca 	bl	800656c <_printf_float>
 80087d8:	4607      	mov	r7, r0
 80087da:	1c78      	adds	r0, r7, #1
 80087dc:	d1d6      	bne.n	800878c <_vfiprintf_r+0x1bc>
 80087de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087e0:	07d9      	lsls	r1, r3, #31
 80087e2:	d405      	bmi.n	80087f0 <_vfiprintf_r+0x220>
 80087e4:	89ab      	ldrh	r3, [r5, #12]
 80087e6:	059a      	lsls	r2, r3, #22
 80087e8:	d402      	bmi.n	80087f0 <_vfiprintf_r+0x220>
 80087ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087ec:	f7ff fe6c 	bl	80084c8 <__retarget_lock_release_recursive>
 80087f0:	89ab      	ldrh	r3, [r5, #12]
 80087f2:	065b      	lsls	r3, r3, #25
 80087f4:	f53f af12 	bmi.w	800861c <_vfiprintf_r+0x4c>
 80087f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80087fa:	e711      	b.n	8008620 <_vfiprintf_r+0x50>
 80087fc:	ab03      	add	r3, sp, #12
 80087fe:	9300      	str	r3, [sp, #0]
 8008800:	462a      	mov	r2, r5
 8008802:	4630      	mov	r0, r6
 8008804:	4b09      	ldr	r3, [pc, #36]	; (800882c <_vfiprintf_r+0x25c>)
 8008806:	a904      	add	r1, sp, #16
 8008808:	f7fe f94c 	bl	8006aa4 <_printf_i>
 800880c:	e7e4      	b.n	80087d8 <_vfiprintf_r+0x208>
 800880e:	bf00      	nop
 8008810:	0800996c 	.word	0x0800996c
 8008814:	0800998c 	.word	0x0800998c
 8008818:	0800994c 	.word	0x0800994c
 800881c:	080097f4 	.word	0x080097f4
 8008820:	080097fa 	.word	0x080097fa
 8008824:	080097fe 	.word	0x080097fe
 8008828:	0800656d 	.word	0x0800656d
 800882c:	080085ab 	.word	0x080085ab

08008830 <__swbuf_r>:
 8008830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008832:	460e      	mov	r6, r1
 8008834:	4614      	mov	r4, r2
 8008836:	4605      	mov	r5, r0
 8008838:	b118      	cbz	r0, 8008842 <__swbuf_r+0x12>
 800883a:	6983      	ldr	r3, [r0, #24]
 800883c:	b90b      	cbnz	r3, 8008842 <__swbuf_r+0x12>
 800883e:	f000 f9e3 	bl	8008c08 <__sinit>
 8008842:	4b21      	ldr	r3, [pc, #132]	; (80088c8 <__swbuf_r+0x98>)
 8008844:	429c      	cmp	r4, r3
 8008846:	d12b      	bne.n	80088a0 <__swbuf_r+0x70>
 8008848:	686c      	ldr	r4, [r5, #4]
 800884a:	69a3      	ldr	r3, [r4, #24]
 800884c:	60a3      	str	r3, [r4, #8]
 800884e:	89a3      	ldrh	r3, [r4, #12]
 8008850:	071a      	lsls	r2, r3, #28
 8008852:	d52f      	bpl.n	80088b4 <__swbuf_r+0x84>
 8008854:	6923      	ldr	r3, [r4, #16]
 8008856:	b36b      	cbz	r3, 80088b4 <__swbuf_r+0x84>
 8008858:	6923      	ldr	r3, [r4, #16]
 800885a:	6820      	ldr	r0, [r4, #0]
 800885c:	b2f6      	uxtb	r6, r6
 800885e:	1ac0      	subs	r0, r0, r3
 8008860:	6963      	ldr	r3, [r4, #20]
 8008862:	4637      	mov	r7, r6
 8008864:	4283      	cmp	r3, r0
 8008866:	dc04      	bgt.n	8008872 <__swbuf_r+0x42>
 8008868:	4621      	mov	r1, r4
 800886a:	4628      	mov	r0, r5
 800886c:	f000 f938 	bl	8008ae0 <_fflush_r>
 8008870:	bb30      	cbnz	r0, 80088c0 <__swbuf_r+0x90>
 8008872:	68a3      	ldr	r3, [r4, #8]
 8008874:	3001      	adds	r0, #1
 8008876:	3b01      	subs	r3, #1
 8008878:	60a3      	str	r3, [r4, #8]
 800887a:	6823      	ldr	r3, [r4, #0]
 800887c:	1c5a      	adds	r2, r3, #1
 800887e:	6022      	str	r2, [r4, #0]
 8008880:	701e      	strb	r6, [r3, #0]
 8008882:	6963      	ldr	r3, [r4, #20]
 8008884:	4283      	cmp	r3, r0
 8008886:	d004      	beq.n	8008892 <__swbuf_r+0x62>
 8008888:	89a3      	ldrh	r3, [r4, #12]
 800888a:	07db      	lsls	r3, r3, #31
 800888c:	d506      	bpl.n	800889c <__swbuf_r+0x6c>
 800888e:	2e0a      	cmp	r6, #10
 8008890:	d104      	bne.n	800889c <__swbuf_r+0x6c>
 8008892:	4621      	mov	r1, r4
 8008894:	4628      	mov	r0, r5
 8008896:	f000 f923 	bl	8008ae0 <_fflush_r>
 800889a:	b988      	cbnz	r0, 80088c0 <__swbuf_r+0x90>
 800889c:	4638      	mov	r0, r7
 800889e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088a0:	4b0a      	ldr	r3, [pc, #40]	; (80088cc <__swbuf_r+0x9c>)
 80088a2:	429c      	cmp	r4, r3
 80088a4:	d101      	bne.n	80088aa <__swbuf_r+0x7a>
 80088a6:	68ac      	ldr	r4, [r5, #8]
 80088a8:	e7cf      	b.n	800884a <__swbuf_r+0x1a>
 80088aa:	4b09      	ldr	r3, [pc, #36]	; (80088d0 <__swbuf_r+0xa0>)
 80088ac:	429c      	cmp	r4, r3
 80088ae:	bf08      	it	eq
 80088b0:	68ec      	ldreq	r4, [r5, #12]
 80088b2:	e7ca      	b.n	800884a <__swbuf_r+0x1a>
 80088b4:	4621      	mov	r1, r4
 80088b6:	4628      	mov	r0, r5
 80088b8:	f000 f81a 	bl	80088f0 <__swsetup_r>
 80088bc:	2800      	cmp	r0, #0
 80088be:	d0cb      	beq.n	8008858 <__swbuf_r+0x28>
 80088c0:	f04f 37ff 	mov.w	r7, #4294967295
 80088c4:	e7ea      	b.n	800889c <__swbuf_r+0x6c>
 80088c6:	bf00      	nop
 80088c8:	0800996c 	.word	0x0800996c
 80088cc:	0800998c 	.word	0x0800998c
 80088d0:	0800994c 	.word	0x0800994c

080088d4 <__ascii_wctomb>:
 80088d4:	4603      	mov	r3, r0
 80088d6:	4608      	mov	r0, r1
 80088d8:	b141      	cbz	r1, 80088ec <__ascii_wctomb+0x18>
 80088da:	2aff      	cmp	r2, #255	; 0xff
 80088dc:	d904      	bls.n	80088e8 <__ascii_wctomb+0x14>
 80088de:	228a      	movs	r2, #138	; 0x8a
 80088e0:	f04f 30ff 	mov.w	r0, #4294967295
 80088e4:	601a      	str	r2, [r3, #0]
 80088e6:	4770      	bx	lr
 80088e8:	2001      	movs	r0, #1
 80088ea:	700a      	strb	r2, [r1, #0]
 80088ec:	4770      	bx	lr
	...

080088f0 <__swsetup_r>:
 80088f0:	4b32      	ldr	r3, [pc, #200]	; (80089bc <__swsetup_r+0xcc>)
 80088f2:	b570      	push	{r4, r5, r6, lr}
 80088f4:	681d      	ldr	r5, [r3, #0]
 80088f6:	4606      	mov	r6, r0
 80088f8:	460c      	mov	r4, r1
 80088fa:	b125      	cbz	r5, 8008906 <__swsetup_r+0x16>
 80088fc:	69ab      	ldr	r3, [r5, #24]
 80088fe:	b913      	cbnz	r3, 8008906 <__swsetup_r+0x16>
 8008900:	4628      	mov	r0, r5
 8008902:	f000 f981 	bl	8008c08 <__sinit>
 8008906:	4b2e      	ldr	r3, [pc, #184]	; (80089c0 <__swsetup_r+0xd0>)
 8008908:	429c      	cmp	r4, r3
 800890a:	d10f      	bne.n	800892c <__swsetup_r+0x3c>
 800890c:	686c      	ldr	r4, [r5, #4]
 800890e:	89a3      	ldrh	r3, [r4, #12]
 8008910:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008914:	0719      	lsls	r1, r3, #28
 8008916:	d42c      	bmi.n	8008972 <__swsetup_r+0x82>
 8008918:	06dd      	lsls	r5, r3, #27
 800891a:	d411      	bmi.n	8008940 <__swsetup_r+0x50>
 800891c:	2309      	movs	r3, #9
 800891e:	6033      	str	r3, [r6, #0]
 8008920:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008924:	f04f 30ff 	mov.w	r0, #4294967295
 8008928:	81a3      	strh	r3, [r4, #12]
 800892a:	e03e      	b.n	80089aa <__swsetup_r+0xba>
 800892c:	4b25      	ldr	r3, [pc, #148]	; (80089c4 <__swsetup_r+0xd4>)
 800892e:	429c      	cmp	r4, r3
 8008930:	d101      	bne.n	8008936 <__swsetup_r+0x46>
 8008932:	68ac      	ldr	r4, [r5, #8]
 8008934:	e7eb      	b.n	800890e <__swsetup_r+0x1e>
 8008936:	4b24      	ldr	r3, [pc, #144]	; (80089c8 <__swsetup_r+0xd8>)
 8008938:	429c      	cmp	r4, r3
 800893a:	bf08      	it	eq
 800893c:	68ec      	ldreq	r4, [r5, #12]
 800893e:	e7e6      	b.n	800890e <__swsetup_r+0x1e>
 8008940:	0758      	lsls	r0, r3, #29
 8008942:	d512      	bpl.n	800896a <__swsetup_r+0x7a>
 8008944:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008946:	b141      	cbz	r1, 800895a <__swsetup_r+0x6a>
 8008948:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800894c:	4299      	cmp	r1, r3
 800894e:	d002      	beq.n	8008956 <__swsetup_r+0x66>
 8008950:	4630      	mov	r0, r6
 8008952:	f7fd fc91 	bl	8006278 <_free_r>
 8008956:	2300      	movs	r3, #0
 8008958:	6363      	str	r3, [r4, #52]	; 0x34
 800895a:	89a3      	ldrh	r3, [r4, #12]
 800895c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008960:	81a3      	strh	r3, [r4, #12]
 8008962:	2300      	movs	r3, #0
 8008964:	6063      	str	r3, [r4, #4]
 8008966:	6923      	ldr	r3, [r4, #16]
 8008968:	6023      	str	r3, [r4, #0]
 800896a:	89a3      	ldrh	r3, [r4, #12]
 800896c:	f043 0308 	orr.w	r3, r3, #8
 8008970:	81a3      	strh	r3, [r4, #12]
 8008972:	6923      	ldr	r3, [r4, #16]
 8008974:	b94b      	cbnz	r3, 800898a <__swsetup_r+0x9a>
 8008976:	89a3      	ldrh	r3, [r4, #12]
 8008978:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800897c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008980:	d003      	beq.n	800898a <__swsetup_r+0x9a>
 8008982:	4621      	mov	r1, r4
 8008984:	4630      	mov	r0, r6
 8008986:	f000 fa01 	bl	8008d8c <__smakebuf_r>
 800898a:	89a0      	ldrh	r0, [r4, #12]
 800898c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008990:	f010 0301 	ands.w	r3, r0, #1
 8008994:	d00a      	beq.n	80089ac <__swsetup_r+0xbc>
 8008996:	2300      	movs	r3, #0
 8008998:	60a3      	str	r3, [r4, #8]
 800899a:	6963      	ldr	r3, [r4, #20]
 800899c:	425b      	negs	r3, r3
 800899e:	61a3      	str	r3, [r4, #24]
 80089a0:	6923      	ldr	r3, [r4, #16]
 80089a2:	b943      	cbnz	r3, 80089b6 <__swsetup_r+0xc6>
 80089a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80089a8:	d1ba      	bne.n	8008920 <__swsetup_r+0x30>
 80089aa:	bd70      	pop	{r4, r5, r6, pc}
 80089ac:	0781      	lsls	r1, r0, #30
 80089ae:	bf58      	it	pl
 80089b0:	6963      	ldrpl	r3, [r4, #20]
 80089b2:	60a3      	str	r3, [r4, #8]
 80089b4:	e7f4      	b.n	80089a0 <__swsetup_r+0xb0>
 80089b6:	2000      	movs	r0, #0
 80089b8:	e7f7      	b.n	80089aa <__swsetup_r+0xba>
 80089ba:	bf00      	nop
 80089bc:	2000000c 	.word	0x2000000c
 80089c0:	0800996c 	.word	0x0800996c
 80089c4:	0800998c 	.word	0x0800998c
 80089c8:	0800994c 	.word	0x0800994c

080089cc <abort>:
 80089cc:	2006      	movs	r0, #6
 80089ce:	b508      	push	{r3, lr}
 80089d0:	f000 fa4c 	bl	8008e6c <raise>
 80089d4:	2001      	movs	r0, #1
 80089d6:	f7fa fa4c 	bl	8002e72 <_exit>
	...

080089dc <__sflush_r>:
 80089dc:	898a      	ldrh	r2, [r1, #12]
 80089de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089e0:	4605      	mov	r5, r0
 80089e2:	0710      	lsls	r0, r2, #28
 80089e4:	460c      	mov	r4, r1
 80089e6:	d457      	bmi.n	8008a98 <__sflush_r+0xbc>
 80089e8:	684b      	ldr	r3, [r1, #4]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	dc04      	bgt.n	80089f8 <__sflush_r+0x1c>
 80089ee:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	dc01      	bgt.n	80089f8 <__sflush_r+0x1c>
 80089f4:	2000      	movs	r0, #0
 80089f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80089fa:	2e00      	cmp	r6, #0
 80089fc:	d0fa      	beq.n	80089f4 <__sflush_r+0x18>
 80089fe:	2300      	movs	r3, #0
 8008a00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008a04:	682f      	ldr	r7, [r5, #0]
 8008a06:	602b      	str	r3, [r5, #0]
 8008a08:	d032      	beq.n	8008a70 <__sflush_r+0x94>
 8008a0a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008a0c:	89a3      	ldrh	r3, [r4, #12]
 8008a0e:	075a      	lsls	r2, r3, #29
 8008a10:	d505      	bpl.n	8008a1e <__sflush_r+0x42>
 8008a12:	6863      	ldr	r3, [r4, #4]
 8008a14:	1ac0      	subs	r0, r0, r3
 8008a16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008a18:	b10b      	cbz	r3, 8008a1e <__sflush_r+0x42>
 8008a1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008a1c:	1ac0      	subs	r0, r0, r3
 8008a1e:	2300      	movs	r3, #0
 8008a20:	4602      	mov	r2, r0
 8008a22:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a24:	4628      	mov	r0, r5
 8008a26:	6a21      	ldr	r1, [r4, #32]
 8008a28:	47b0      	blx	r6
 8008a2a:	1c43      	adds	r3, r0, #1
 8008a2c:	89a3      	ldrh	r3, [r4, #12]
 8008a2e:	d106      	bne.n	8008a3e <__sflush_r+0x62>
 8008a30:	6829      	ldr	r1, [r5, #0]
 8008a32:	291d      	cmp	r1, #29
 8008a34:	d82c      	bhi.n	8008a90 <__sflush_r+0xb4>
 8008a36:	4a29      	ldr	r2, [pc, #164]	; (8008adc <__sflush_r+0x100>)
 8008a38:	40ca      	lsrs	r2, r1
 8008a3a:	07d6      	lsls	r6, r2, #31
 8008a3c:	d528      	bpl.n	8008a90 <__sflush_r+0xb4>
 8008a3e:	2200      	movs	r2, #0
 8008a40:	6062      	str	r2, [r4, #4]
 8008a42:	6922      	ldr	r2, [r4, #16]
 8008a44:	04d9      	lsls	r1, r3, #19
 8008a46:	6022      	str	r2, [r4, #0]
 8008a48:	d504      	bpl.n	8008a54 <__sflush_r+0x78>
 8008a4a:	1c42      	adds	r2, r0, #1
 8008a4c:	d101      	bne.n	8008a52 <__sflush_r+0x76>
 8008a4e:	682b      	ldr	r3, [r5, #0]
 8008a50:	b903      	cbnz	r3, 8008a54 <__sflush_r+0x78>
 8008a52:	6560      	str	r0, [r4, #84]	; 0x54
 8008a54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a56:	602f      	str	r7, [r5, #0]
 8008a58:	2900      	cmp	r1, #0
 8008a5a:	d0cb      	beq.n	80089f4 <__sflush_r+0x18>
 8008a5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a60:	4299      	cmp	r1, r3
 8008a62:	d002      	beq.n	8008a6a <__sflush_r+0x8e>
 8008a64:	4628      	mov	r0, r5
 8008a66:	f7fd fc07 	bl	8006278 <_free_r>
 8008a6a:	2000      	movs	r0, #0
 8008a6c:	6360      	str	r0, [r4, #52]	; 0x34
 8008a6e:	e7c2      	b.n	80089f6 <__sflush_r+0x1a>
 8008a70:	6a21      	ldr	r1, [r4, #32]
 8008a72:	2301      	movs	r3, #1
 8008a74:	4628      	mov	r0, r5
 8008a76:	47b0      	blx	r6
 8008a78:	1c41      	adds	r1, r0, #1
 8008a7a:	d1c7      	bne.n	8008a0c <__sflush_r+0x30>
 8008a7c:	682b      	ldr	r3, [r5, #0]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d0c4      	beq.n	8008a0c <__sflush_r+0x30>
 8008a82:	2b1d      	cmp	r3, #29
 8008a84:	d001      	beq.n	8008a8a <__sflush_r+0xae>
 8008a86:	2b16      	cmp	r3, #22
 8008a88:	d101      	bne.n	8008a8e <__sflush_r+0xb2>
 8008a8a:	602f      	str	r7, [r5, #0]
 8008a8c:	e7b2      	b.n	80089f4 <__sflush_r+0x18>
 8008a8e:	89a3      	ldrh	r3, [r4, #12]
 8008a90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a94:	81a3      	strh	r3, [r4, #12]
 8008a96:	e7ae      	b.n	80089f6 <__sflush_r+0x1a>
 8008a98:	690f      	ldr	r7, [r1, #16]
 8008a9a:	2f00      	cmp	r7, #0
 8008a9c:	d0aa      	beq.n	80089f4 <__sflush_r+0x18>
 8008a9e:	0793      	lsls	r3, r2, #30
 8008aa0:	bf18      	it	ne
 8008aa2:	2300      	movne	r3, #0
 8008aa4:	680e      	ldr	r6, [r1, #0]
 8008aa6:	bf08      	it	eq
 8008aa8:	694b      	ldreq	r3, [r1, #20]
 8008aaa:	1bf6      	subs	r6, r6, r7
 8008aac:	600f      	str	r7, [r1, #0]
 8008aae:	608b      	str	r3, [r1, #8]
 8008ab0:	2e00      	cmp	r6, #0
 8008ab2:	dd9f      	ble.n	80089f4 <__sflush_r+0x18>
 8008ab4:	4633      	mov	r3, r6
 8008ab6:	463a      	mov	r2, r7
 8008ab8:	4628      	mov	r0, r5
 8008aba:	6a21      	ldr	r1, [r4, #32]
 8008abc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008ac0:	47e0      	blx	ip
 8008ac2:	2800      	cmp	r0, #0
 8008ac4:	dc06      	bgt.n	8008ad4 <__sflush_r+0xf8>
 8008ac6:	89a3      	ldrh	r3, [r4, #12]
 8008ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8008acc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ad0:	81a3      	strh	r3, [r4, #12]
 8008ad2:	e790      	b.n	80089f6 <__sflush_r+0x1a>
 8008ad4:	4407      	add	r7, r0
 8008ad6:	1a36      	subs	r6, r6, r0
 8008ad8:	e7ea      	b.n	8008ab0 <__sflush_r+0xd4>
 8008ada:	bf00      	nop
 8008adc:	20400001 	.word	0x20400001

08008ae0 <_fflush_r>:
 8008ae0:	b538      	push	{r3, r4, r5, lr}
 8008ae2:	690b      	ldr	r3, [r1, #16]
 8008ae4:	4605      	mov	r5, r0
 8008ae6:	460c      	mov	r4, r1
 8008ae8:	b913      	cbnz	r3, 8008af0 <_fflush_r+0x10>
 8008aea:	2500      	movs	r5, #0
 8008aec:	4628      	mov	r0, r5
 8008aee:	bd38      	pop	{r3, r4, r5, pc}
 8008af0:	b118      	cbz	r0, 8008afa <_fflush_r+0x1a>
 8008af2:	6983      	ldr	r3, [r0, #24]
 8008af4:	b90b      	cbnz	r3, 8008afa <_fflush_r+0x1a>
 8008af6:	f000 f887 	bl	8008c08 <__sinit>
 8008afa:	4b14      	ldr	r3, [pc, #80]	; (8008b4c <_fflush_r+0x6c>)
 8008afc:	429c      	cmp	r4, r3
 8008afe:	d11b      	bne.n	8008b38 <_fflush_r+0x58>
 8008b00:	686c      	ldr	r4, [r5, #4]
 8008b02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d0ef      	beq.n	8008aea <_fflush_r+0xa>
 8008b0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008b0c:	07d0      	lsls	r0, r2, #31
 8008b0e:	d404      	bmi.n	8008b1a <_fflush_r+0x3a>
 8008b10:	0599      	lsls	r1, r3, #22
 8008b12:	d402      	bmi.n	8008b1a <_fflush_r+0x3a>
 8008b14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b16:	f7ff fcd6 	bl	80084c6 <__retarget_lock_acquire_recursive>
 8008b1a:	4628      	mov	r0, r5
 8008b1c:	4621      	mov	r1, r4
 8008b1e:	f7ff ff5d 	bl	80089dc <__sflush_r>
 8008b22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b24:	4605      	mov	r5, r0
 8008b26:	07da      	lsls	r2, r3, #31
 8008b28:	d4e0      	bmi.n	8008aec <_fflush_r+0xc>
 8008b2a:	89a3      	ldrh	r3, [r4, #12]
 8008b2c:	059b      	lsls	r3, r3, #22
 8008b2e:	d4dd      	bmi.n	8008aec <_fflush_r+0xc>
 8008b30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b32:	f7ff fcc9 	bl	80084c8 <__retarget_lock_release_recursive>
 8008b36:	e7d9      	b.n	8008aec <_fflush_r+0xc>
 8008b38:	4b05      	ldr	r3, [pc, #20]	; (8008b50 <_fflush_r+0x70>)
 8008b3a:	429c      	cmp	r4, r3
 8008b3c:	d101      	bne.n	8008b42 <_fflush_r+0x62>
 8008b3e:	68ac      	ldr	r4, [r5, #8]
 8008b40:	e7df      	b.n	8008b02 <_fflush_r+0x22>
 8008b42:	4b04      	ldr	r3, [pc, #16]	; (8008b54 <_fflush_r+0x74>)
 8008b44:	429c      	cmp	r4, r3
 8008b46:	bf08      	it	eq
 8008b48:	68ec      	ldreq	r4, [r5, #12]
 8008b4a:	e7da      	b.n	8008b02 <_fflush_r+0x22>
 8008b4c:	0800996c 	.word	0x0800996c
 8008b50:	0800998c 	.word	0x0800998c
 8008b54:	0800994c 	.word	0x0800994c

08008b58 <std>:
 8008b58:	2300      	movs	r3, #0
 8008b5a:	b510      	push	{r4, lr}
 8008b5c:	4604      	mov	r4, r0
 8008b5e:	e9c0 3300 	strd	r3, r3, [r0]
 8008b62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008b66:	6083      	str	r3, [r0, #8]
 8008b68:	8181      	strh	r1, [r0, #12]
 8008b6a:	6643      	str	r3, [r0, #100]	; 0x64
 8008b6c:	81c2      	strh	r2, [r0, #14]
 8008b6e:	6183      	str	r3, [r0, #24]
 8008b70:	4619      	mov	r1, r3
 8008b72:	2208      	movs	r2, #8
 8008b74:	305c      	adds	r0, #92	; 0x5c
 8008b76:	f7fd fb77 	bl	8006268 <memset>
 8008b7a:	4b05      	ldr	r3, [pc, #20]	; (8008b90 <std+0x38>)
 8008b7c:	6224      	str	r4, [r4, #32]
 8008b7e:	6263      	str	r3, [r4, #36]	; 0x24
 8008b80:	4b04      	ldr	r3, [pc, #16]	; (8008b94 <std+0x3c>)
 8008b82:	62a3      	str	r3, [r4, #40]	; 0x28
 8008b84:	4b04      	ldr	r3, [pc, #16]	; (8008b98 <std+0x40>)
 8008b86:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008b88:	4b04      	ldr	r3, [pc, #16]	; (8008b9c <std+0x44>)
 8008b8a:	6323      	str	r3, [r4, #48]	; 0x30
 8008b8c:	bd10      	pop	{r4, pc}
 8008b8e:	bf00      	nop
 8008b90:	08008ea5 	.word	0x08008ea5
 8008b94:	08008ec7 	.word	0x08008ec7
 8008b98:	08008eff 	.word	0x08008eff
 8008b9c:	08008f23 	.word	0x08008f23

08008ba0 <_cleanup_r>:
 8008ba0:	4901      	ldr	r1, [pc, #4]	; (8008ba8 <_cleanup_r+0x8>)
 8008ba2:	f000 b8af 	b.w	8008d04 <_fwalk_reent>
 8008ba6:	bf00      	nop
 8008ba8:	08008ae1 	.word	0x08008ae1

08008bac <__sfmoreglue>:
 8008bac:	2268      	movs	r2, #104	; 0x68
 8008bae:	b570      	push	{r4, r5, r6, lr}
 8008bb0:	1e4d      	subs	r5, r1, #1
 8008bb2:	4355      	muls	r5, r2
 8008bb4:	460e      	mov	r6, r1
 8008bb6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008bba:	f7fd fbc5 	bl	8006348 <_malloc_r>
 8008bbe:	4604      	mov	r4, r0
 8008bc0:	b140      	cbz	r0, 8008bd4 <__sfmoreglue+0x28>
 8008bc2:	2100      	movs	r1, #0
 8008bc4:	e9c0 1600 	strd	r1, r6, [r0]
 8008bc8:	300c      	adds	r0, #12
 8008bca:	60a0      	str	r0, [r4, #8]
 8008bcc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008bd0:	f7fd fb4a 	bl	8006268 <memset>
 8008bd4:	4620      	mov	r0, r4
 8008bd6:	bd70      	pop	{r4, r5, r6, pc}

08008bd8 <__sfp_lock_acquire>:
 8008bd8:	4801      	ldr	r0, [pc, #4]	; (8008be0 <__sfp_lock_acquire+0x8>)
 8008bda:	f7ff bc74 	b.w	80084c6 <__retarget_lock_acquire_recursive>
 8008bde:	bf00      	nop
 8008be0:	20000761 	.word	0x20000761

08008be4 <__sfp_lock_release>:
 8008be4:	4801      	ldr	r0, [pc, #4]	; (8008bec <__sfp_lock_release+0x8>)
 8008be6:	f7ff bc6f 	b.w	80084c8 <__retarget_lock_release_recursive>
 8008bea:	bf00      	nop
 8008bec:	20000761 	.word	0x20000761

08008bf0 <__sinit_lock_acquire>:
 8008bf0:	4801      	ldr	r0, [pc, #4]	; (8008bf8 <__sinit_lock_acquire+0x8>)
 8008bf2:	f7ff bc68 	b.w	80084c6 <__retarget_lock_acquire_recursive>
 8008bf6:	bf00      	nop
 8008bf8:	20000762 	.word	0x20000762

08008bfc <__sinit_lock_release>:
 8008bfc:	4801      	ldr	r0, [pc, #4]	; (8008c04 <__sinit_lock_release+0x8>)
 8008bfe:	f7ff bc63 	b.w	80084c8 <__retarget_lock_release_recursive>
 8008c02:	bf00      	nop
 8008c04:	20000762 	.word	0x20000762

08008c08 <__sinit>:
 8008c08:	b510      	push	{r4, lr}
 8008c0a:	4604      	mov	r4, r0
 8008c0c:	f7ff fff0 	bl	8008bf0 <__sinit_lock_acquire>
 8008c10:	69a3      	ldr	r3, [r4, #24]
 8008c12:	b11b      	cbz	r3, 8008c1c <__sinit+0x14>
 8008c14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c18:	f7ff bff0 	b.w	8008bfc <__sinit_lock_release>
 8008c1c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008c20:	6523      	str	r3, [r4, #80]	; 0x50
 8008c22:	4b13      	ldr	r3, [pc, #76]	; (8008c70 <__sinit+0x68>)
 8008c24:	4a13      	ldr	r2, [pc, #76]	; (8008c74 <__sinit+0x6c>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	62a2      	str	r2, [r4, #40]	; 0x28
 8008c2a:	42a3      	cmp	r3, r4
 8008c2c:	bf08      	it	eq
 8008c2e:	2301      	moveq	r3, #1
 8008c30:	4620      	mov	r0, r4
 8008c32:	bf08      	it	eq
 8008c34:	61a3      	streq	r3, [r4, #24]
 8008c36:	f000 f81f 	bl	8008c78 <__sfp>
 8008c3a:	6060      	str	r0, [r4, #4]
 8008c3c:	4620      	mov	r0, r4
 8008c3e:	f000 f81b 	bl	8008c78 <__sfp>
 8008c42:	60a0      	str	r0, [r4, #8]
 8008c44:	4620      	mov	r0, r4
 8008c46:	f000 f817 	bl	8008c78 <__sfp>
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	2104      	movs	r1, #4
 8008c4e:	60e0      	str	r0, [r4, #12]
 8008c50:	6860      	ldr	r0, [r4, #4]
 8008c52:	f7ff ff81 	bl	8008b58 <std>
 8008c56:	2201      	movs	r2, #1
 8008c58:	2109      	movs	r1, #9
 8008c5a:	68a0      	ldr	r0, [r4, #8]
 8008c5c:	f7ff ff7c 	bl	8008b58 <std>
 8008c60:	2202      	movs	r2, #2
 8008c62:	2112      	movs	r1, #18
 8008c64:	68e0      	ldr	r0, [r4, #12]
 8008c66:	f7ff ff77 	bl	8008b58 <std>
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	61a3      	str	r3, [r4, #24]
 8008c6e:	e7d1      	b.n	8008c14 <__sinit+0xc>
 8008c70:	080095d4 	.word	0x080095d4
 8008c74:	08008ba1 	.word	0x08008ba1

08008c78 <__sfp>:
 8008c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c7a:	4607      	mov	r7, r0
 8008c7c:	f7ff ffac 	bl	8008bd8 <__sfp_lock_acquire>
 8008c80:	4b1e      	ldr	r3, [pc, #120]	; (8008cfc <__sfp+0x84>)
 8008c82:	681e      	ldr	r6, [r3, #0]
 8008c84:	69b3      	ldr	r3, [r6, #24]
 8008c86:	b913      	cbnz	r3, 8008c8e <__sfp+0x16>
 8008c88:	4630      	mov	r0, r6
 8008c8a:	f7ff ffbd 	bl	8008c08 <__sinit>
 8008c8e:	3648      	adds	r6, #72	; 0x48
 8008c90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008c94:	3b01      	subs	r3, #1
 8008c96:	d503      	bpl.n	8008ca0 <__sfp+0x28>
 8008c98:	6833      	ldr	r3, [r6, #0]
 8008c9a:	b30b      	cbz	r3, 8008ce0 <__sfp+0x68>
 8008c9c:	6836      	ldr	r6, [r6, #0]
 8008c9e:	e7f7      	b.n	8008c90 <__sfp+0x18>
 8008ca0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008ca4:	b9d5      	cbnz	r5, 8008cdc <__sfp+0x64>
 8008ca6:	4b16      	ldr	r3, [pc, #88]	; (8008d00 <__sfp+0x88>)
 8008ca8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008cac:	60e3      	str	r3, [r4, #12]
 8008cae:	6665      	str	r5, [r4, #100]	; 0x64
 8008cb0:	f7ff fc08 	bl	80084c4 <__retarget_lock_init_recursive>
 8008cb4:	f7ff ff96 	bl	8008be4 <__sfp_lock_release>
 8008cb8:	2208      	movs	r2, #8
 8008cba:	4629      	mov	r1, r5
 8008cbc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008cc0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008cc4:	6025      	str	r5, [r4, #0]
 8008cc6:	61a5      	str	r5, [r4, #24]
 8008cc8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008ccc:	f7fd facc 	bl	8006268 <memset>
 8008cd0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008cd4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008cd8:	4620      	mov	r0, r4
 8008cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008cdc:	3468      	adds	r4, #104	; 0x68
 8008cde:	e7d9      	b.n	8008c94 <__sfp+0x1c>
 8008ce0:	2104      	movs	r1, #4
 8008ce2:	4638      	mov	r0, r7
 8008ce4:	f7ff ff62 	bl	8008bac <__sfmoreglue>
 8008ce8:	4604      	mov	r4, r0
 8008cea:	6030      	str	r0, [r6, #0]
 8008cec:	2800      	cmp	r0, #0
 8008cee:	d1d5      	bne.n	8008c9c <__sfp+0x24>
 8008cf0:	f7ff ff78 	bl	8008be4 <__sfp_lock_release>
 8008cf4:	230c      	movs	r3, #12
 8008cf6:	603b      	str	r3, [r7, #0]
 8008cf8:	e7ee      	b.n	8008cd8 <__sfp+0x60>
 8008cfa:	bf00      	nop
 8008cfc:	080095d4 	.word	0x080095d4
 8008d00:	ffff0001 	.word	0xffff0001

08008d04 <_fwalk_reent>:
 8008d04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d08:	4606      	mov	r6, r0
 8008d0a:	4688      	mov	r8, r1
 8008d0c:	2700      	movs	r7, #0
 8008d0e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008d12:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008d16:	f1b9 0901 	subs.w	r9, r9, #1
 8008d1a:	d505      	bpl.n	8008d28 <_fwalk_reent+0x24>
 8008d1c:	6824      	ldr	r4, [r4, #0]
 8008d1e:	2c00      	cmp	r4, #0
 8008d20:	d1f7      	bne.n	8008d12 <_fwalk_reent+0xe>
 8008d22:	4638      	mov	r0, r7
 8008d24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d28:	89ab      	ldrh	r3, [r5, #12]
 8008d2a:	2b01      	cmp	r3, #1
 8008d2c:	d907      	bls.n	8008d3e <_fwalk_reent+0x3a>
 8008d2e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008d32:	3301      	adds	r3, #1
 8008d34:	d003      	beq.n	8008d3e <_fwalk_reent+0x3a>
 8008d36:	4629      	mov	r1, r5
 8008d38:	4630      	mov	r0, r6
 8008d3a:	47c0      	blx	r8
 8008d3c:	4307      	orrs	r7, r0
 8008d3e:	3568      	adds	r5, #104	; 0x68
 8008d40:	e7e9      	b.n	8008d16 <_fwalk_reent+0x12>

08008d42 <__swhatbuf_r>:
 8008d42:	b570      	push	{r4, r5, r6, lr}
 8008d44:	460e      	mov	r6, r1
 8008d46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d4a:	4614      	mov	r4, r2
 8008d4c:	2900      	cmp	r1, #0
 8008d4e:	461d      	mov	r5, r3
 8008d50:	b096      	sub	sp, #88	; 0x58
 8008d52:	da08      	bge.n	8008d66 <__swhatbuf_r+0x24>
 8008d54:	2200      	movs	r2, #0
 8008d56:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008d5a:	602a      	str	r2, [r5, #0]
 8008d5c:	061a      	lsls	r2, r3, #24
 8008d5e:	d410      	bmi.n	8008d82 <__swhatbuf_r+0x40>
 8008d60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d64:	e00e      	b.n	8008d84 <__swhatbuf_r+0x42>
 8008d66:	466a      	mov	r2, sp
 8008d68:	f000 f902 	bl	8008f70 <_fstat_r>
 8008d6c:	2800      	cmp	r0, #0
 8008d6e:	dbf1      	blt.n	8008d54 <__swhatbuf_r+0x12>
 8008d70:	9a01      	ldr	r2, [sp, #4]
 8008d72:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008d76:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008d7a:	425a      	negs	r2, r3
 8008d7c:	415a      	adcs	r2, r3
 8008d7e:	602a      	str	r2, [r5, #0]
 8008d80:	e7ee      	b.n	8008d60 <__swhatbuf_r+0x1e>
 8008d82:	2340      	movs	r3, #64	; 0x40
 8008d84:	2000      	movs	r0, #0
 8008d86:	6023      	str	r3, [r4, #0]
 8008d88:	b016      	add	sp, #88	; 0x58
 8008d8a:	bd70      	pop	{r4, r5, r6, pc}

08008d8c <__smakebuf_r>:
 8008d8c:	898b      	ldrh	r3, [r1, #12]
 8008d8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008d90:	079d      	lsls	r5, r3, #30
 8008d92:	4606      	mov	r6, r0
 8008d94:	460c      	mov	r4, r1
 8008d96:	d507      	bpl.n	8008da8 <__smakebuf_r+0x1c>
 8008d98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008d9c:	6023      	str	r3, [r4, #0]
 8008d9e:	6123      	str	r3, [r4, #16]
 8008da0:	2301      	movs	r3, #1
 8008da2:	6163      	str	r3, [r4, #20]
 8008da4:	b002      	add	sp, #8
 8008da6:	bd70      	pop	{r4, r5, r6, pc}
 8008da8:	466a      	mov	r2, sp
 8008daa:	ab01      	add	r3, sp, #4
 8008dac:	f7ff ffc9 	bl	8008d42 <__swhatbuf_r>
 8008db0:	9900      	ldr	r1, [sp, #0]
 8008db2:	4605      	mov	r5, r0
 8008db4:	4630      	mov	r0, r6
 8008db6:	f7fd fac7 	bl	8006348 <_malloc_r>
 8008dba:	b948      	cbnz	r0, 8008dd0 <__smakebuf_r+0x44>
 8008dbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008dc0:	059a      	lsls	r2, r3, #22
 8008dc2:	d4ef      	bmi.n	8008da4 <__smakebuf_r+0x18>
 8008dc4:	f023 0303 	bic.w	r3, r3, #3
 8008dc8:	f043 0302 	orr.w	r3, r3, #2
 8008dcc:	81a3      	strh	r3, [r4, #12]
 8008dce:	e7e3      	b.n	8008d98 <__smakebuf_r+0xc>
 8008dd0:	4b0d      	ldr	r3, [pc, #52]	; (8008e08 <__smakebuf_r+0x7c>)
 8008dd2:	62b3      	str	r3, [r6, #40]	; 0x28
 8008dd4:	89a3      	ldrh	r3, [r4, #12]
 8008dd6:	6020      	str	r0, [r4, #0]
 8008dd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ddc:	81a3      	strh	r3, [r4, #12]
 8008dde:	9b00      	ldr	r3, [sp, #0]
 8008de0:	6120      	str	r0, [r4, #16]
 8008de2:	6163      	str	r3, [r4, #20]
 8008de4:	9b01      	ldr	r3, [sp, #4]
 8008de6:	b15b      	cbz	r3, 8008e00 <__smakebuf_r+0x74>
 8008de8:	4630      	mov	r0, r6
 8008dea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008dee:	f000 f8d1 	bl	8008f94 <_isatty_r>
 8008df2:	b128      	cbz	r0, 8008e00 <__smakebuf_r+0x74>
 8008df4:	89a3      	ldrh	r3, [r4, #12]
 8008df6:	f023 0303 	bic.w	r3, r3, #3
 8008dfa:	f043 0301 	orr.w	r3, r3, #1
 8008dfe:	81a3      	strh	r3, [r4, #12]
 8008e00:	89a0      	ldrh	r0, [r4, #12]
 8008e02:	4305      	orrs	r5, r0
 8008e04:	81a5      	strh	r5, [r4, #12]
 8008e06:	e7cd      	b.n	8008da4 <__smakebuf_r+0x18>
 8008e08:	08008ba1 	.word	0x08008ba1

08008e0c <_malloc_usable_size_r>:
 8008e0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e10:	1f18      	subs	r0, r3, #4
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	bfbc      	itt	lt
 8008e16:	580b      	ldrlt	r3, [r1, r0]
 8008e18:	18c0      	addlt	r0, r0, r3
 8008e1a:	4770      	bx	lr

08008e1c <_raise_r>:
 8008e1c:	291f      	cmp	r1, #31
 8008e1e:	b538      	push	{r3, r4, r5, lr}
 8008e20:	4604      	mov	r4, r0
 8008e22:	460d      	mov	r5, r1
 8008e24:	d904      	bls.n	8008e30 <_raise_r+0x14>
 8008e26:	2316      	movs	r3, #22
 8008e28:	6003      	str	r3, [r0, #0]
 8008e2a:	f04f 30ff 	mov.w	r0, #4294967295
 8008e2e:	bd38      	pop	{r3, r4, r5, pc}
 8008e30:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008e32:	b112      	cbz	r2, 8008e3a <_raise_r+0x1e>
 8008e34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008e38:	b94b      	cbnz	r3, 8008e4e <_raise_r+0x32>
 8008e3a:	4620      	mov	r0, r4
 8008e3c:	f000 f830 	bl	8008ea0 <_getpid_r>
 8008e40:	462a      	mov	r2, r5
 8008e42:	4601      	mov	r1, r0
 8008e44:	4620      	mov	r0, r4
 8008e46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e4a:	f000 b817 	b.w	8008e7c <_kill_r>
 8008e4e:	2b01      	cmp	r3, #1
 8008e50:	d00a      	beq.n	8008e68 <_raise_r+0x4c>
 8008e52:	1c59      	adds	r1, r3, #1
 8008e54:	d103      	bne.n	8008e5e <_raise_r+0x42>
 8008e56:	2316      	movs	r3, #22
 8008e58:	6003      	str	r3, [r0, #0]
 8008e5a:	2001      	movs	r0, #1
 8008e5c:	e7e7      	b.n	8008e2e <_raise_r+0x12>
 8008e5e:	2400      	movs	r4, #0
 8008e60:	4628      	mov	r0, r5
 8008e62:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008e66:	4798      	blx	r3
 8008e68:	2000      	movs	r0, #0
 8008e6a:	e7e0      	b.n	8008e2e <_raise_r+0x12>

08008e6c <raise>:
 8008e6c:	4b02      	ldr	r3, [pc, #8]	; (8008e78 <raise+0xc>)
 8008e6e:	4601      	mov	r1, r0
 8008e70:	6818      	ldr	r0, [r3, #0]
 8008e72:	f7ff bfd3 	b.w	8008e1c <_raise_r>
 8008e76:	bf00      	nop
 8008e78:	2000000c 	.word	0x2000000c

08008e7c <_kill_r>:
 8008e7c:	b538      	push	{r3, r4, r5, lr}
 8008e7e:	2300      	movs	r3, #0
 8008e80:	4d06      	ldr	r5, [pc, #24]	; (8008e9c <_kill_r+0x20>)
 8008e82:	4604      	mov	r4, r0
 8008e84:	4608      	mov	r0, r1
 8008e86:	4611      	mov	r1, r2
 8008e88:	602b      	str	r3, [r5, #0]
 8008e8a:	f7f9 ffe2 	bl	8002e52 <_kill>
 8008e8e:	1c43      	adds	r3, r0, #1
 8008e90:	d102      	bne.n	8008e98 <_kill_r+0x1c>
 8008e92:	682b      	ldr	r3, [r5, #0]
 8008e94:	b103      	cbz	r3, 8008e98 <_kill_r+0x1c>
 8008e96:	6023      	str	r3, [r4, #0]
 8008e98:	bd38      	pop	{r3, r4, r5, pc}
 8008e9a:	bf00      	nop
 8008e9c:	2000075c 	.word	0x2000075c

08008ea0 <_getpid_r>:
 8008ea0:	f7f9 bfd0 	b.w	8002e44 <_getpid>

08008ea4 <__sread>:
 8008ea4:	b510      	push	{r4, lr}
 8008ea6:	460c      	mov	r4, r1
 8008ea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008eac:	f000 f894 	bl	8008fd8 <_read_r>
 8008eb0:	2800      	cmp	r0, #0
 8008eb2:	bfab      	itete	ge
 8008eb4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008eb6:	89a3      	ldrhlt	r3, [r4, #12]
 8008eb8:	181b      	addge	r3, r3, r0
 8008eba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008ebe:	bfac      	ite	ge
 8008ec0:	6563      	strge	r3, [r4, #84]	; 0x54
 8008ec2:	81a3      	strhlt	r3, [r4, #12]
 8008ec4:	bd10      	pop	{r4, pc}

08008ec6 <__swrite>:
 8008ec6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008eca:	461f      	mov	r7, r3
 8008ecc:	898b      	ldrh	r3, [r1, #12]
 8008ece:	4605      	mov	r5, r0
 8008ed0:	05db      	lsls	r3, r3, #23
 8008ed2:	460c      	mov	r4, r1
 8008ed4:	4616      	mov	r6, r2
 8008ed6:	d505      	bpl.n	8008ee4 <__swrite+0x1e>
 8008ed8:	2302      	movs	r3, #2
 8008eda:	2200      	movs	r2, #0
 8008edc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ee0:	f000 f868 	bl	8008fb4 <_lseek_r>
 8008ee4:	89a3      	ldrh	r3, [r4, #12]
 8008ee6:	4632      	mov	r2, r6
 8008ee8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008eec:	81a3      	strh	r3, [r4, #12]
 8008eee:	4628      	mov	r0, r5
 8008ef0:	463b      	mov	r3, r7
 8008ef2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ef6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008efa:	f000 b817 	b.w	8008f2c <_write_r>

08008efe <__sseek>:
 8008efe:	b510      	push	{r4, lr}
 8008f00:	460c      	mov	r4, r1
 8008f02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f06:	f000 f855 	bl	8008fb4 <_lseek_r>
 8008f0a:	1c43      	adds	r3, r0, #1
 8008f0c:	89a3      	ldrh	r3, [r4, #12]
 8008f0e:	bf15      	itete	ne
 8008f10:	6560      	strne	r0, [r4, #84]	; 0x54
 8008f12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008f16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008f1a:	81a3      	strheq	r3, [r4, #12]
 8008f1c:	bf18      	it	ne
 8008f1e:	81a3      	strhne	r3, [r4, #12]
 8008f20:	bd10      	pop	{r4, pc}

08008f22 <__sclose>:
 8008f22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f26:	f000 b813 	b.w	8008f50 <_close_r>
	...

08008f2c <_write_r>:
 8008f2c:	b538      	push	{r3, r4, r5, lr}
 8008f2e:	4604      	mov	r4, r0
 8008f30:	4608      	mov	r0, r1
 8008f32:	4611      	mov	r1, r2
 8008f34:	2200      	movs	r2, #0
 8008f36:	4d05      	ldr	r5, [pc, #20]	; (8008f4c <_write_r+0x20>)
 8008f38:	602a      	str	r2, [r5, #0]
 8008f3a:	461a      	mov	r2, r3
 8008f3c:	f7f9 ffc0 	bl	8002ec0 <_write>
 8008f40:	1c43      	adds	r3, r0, #1
 8008f42:	d102      	bne.n	8008f4a <_write_r+0x1e>
 8008f44:	682b      	ldr	r3, [r5, #0]
 8008f46:	b103      	cbz	r3, 8008f4a <_write_r+0x1e>
 8008f48:	6023      	str	r3, [r4, #0]
 8008f4a:	bd38      	pop	{r3, r4, r5, pc}
 8008f4c:	2000075c 	.word	0x2000075c

08008f50 <_close_r>:
 8008f50:	b538      	push	{r3, r4, r5, lr}
 8008f52:	2300      	movs	r3, #0
 8008f54:	4d05      	ldr	r5, [pc, #20]	; (8008f6c <_close_r+0x1c>)
 8008f56:	4604      	mov	r4, r0
 8008f58:	4608      	mov	r0, r1
 8008f5a:	602b      	str	r3, [r5, #0]
 8008f5c:	f7f9 ffcc 	bl	8002ef8 <_close>
 8008f60:	1c43      	adds	r3, r0, #1
 8008f62:	d102      	bne.n	8008f6a <_close_r+0x1a>
 8008f64:	682b      	ldr	r3, [r5, #0]
 8008f66:	b103      	cbz	r3, 8008f6a <_close_r+0x1a>
 8008f68:	6023      	str	r3, [r4, #0]
 8008f6a:	bd38      	pop	{r3, r4, r5, pc}
 8008f6c:	2000075c 	.word	0x2000075c

08008f70 <_fstat_r>:
 8008f70:	b538      	push	{r3, r4, r5, lr}
 8008f72:	2300      	movs	r3, #0
 8008f74:	4d06      	ldr	r5, [pc, #24]	; (8008f90 <_fstat_r+0x20>)
 8008f76:	4604      	mov	r4, r0
 8008f78:	4608      	mov	r0, r1
 8008f7a:	4611      	mov	r1, r2
 8008f7c:	602b      	str	r3, [r5, #0]
 8008f7e:	f7f9 ffc6 	bl	8002f0e <_fstat>
 8008f82:	1c43      	adds	r3, r0, #1
 8008f84:	d102      	bne.n	8008f8c <_fstat_r+0x1c>
 8008f86:	682b      	ldr	r3, [r5, #0]
 8008f88:	b103      	cbz	r3, 8008f8c <_fstat_r+0x1c>
 8008f8a:	6023      	str	r3, [r4, #0]
 8008f8c:	bd38      	pop	{r3, r4, r5, pc}
 8008f8e:	bf00      	nop
 8008f90:	2000075c 	.word	0x2000075c

08008f94 <_isatty_r>:
 8008f94:	b538      	push	{r3, r4, r5, lr}
 8008f96:	2300      	movs	r3, #0
 8008f98:	4d05      	ldr	r5, [pc, #20]	; (8008fb0 <_isatty_r+0x1c>)
 8008f9a:	4604      	mov	r4, r0
 8008f9c:	4608      	mov	r0, r1
 8008f9e:	602b      	str	r3, [r5, #0]
 8008fa0:	f7f9 ffc4 	bl	8002f2c <_isatty>
 8008fa4:	1c43      	adds	r3, r0, #1
 8008fa6:	d102      	bne.n	8008fae <_isatty_r+0x1a>
 8008fa8:	682b      	ldr	r3, [r5, #0]
 8008faa:	b103      	cbz	r3, 8008fae <_isatty_r+0x1a>
 8008fac:	6023      	str	r3, [r4, #0]
 8008fae:	bd38      	pop	{r3, r4, r5, pc}
 8008fb0:	2000075c 	.word	0x2000075c

08008fb4 <_lseek_r>:
 8008fb4:	b538      	push	{r3, r4, r5, lr}
 8008fb6:	4604      	mov	r4, r0
 8008fb8:	4608      	mov	r0, r1
 8008fba:	4611      	mov	r1, r2
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	4d05      	ldr	r5, [pc, #20]	; (8008fd4 <_lseek_r+0x20>)
 8008fc0:	602a      	str	r2, [r5, #0]
 8008fc2:	461a      	mov	r2, r3
 8008fc4:	f7f9 ffbc 	bl	8002f40 <_lseek>
 8008fc8:	1c43      	adds	r3, r0, #1
 8008fca:	d102      	bne.n	8008fd2 <_lseek_r+0x1e>
 8008fcc:	682b      	ldr	r3, [r5, #0]
 8008fce:	b103      	cbz	r3, 8008fd2 <_lseek_r+0x1e>
 8008fd0:	6023      	str	r3, [r4, #0]
 8008fd2:	bd38      	pop	{r3, r4, r5, pc}
 8008fd4:	2000075c 	.word	0x2000075c

08008fd8 <_read_r>:
 8008fd8:	b538      	push	{r3, r4, r5, lr}
 8008fda:	4604      	mov	r4, r0
 8008fdc:	4608      	mov	r0, r1
 8008fde:	4611      	mov	r1, r2
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	4d05      	ldr	r5, [pc, #20]	; (8008ff8 <_read_r+0x20>)
 8008fe4:	602a      	str	r2, [r5, #0]
 8008fe6:	461a      	mov	r2, r3
 8008fe8:	f7f9 ff4d 	bl	8002e86 <_read>
 8008fec:	1c43      	adds	r3, r0, #1
 8008fee:	d102      	bne.n	8008ff6 <_read_r+0x1e>
 8008ff0:	682b      	ldr	r3, [r5, #0]
 8008ff2:	b103      	cbz	r3, 8008ff6 <_read_r+0x1e>
 8008ff4:	6023      	str	r3, [r4, #0]
 8008ff6:	bd38      	pop	{r3, r4, r5, pc}
 8008ff8:	2000075c 	.word	0x2000075c
 8008ffc:	00000000 	.word	0x00000000

08009000 <atan>:
 8009000:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009004:	4bb6      	ldr	r3, [pc, #728]	; (80092e0 <atan+0x2e0>)
 8009006:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800900a:	429e      	cmp	r6, r3
 800900c:	4604      	mov	r4, r0
 800900e:	460d      	mov	r5, r1
 8009010:	468b      	mov	fp, r1
 8009012:	dd17      	ble.n	8009044 <atan+0x44>
 8009014:	4bb3      	ldr	r3, [pc, #716]	; (80092e4 <atan+0x2e4>)
 8009016:	429e      	cmp	r6, r3
 8009018:	dc01      	bgt.n	800901e <atan+0x1e>
 800901a:	d109      	bne.n	8009030 <atan+0x30>
 800901c:	b140      	cbz	r0, 8009030 <atan+0x30>
 800901e:	4622      	mov	r2, r4
 8009020:	462b      	mov	r3, r5
 8009022:	4620      	mov	r0, r4
 8009024:	4629      	mov	r1, r5
 8009026:	f7f7 f8a1 	bl	800016c <__adddf3>
 800902a:	4604      	mov	r4, r0
 800902c:	460d      	mov	r5, r1
 800902e:	e005      	b.n	800903c <atan+0x3c>
 8009030:	f1bb 0f00 	cmp.w	fp, #0
 8009034:	4cac      	ldr	r4, [pc, #688]	; (80092e8 <atan+0x2e8>)
 8009036:	f300 8121 	bgt.w	800927c <atan+0x27c>
 800903a:	4dac      	ldr	r5, [pc, #688]	; (80092ec <atan+0x2ec>)
 800903c:	4620      	mov	r0, r4
 800903e:	4629      	mov	r1, r5
 8009040:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009044:	4baa      	ldr	r3, [pc, #680]	; (80092f0 <atan+0x2f0>)
 8009046:	429e      	cmp	r6, r3
 8009048:	dc11      	bgt.n	800906e <atan+0x6e>
 800904a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800904e:	429e      	cmp	r6, r3
 8009050:	dc0a      	bgt.n	8009068 <atan+0x68>
 8009052:	a38b      	add	r3, pc, #556	; (adr r3, 8009280 <atan+0x280>)
 8009054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009058:	f7f7 f888 	bl	800016c <__adddf3>
 800905c:	2200      	movs	r2, #0
 800905e:	4ba5      	ldr	r3, [pc, #660]	; (80092f4 <atan+0x2f4>)
 8009060:	f7f7 fcca 	bl	80009f8 <__aeabi_dcmpgt>
 8009064:	2800      	cmp	r0, #0
 8009066:	d1e9      	bne.n	800903c <atan+0x3c>
 8009068:	f04f 3aff 	mov.w	sl, #4294967295
 800906c:	e027      	b.n	80090be <atan+0xbe>
 800906e:	f000 f951 	bl	8009314 <fabs>
 8009072:	4ba1      	ldr	r3, [pc, #644]	; (80092f8 <atan+0x2f8>)
 8009074:	4604      	mov	r4, r0
 8009076:	429e      	cmp	r6, r3
 8009078:	460d      	mov	r5, r1
 800907a:	f300 80b8 	bgt.w	80091ee <atan+0x1ee>
 800907e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8009082:	429e      	cmp	r6, r3
 8009084:	f300 809c 	bgt.w	80091c0 <atan+0x1c0>
 8009088:	4602      	mov	r2, r0
 800908a:	460b      	mov	r3, r1
 800908c:	f7f7 f86e 	bl	800016c <__adddf3>
 8009090:	2200      	movs	r2, #0
 8009092:	4b98      	ldr	r3, [pc, #608]	; (80092f4 <atan+0x2f4>)
 8009094:	f7f7 f868 	bl	8000168 <__aeabi_dsub>
 8009098:	2200      	movs	r2, #0
 800909a:	4606      	mov	r6, r0
 800909c:	460f      	mov	r7, r1
 800909e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80090a2:	4620      	mov	r0, r4
 80090a4:	4629      	mov	r1, r5
 80090a6:	f7f7 f861 	bl	800016c <__adddf3>
 80090aa:	4602      	mov	r2, r0
 80090ac:	460b      	mov	r3, r1
 80090ae:	4630      	mov	r0, r6
 80090b0:	4639      	mov	r1, r7
 80090b2:	f7f7 fb3b 	bl	800072c <__aeabi_ddiv>
 80090b6:	f04f 0a00 	mov.w	sl, #0
 80090ba:	4604      	mov	r4, r0
 80090bc:	460d      	mov	r5, r1
 80090be:	4622      	mov	r2, r4
 80090c0:	462b      	mov	r3, r5
 80090c2:	4620      	mov	r0, r4
 80090c4:	4629      	mov	r1, r5
 80090c6:	f7f7 fa07 	bl	80004d8 <__aeabi_dmul>
 80090ca:	4602      	mov	r2, r0
 80090cc:	460b      	mov	r3, r1
 80090ce:	4680      	mov	r8, r0
 80090d0:	4689      	mov	r9, r1
 80090d2:	f7f7 fa01 	bl	80004d8 <__aeabi_dmul>
 80090d6:	a36c      	add	r3, pc, #432	; (adr r3, 8009288 <atan+0x288>)
 80090d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090dc:	4606      	mov	r6, r0
 80090de:	460f      	mov	r7, r1
 80090e0:	f7f7 f9fa 	bl	80004d8 <__aeabi_dmul>
 80090e4:	a36a      	add	r3, pc, #424	; (adr r3, 8009290 <atan+0x290>)
 80090e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ea:	f7f7 f83f 	bl	800016c <__adddf3>
 80090ee:	4632      	mov	r2, r6
 80090f0:	463b      	mov	r3, r7
 80090f2:	f7f7 f9f1 	bl	80004d8 <__aeabi_dmul>
 80090f6:	a368      	add	r3, pc, #416	; (adr r3, 8009298 <atan+0x298>)
 80090f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090fc:	f7f7 f836 	bl	800016c <__adddf3>
 8009100:	4632      	mov	r2, r6
 8009102:	463b      	mov	r3, r7
 8009104:	f7f7 f9e8 	bl	80004d8 <__aeabi_dmul>
 8009108:	a365      	add	r3, pc, #404	; (adr r3, 80092a0 <atan+0x2a0>)
 800910a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800910e:	f7f7 f82d 	bl	800016c <__adddf3>
 8009112:	4632      	mov	r2, r6
 8009114:	463b      	mov	r3, r7
 8009116:	f7f7 f9df 	bl	80004d8 <__aeabi_dmul>
 800911a:	a363      	add	r3, pc, #396	; (adr r3, 80092a8 <atan+0x2a8>)
 800911c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009120:	f7f7 f824 	bl	800016c <__adddf3>
 8009124:	4632      	mov	r2, r6
 8009126:	463b      	mov	r3, r7
 8009128:	f7f7 f9d6 	bl	80004d8 <__aeabi_dmul>
 800912c:	a360      	add	r3, pc, #384	; (adr r3, 80092b0 <atan+0x2b0>)
 800912e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009132:	f7f7 f81b 	bl	800016c <__adddf3>
 8009136:	4642      	mov	r2, r8
 8009138:	464b      	mov	r3, r9
 800913a:	f7f7 f9cd 	bl	80004d8 <__aeabi_dmul>
 800913e:	a35e      	add	r3, pc, #376	; (adr r3, 80092b8 <atan+0x2b8>)
 8009140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009144:	4680      	mov	r8, r0
 8009146:	4689      	mov	r9, r1
 8009148:	4630      	mov	r0, r6
 800914a:	4639      	mov	r1, r7
 800914c:	f7f7 f9c4 	bl	80004d8 <__aeabi_dmul>
 8009150:	a35b      	add	r3, pc, #364	; (adr r3, 80092c0 <atan+0x2c0>)
 8009152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009156:	f7f7 f807 	bl	8000168 <__aeabi_dsub>
 800915a:	4632      	mov	r2, r6
 800915c:	463b      	mov	r3, r7
 800915e:	f7f7 f9bb 	bl	80004d8 <__aeabi_dmul>
 8009162:	a359      	add	r3, pc, #356	; (adr r3, 80092c8 <atan+0x2c8>)
 8009164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009168:	f7f6 fffe 	bl	8000168 <__aeabi_dsub>
 800916c:	4632      	mov	r2, r6
 800916e:	463b      	mov	r3, r7
 8009170:	f7f7 f9b2 	bl	80004d8 <__aeabi_dmul>
 8009174:	a356      	add	r3, pc, #344	; (adr r3, 80092d0 <atan+0x2d0>)
 8009176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800917a:	f7f6 fff5 	bl	8000168 <__aeabi_dsub>
 800917e:	4632      	mov	r2, r6
 8009180:	463b      	mov	r3, r7
 8009182:	f7f7 f9a9 	bl	80004d8 <__aeabi_dmul>
 8009186:	a354      	add	r3, pc, #336	; (adr r3, 80092d8 <atan+0x2d8>)
 8009188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800918c:	f7f6 ffec 	bl	8000168 <__aeabi_dsub>
 8009190:	4632      	mov	r2, r6
 8009192:	463b      	mov	r3, r7
 8009194:	f7f7 f9a0 	bl	80004d8 <__aeabi_dmul>
 8009198:	4602      	mov	r2, r0
 800919a:	460b      	mov	r3, r1
 800919c:	4640      	mov	r0, r8
 800919e:	4649      	mov	r1, r9
 80091a0:	f7f6 ffe4 	bl	800016c <__adddf3>
 80091a4:	4622      	mov	r2, r4
 80091a6:	462b      	mov	r3, r5
 80091a8:	f7f7 f996 	bl	80004d8 <__aeabi_dmul>
 80091ac:	f1ba 3fff 	cmp.w	sl, #4294967295
 80091b0:	4602      	mov	r2, r0
 80091b2:	460b      	mov	r3, r1
 80091b4:	d144      	bne.n	8009240 <atan+0x240>
 80091b6:	4620      	mov	r0, r4
 80091b8:	4629      	mov	r1, r5
 80091ba:	f7f6 ffd5 	bl	8000168 <__aeabi_dsub>
 80091be:	e734      	b.n	800902a <atan+0x2a>
 80091c0:	2200      	movs	r2, #0
 80091c2:	4b4c      	ldr	r3, [pc, #304]	; (80092f4 <atan+0x2f4>)
 80091c4:	f7f6 ffd0 	bl	8000168 <__aeabi_dsub>
 80091c8:	2200      	movs	r2, #0
 80091ca:	4606      	mov	r6, r0
 80091cc:	460f      	mov	r7, r1
 80091ce:	4620      	mov	r0, r4
 80091d0:	4629      	mov	r1, r5
 80091d2:	4b48      	ldr	r3, [pc, #288]	; (80092f4 <atan+0x2f4>)
 80091d4:	f7f6 ffca 	bl	800016c <__adddf3>
 80091d8:	4602      	mov	r2, r0
 80091da:	460b      	mov	r3, r1
 80091dc:	4630      	mov	r0, r6
 80091de:	4639      	mov	r1, r7
 80091e0:	f7f7 faa4 	bl	800072c <__aeabi_ddiv>
 80091e4:	f04f 0a01 	mov.w	sl, #1
 80091e8:	4604      	mov	r4, r0
 80091ea:	460d      	mov	r5, r1
 80091ec:	e767      	b.n	80090be <atan+0xbe>
 80091ee:	4b43      	ldr	r3, [pc, #268]	; (80092fc <atan+0x2fc>)
 80091f0:	429e      	cmp	r6, r3
 80091f2:	da1a      	bge.n	800922a <atan+0x22a>
 80091f4:	2200      	movs	r2, #0
 80091f6:	4b42      	ldr	r3, [pc, #264]	; (8009300 <atan+0x300>)
 80091f8:	f7f6 ffb6 	bl	8000168 <__aeabi_dsub>
 80091fc:	2200      	movs	r2, #0
 80091fe:	4606      	mov	r6, r0
 8009200:	460f      	mov	r7, r1
 8009202:	4620      	mov	r0, r4
 8009204:	4629      	mov	r1, r5
 8009206:	4b3e      	ldr	r3, [pc, #248]	; (8009300 <atan+0x300>)
 8009208:	f7f7 f966 	bl	80004d8 <__aeabi_dmul>
 800920c:	2200      	movs	r2, #0
 800920e:	4b39      	ldr	r3, [pc, #228]	; (80092f4 <atan+0x2f4>)
 8009210:	f7f6 ffac 	bl	800016c <__adddf3>
 8009214:	4602      	mov	r2, r0
 8009216:	460b      	mov	r3, r1
 8009218:	4630      	mov	r0, r6
 800921a:	4639      	mov	r1, r7
 800921c:	f7f7 fa86 	bl	800072c <__aeabi_ddiv>
 8009220:	f04f 0a02 	mov.w	sl, #2
 8009224:	4604      	mov	r4, r0
 8009226:	460d      	mov	r5, r1
 8009228:	e749      	b.n	80090be <atan+0xbe>
 800922a:	4602      	mov	r2, r0
 800922c:	460b      	mov	r3, r1
 800922e:	2000      	movs	r0, #0
 8009230:	4934      	ldr	r1, [pc, #208]	; (8009304 <atan+0x304>)
 8009232:	f7f7 fa7b 	bl	800072c <__aeabi_ddiv>
 8009236:	f04f 0a03 	mov.w	sl, #3
 800923a:	4604      	mov	r4, r0
 800923c:	460d      	mov	r5, r1
 800923e:	e73e      	b.n	80090be <atan+0xbe>
 8009240:	4b31      	ldr	r3, [pc, #196]	; (8009308 <atan+0x308>)
 8009242:	4e32      	ldr	r6, [pc, #200]	; (800930c <atan+0x30c>)
 8009244:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8009248:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800924c:	e9da 2300 	ldrd	r2, r3, [sl]
 8009250:	f7f6 ff8a 	bl	8000168 <__aeabi_dsub>
 8009254:	4622      	mov	r2, r4
 8009256:	462b      	mov	r3, r5
 8009258:	f7f6 ff86 	bl	8000168 <__aeabi_dsub>
 800925c:	4602      	mov	r2, r0
 800925e:	460b      	mov	r3, r1
 8009260:	e9d6 0100 	ldrd	r0, r1, [r6]
 8009264:	f7f6 ff80 	bl	8000168 <__aeabi_dsub>
 8009268:	f1bb 0f00 	cmp.w	fp, #0
 800926c:	4604      	mov	r4, r0
 800926e:	460d      	mov	r5, r1
 8009270:	f6bf aee4 	bge.w	800903c <atan+0x3c>
 8009274:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009278:	461d      	mov	r5, r3
 800927a:	e6df      	b.n	800903c <atan+0x3c>
 800927c:	4d24      	ldr	r5, [pc, #144]	; (8009310 <atan+0x310>)
 800927e:	e6dd      	b.n	800903c <atan+0x3c>
 8009280:	8800759c 	.word	0x8800759c
 8009284:	7e37e43c 	.word	0x7e37e43c
 8009288:	e322da11 	.word	0xe322da11
 800928c:	3f90ad3a 	.word	0x3f90ad3a
 8009290:	24760deb 	.word	0x24760deb
 8009294:	3fa97b4b 	.word	0x3fa97b4b
 8009298:	a0d03d51 	.word	0xa0d03d51
 800929c:	3fb10d66 	.word	0x3fb10d66
 80092a0:	c54c206e 	.word	0xc54c206e
 80092a4:	3fb745cd 	.word	0x3fb745cd
 80092a8:	920083ff 	.word	0x920083ff
 80092ac:	3fc24924 	.word	0x3fc24924
 80092b0:	5555550d 	.word	0x5555550d
 80092b4:	3fd55555 	.word	0x3fd55555
 80092b8:	2c6a6c2f 	.word	0x2c6a6c2f
 80092bc:	bfa2b444 	.word	0xbfa2b444
 80092c0:	52defd9a 	.word	0x52defd9a
 80092c4:	3fadde2d 	.word	0x3fadde2d
 80092c8:	af749a6d 	.word	0xaf749a6d
 80092cc:	3fb3b0f2 	.word	0x3fb3b0f2
 80092d0:	fe231671 	.word	0xfe231671
 80092d4:	3fbc71c6 	.word	0x3fbc71c6
 80092d8:	9998ebc4 	.word	0x9998ebc4
 80092dc:	3fc99999 	.word	0x3fc99999
 80092e0:	440fffff 	.word	0x440fffff
 80092e4:	7ff00000 	.word	0x7ff00000
 80092e8:	54442d18 	.word	0x54442d18
 80092ec:	bff921fb 	.word	0xbff921fb
 80092f0:	3fdbffff 	.word	0x3fdbffff
 80092f4:	3ff00000 	.word	0x3ff00000
 80092f8:	3ff2ffff 	.word	0x3ff2ffff
 80092fc:	40038000 	.word	0x40038000
 8009300:	3ff80000 	.word	0x3ff80000
 8009304:	bff00000 	.word	0xbff00000
 8009308:	080099d0 	.word	0x080099d0
 800930c:	080099b0 	.word	0x080099b0
 8009310:	3ff921fb 	.word	0x3ff921fb

08009314 <fabs>:
 8009314:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009318:	4770      	bx	lr

0800931a <sqrt>:
 800931a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800931c:	4606      	mov	r6, r0
 800931e:	460f      	mov	r7, r1
 8009320:	f000 f820 	bl	8009364 <__ieee754_sqrt>
 8009324:	4632      	mov	r2, r6
 8009326:	4604      	mov	r4, r0
 8009328:	460d      	mov	r5, r1
 800932a:	463b      	mov	r3, r7
 800932c:	4630      	mov	r0, r6
 800932e:	4639      	mov	r1, r7
 8009330:	f7f7 fb6c 	bl	8000a0c <__aeabi_dcmpun>
 8009334:	b990      	cbnz	r0, 800935c <sqrt+0x42>
 8009336:	2200      	movs	r2, #0
 8009338:	2300      	movs	r3, #0
 800933a:	4630      	mov	r0, r6
 800933c:	4639      	mov	r1, r7
 800933e:	f7f7 fb3d 	bl	80009bc <__aeabi_dcmplt>
 8009342:	b158      	cbz	r0, 800935c <sqrt+0x42>
 8009344:	f7fc ff50 	bl	80061e8 <__errno>
 8009348:	2321      	movs	r3, #33	; 0x21
 800934a:	2200      	movs	r2, #0
 800934c:	6003      	str	r3, [r0, #0]
 800934e:	2300      	movs	r3, #0
 8009350:	4610      	mov	r0, r2
 8009352:	4619      	mov	r1, r3
 8009354:	f7f7 f9ea 	bl	800072c <__aeabi_ddiv>
 8009358:	4604      	mov	r4, r0
 800935a:	460d      	mov	r5, r1
 800935c:	4620      	mov	r0, r4
 800935e:	4629      	mov	r1, r5
 8009360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009364 <__ieee754_sqrt>:
 8009364:	f8df c158 	ldr.w	ip, [pc, #344]	; 80094c0 <__ieee754_sqrt+0x15c>
 8009368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800936c:	ea3c 0c01 	bics.w	ip, ip, r1
 8009370:	4606      	mov	r6, r0
 8009372:	460d      	mov	r5, r1
 8009374:	460c      	mov	r4, r1
 8009376:	460a      	mov	r2, r1
 8009378:	4607      	mov	r7, r0
 800937a:	4603      	mov	r3, r0
 800937c:	d10f      	bne.n	800939e <__ieee754_sqrt+0x3a>
 800937e:	4602      	mov	r2, r0
 8009380:	460b      	mov	r3, r1
 8009382:	f7f7 f8a9 	bl	80004d8 <__aeabi_dmul>
 8009386:	4602      	mov	r2, r0
 8009388:	460b      	mov	r3, r1
 800938a:	4630      	mov	r0, r6
 800938c:	4629      	mov	r1, r5
 800938e:	f7f6 feed 	bl	800016c <__adddf3>
 8009392:	4606      	mov	r6, r0
 8009394:	460d      	mov	r5, r1
 8009396:	4630      	mov	r0, r6
 8009398:	4629      	mov	r1, r5
 800939a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800939e:	2900      	cmp	r1, #0
 80093a0:	dc0e      	bgt.n	80093c0 <__ieee754_sqrt+0x5c>
 80093a2:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80093a6:	ea5c 0707 	orrs.w	r7, ip, r7
 80093aa:	d0f4      	beq.n	8009396 <__ieee754_sqrt+0x32>
 80093ac:	b141      	cbz	r1, 80093c0 <__ieee754_sqrt+0x5c>
 80093ae:	4602      	mov	r2, r0
 80093b0:	460b      	mov	r3, r1
 80093b2:	f7f6 fed9 	bl	8000168 <__aeabi_dsub>
 80093b6:	4602      	mov	r2, r0
 80093b8:	460b      	mov	r3, r1
 80093ba:	f7f7 f9b7 	bl	800072c <__aeabi_ddiv>
 80093be:	e7e8      	b.n	8009392 <__ieee754_sqrt+0x2e>
 80093c0:	1521      	asrs	r1, r4, #20
 80093c2:	d075      	beq.n	80094b0 <__ieee754_sqrt+0x14c>
 80093c4:	07cc      	lsls	r4, r1, #31
 80093c6:	f04f 0400 	mov.w	r4, #0
 80093ca:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80093ce:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 80093d2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80093d6:	bf5e      	ittt	pl
 80093d8:	0fd9      	lsrpl	r1, r3, #31
 80093da:	005b      	lslpl	r3, r3, #1
 80093dc:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 80093e0:	0fd9      	lsrs	r1, r3, #31
 80093e2:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80093e6:	2516      	movs	r5, #22
 80093e8:	4620      	mov	r0, r4
 80093ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80093ee:	107f      	asrs	r7, r7, #1
 80093f0:	005b      	lsls	r3, r3, #1
 80093f2:	1846      	adds	r6, r0, r1
 80093f4:	4296      	cmp	r6, r2
 80093f6:	bfde      	ittt	le
 80093f8:	1b92      	suble	r2, r2, r6
 80093fa:	1870      	addle	r0, r6, r1
 80093fc:	1864      	addle	r4, r4, r1
 80093fe:	0052      	lsls	r2, r2, #1
 8009400:	3d01      	subs	r5, #1
 8009402:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8009406:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800940a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800940e:	d1f0      	bne.n	80093f2 <__ieee754_sqrt+0x8e>
 8009410:	4629      	mov	r1, r5
 8009412:	f04f 0e20 	mov.w	lr, #32
 8009416:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800941a:	4282      	cmp	r2, r0
 800941c:	eb06 0c05 	add.w	ip, r6, r5
 8009420:	dc02      	bgt.n	8009428 <__ieee754_sqrt+0xc4>
 8009422:	d113      	bne.n	800944c <__ieee754_sqrt+0xe8>
 8009424:	459c      	cmp	ip, r3
 8009426:	d811      	bhi.n	800944c <__ieee754_sqrt+0xe8>
 8009428:	f1bc 0f00 	cmp.w	ip, #0
 800942c:	eb0c 0506 	add.w	r5, ip, r6
 8009430:	da43      	bge.n	80094ba <__ieee754_sqrt+0x156>
 8009432:	2d00      	cmp	r5, #0
 8009434:	db41      	blt.n	80094ba <__ieee754_sqrt+0x156>
 8009436:	f100 0801 	add.w	r8, r0, #1
 800943a:	1a12      	subs	r2, r2, r0
 800943c:	4640      	mov	r0, r8
 800943e:	459c      	cmp	ip, r3
 8009440:	bf88      	it	hi
 8009442:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8009446:	eba3 030c 	sub.w	r3, r3, ip
 800944a:	4431      	add	r1, r6
 800944c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8009450:	f1be 0e01 	subs.w	lr, lr, #1
 8009454:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8009458:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800945c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009460:	d1db      	bne.n	800941a <__ieee754_sqrt+0xb6>
 8009462:	4313      	orrs	r3, r2
 8009464:	d006      	beq.n	8009474 <__ieee754_sqrt+0x110>
 8009466:	1c48      	adds	r0, r1, #1
 8009468:	bf0b      	itete	eq
 800946a:	4671      	moveq	r1, lr
 800946c:	3101      	addne	r1, #1
 800946e:	3401      	addeq	r4, #1
 8009470:	f021 0101 	bicne.w	r1, r1, #1
 8009474:	1063      	asrs	r3, r4, #1
 8009476:	0849      	lsrs	r1, r1, #1
 8009478:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800947c:	07e2      	lsls	r2, r4, #31
 800947e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009482:	bf48      	it	mi
 8009484:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8009488:	460e      	mov	r6, r1
 800948a:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800948e:	e782      	b.n	8009396 <__ieee754_sqrt+0x32>
 8009490:	0ada      	lsrs	r2, r3, #11
 8009492:	3815      	subs	r0, #21
 8009494:	055b      	lsls	r3, r3, #21
 8009496:	2a00      	cmp	r2, #0
 8009498:	d0fa      	beq.n	8009490 <__ieee754_sqrt+0x12c>
 800949a:	02d5      	lsls	r5, r2, #11
 800949c:	d50a      	bpl.n	80094b4 <__ieee754_sqrt+0x150>
 800949e:	f1c1 0420 	rsb	r4, r1, #32
 80094a2:	fa23 f404 	lsr.w	r4, r3, r4
 80094a6:	1e4d      	subs	r5, r1, #1
 80094a8:	408b      	lsls	r3, r1
 80094aa:	4322      	orrs	r2, r4
 80094ac:	1b41      	subs	r1, r0, r5
 80094ae:	e789      	b.n	80093c4 <__ieee754_sqrt+0x60>
 80094b0:	4608      	mov	r0, r1
 80094b2:	e7f0      	b.n	8009496 <__ieee754_sqrt+0x132>
 80094b4:	0052      	lsls	r2, r2, #1
 80094b6:	3101      	adds	r1, #1
 80094b8:	e7ef      	b.n	800949a <__ieee754_sqrt+0x136>
 80094ba:	4680      	mov	r8, r0
 80094bc:	e7bd      	b.n	800943a <__ieee754_sqrt+0xd6>
 80094be:	bf00      	nop
 80094c0:	7ff00000 	.word	0x7ff00000

080094c4 <_init>:
 80094c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094c6:	bf00      	nop
 80094c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094ca:	bc08      	pop	{r3}
 80094cc:	469e      	mov	lr, r3
 80094ce:	4770      	bx	lr

080094d0 <_fini>:
 80094d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094d2:	bf00      	nop
 80094d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094d6:	bc08      	pop	{r3}
 80094d8:	469e      	mov	lr, r3
 80094da:	4770      	bx	lr
